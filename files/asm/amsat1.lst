0001   0000             .TITLE "AMS80 - AMSAT STANDARD 8080 MONITOR V2.0"
0002   0000             
0003   0000             ;   THIS MONITOR IS A MINIMUM 8080 SYSTEM MONITOR
0004   0000             ; FOR USE BY AMSAT MEMBERS. IT PROVIDES THE BASIC
0005   0000             ; STRUCTURE NECESSARY FOR 8080 DEBUG AND ALSO A
0006   0000             ; STANDARD BASE FOR AMSAT MEMBERS USING THE 8080.
0007   0000             ;
0008   0000             ;   THIS STANDARD BASE WILL ALLOW PROGRAMS
0009   0000             ; TO BE USED BY ALL AMSAT MEMBERS AND AID IN THE
0010   0000             ; TRANSMISSION OF PROGRAM MATERIALS VIA THE OSCAR
0011   0000             ; SATELLITES.
0012   0000             ;
0013   0000             ;   THE ROUTINE ALLOWS FOR MEMORY EXAMINE AND MODIFY,
0014   0000             ; USER INTERRUPT/RST VECTORS, AND VARIOUS
0015   0000             ; TELETYPE SUPPORT ROUTINES TO LOAD AND DUMP MEMORY
0016   0000             ; IN A STANDARD FORMAT ( SAME AS THE INTEL FORMAT ).
0017   0000             
0018   0000             ;
0019   0000             ; DEFINE THE SYSTEM MEMORY PARAMETERS
0020   0000             ;
0021   0000             
0022   0000             ROM	= 0	;START OF READ-ONLY MEMORY
0023   0000             RAM	= 0C00h	;START OF READ-WRITE MEMORY
0024   0000             STACK =RAM+256	;TOP OF MONITOR STACK
0025   0000             
0026   0000             ;
0027   0000             ; DEFINE TTY CONTROL CHARS
0028   0000             ;
0029   0000             CR	= 	0Dh	;CARRIAGE RETURN
0030   0000             LF	= 	0Ah	;LINE FEED
0031   0000             RBO	= 	7Fh	;RUB-OUT
0032   0000             TOFF = 	14h	;TAPE OFF COMMAND
0033   0000             TON	= 	12h	;TAPE ON COMMAND
0034   0000             XOFF = 	13h	;PUNCH OFF COMMAND
0035   0000             XON	= 	11h	;PUNCH ON COMMAND 
0036   0000             
0037   0000             ;
0038   0000             ; START OF SYSTEM
0039   0000             ;
0040   0000             
0041   0000             	.ORG 	ROM
0042   0000             
0043   0000             EXEC:			; MAIN ENTRY INTO EXEC-80
0044   0000 22 12 0C    	SHLD	SVHL	; SAVE HL
0045   0003 C3 70 00    	JMP	BEGIN	; AND BEGIN
0046   0006 70 05       	.DW	ENDROM	;PAD BYTES ONLY
0047   0008             
0048   0008             ;
0049   0008             ; DEFINE USER INTERRUPT/SUBROUTINE VECTORS
0050   0008             ;
0051   0008             
0052   0008 E5          RS1:	PUSH 	H	;SAVE HL
0053   0009 2A 00 0C    	LHLD	RST1	; FETCH USER VECTOR
0054   000C E3          	XTHL		;PUT ONTO STACK RESTORING HL
0055   000D C9          	RET		; GO TO USER PROC
0056   000E 00 00       	.DW	0	;PAD
0057   0010             
0058   0010 E5          RS2:	PUSH 	H	;SAVE HL
0059   0011 2A 02 0C    	LHLD	RST2	; FETCH USER VECTOR
0060   0014 E3          	XTHL		;PUT ONTO STACK RESTORING HL
0061   0015 C9          	RET		; GO TO USER PROC
0062   0016 00 00       	.DW	0	;PAD
0063   0018             
0064   0018 E5          RS3:	PUSH 	H	;SAVE HL
0065   0019 2A 04 0C    	LHLD	RST3	; FETCH USER VECTOR
0066   001C E3          	XTHL		;PUT ONTO STACK RESTORING HL
0067   001D C9          	RET		; GO TO USER PROC
0068   001E 00 00       	.DW	0	;PAD
0069   0020             
0070   0020 E5          RS4:	PUSH 	H	;SAVE HL
0071   0021 2A 06 0C    	LHLD	RST4	; FETCH USER VECTOR
0072   0024 E3          	XTHL		;PUT ONTO STACK RESTORING HL
0073   0025 C9          	RET		; GO TO USER PROC
0074   0026 00 00       	.DW	0	;PAD
0075   0028             
0076   0028 E5          RS5:	PUSH 	H	;SAVE HL
0077   0029 2A 08 0C    	LHLD	RST5	; FETCH USER VECTOR
0078   002C E3          	XTHL		;PUT ONTO STACK RESTORING HL
0079   002D C9          	RET		; GO TO USER PROC
0080   002E 00 00       	.DW	0	;PAD
0081   0030             
0082   0030 E5          RS6:	PUSH 	H	;SAVE HL
0083   0031 2A 0A 0C    	LHLD	RST6	; FETCH USER VECTOR
0084   0034 E3          	XTHL		;PUT ONTO STACK RESTORING HL
0085   0035 C9          	RET		; GO TO USER PROC
0086   0036 00 00       	.DW	0	;PAD
0087   0038             
0088   0038 E5          RS7:	PUSH 	H	;SAVE HL
0089   0039 2A 0C 0C    	LHLD	RST7	; FETCH USER VECTOR
0090   003C E3          	XTHL		;PUT ONTO STACK RESTORING HL
0091   003D C9          	RET		; GO TO USER PROC
0092   003E 00 00       	.DW	0	;PAD
0093   0040             
0094   0040             
0095   0040             ;
0096   0040             ; MONITOR SUPPORT SUBROUTINE VECTORS
0097   0040             ;
0098   0040             ; USER UTILITY SUBROUTINES
0099   0040             ;
0100   0040             ;   THE FOLLOUING SET OF JUMPS ARE PROVIDED SO
0101   0040             ; USER PROGRAMS CAN REFERENCE COMMON ENTRY POINTS
0102   0040             ; TO THE VARIOUS ROUTINES.  THESE LOCATIONS WILL
0103   0040             ; REMAIN CONSTANT WHILE THE ACTUAL LOCATION OF EACH
0104   0040             ; ROUTINE MAY CHANGE FROM ONE REVISION LEVEL TO THE
0105   0040             ; NEXT.
0106   0040             ;
0107   0040             ;  THE CALLING SEQUENCE FOR EACH SUBROUTINE
0108   0040             ; REMAINS THE SAME AS DEFINED IN THE LISTING, WITH
0109   0040             ; ONLY A SLIGHT EXECUTION TIME OVERHEAD FOR THE
0110   0040             ; EXTRA JMP.
0111   0040             
0112   0040 C3 56 05    ITYPE:	JMP	TYPE	;TYPE A CHARACTER FROM 'A'
0113   0043 C3 65 05    IGETCH:	JMP	GETCH	;GET CHAR TO A (NO ECHO)
0114   0046 C3 00 01    ICHIN:	JMP	CHIN	;GET CHAR TO 'A' WITH ECHO
0115   0049             			; ( PARITY SET OFF )
0116   0049 C3 1B 01    IMSG:	JMP	MSG	;TYPE MSG, POINTER IN HL
0117   004C             			; ( MSG TERMINATED BY 0FFH )
0118   004C C3 2D 01    ICRET:	JMP	CRET	;TYPE CR, LF, RUB-OUT
0119   004F C3 3A 01    ISPACE:	JMP	SPACE	;TYPE A SPACE
0120   0052 C3 4F 01    ITHXN:	JMP	THXN	;TYPE B3-B0 OF 'A' IN HEX
0121   0055             			; ( ONE ASCII CHARACTER )
0122   0055 C3 42 01    ITHXB: 	JMP	THXB	;TYPE 'A' IN ASCII-HEX 2 CH
0123   0058 C3 60 01    ITHXW: 	JMP	THXW	;TYPE 'HL' IN ASCII-HEX 4 CH
0124   005B C3 6B 01    IGHXN: 	JMP 	GHXN	;GET HEX NIBBLE TO B3-B0 'A'
0125   005E C3 82 01    IGHXB: 	JMP 	GHXB	;GET HEX BYTE FROM TTY1 - 'A'
0126   0061 C3 95 01    IGHXW: 	JMP 	GHXW	;GET HEX WORD TO HL
0127   0064 C3 B0 01    ISTORE:	JMP 	STORE	;STORE A BYTE M,A WITH CHECK
0128   0067 C3 13 02    INEGDE:	JMP 	NEGDE	;NEGATE THE DE REGISTER
0129   006A C3 0C 04    IPWAIT:	JMP 	PWAIT	;TYPE 'PAUSE' AND WAIT FOR
0130   006D             			; ANY CHARACTER ON TTY1
0131   006D C3 8E 02    IOK:	JMP	OKK	;TYPE	'OK?' AND WAIT FOR
0132   0070             			; SPACE IF OK. OTHERS WILL
0133   0070             			; PRINT ABORT MSG AND RETURN
0134   0070             			; TO MONITOR.
0135   0070             ;
0136   0070             ; BEGIN MONITOR
0137   0070             ;
0138   0070             BEGIN:
0139   0070 21 1E 0C    	LXI	H,TMPA	;SET PSEUDO
0140   0073 36 00       	MVI 	M,0	; CARRY TO 0
0141   0075 D2 7A 00    	JNC 	$+5	; NO CARRY ON INPUT
0142   0078 36 01       	MVI 	M,1	;PSEUDO CY TO 1
0143   007A E1          	POP 	H	;POP CALL ADDRESS IF ANY
0144   007B 22 0E 0C    	SHLD 	SVPC	; AND SAVE PC
0145   007E 21 FE FF    	LXI 	H,-2	;FETCH SP
0146   0081 39          	DAD 	SP	; ADJUSTING FOR POP
0147   0082 22 10 0C    	SHLD 	SVSP	;SAVE USER STACK POINTER
0148   0085 31 1A 0C    	LXI 	SP,SVA+1	;SET SP FOR REGISTER SAVE
0149   0088 F5          	PUSH 	PSW	;SAVE A,PSW
0150   0089 C5          	PUSH 	B	;SAVE BC
0151   008A D5          	PUSH 	D	;SAVE DE
0152   008B 21 18 0C    	LXI 	H,SVF	;POINT TO SAVED PSW
0153   008E 7E          	MOV 	A,M	; AND FETCHIT
0154   008F E6 FE       	ANI	0FEh	;ZERO CY
0155   0091 47          	MOV 	B,A	; AND SAVE
0156   0092 3A 1E 0C    	LDA 	TMPA	;GET INPUT SAVED CY
0157   0095 B0          	ORA 	B	; AND INSERT
0158   0096 77          	MOV	M,A	;RESTORE PSB WITH OK CY
0159   0097 31 00 0D    	LXI 	SP,STACK	;SET SP TO EXEC STACK ARRAY
0160   009A 21 EA 04    	LXI 	H,M0	;TYPE ENTRY
0161   009D CD 1B 01    	CALL 	MSG	; MESSAGE
0162   00A0             
0163   00A0             ;
0164   00A0             ; NEXT MONITOR COMMAND
0165   00A0             ;
0166   00A0             
0167   00A0 31 00 0D    NEXT:	LXI 	SP,STACK	;RESTORE SP
0168   00A3 21 F9 04    	LXI	H,M1	;TYPE
0169   00A6 CD 1B 01    	CALL	MSG	; PROMPTER
0170   00A9 CD 00 01    	CALL 	CHIN	;GET COMMAND CHAR
0171   00AC 47          	MOV 	B,A	; AND SAVE COMMAND
0172   00AD             
0173   00AD             ;
0174   00AD             ; SEARCH OPERATION TABLE FOR COMMAND
0175   00AD             ;
0176   00AD 21 CF 00    	LXI	H,OPTAB	;FETCH TABLE VECTOR
0177   00B0             
0178   00B0 7E          SRCH:	MOV 	A,M	; GET TABLE COMMAND BYTE
0179   00B1 FE FF       	CPI 	-1	;CHECK FOR END OF TABLE
0180   00B3 CA C0 00    	JZ 	ILLEG	;MUST BE ILLEGAL INPUT
0181   00B6 B8          	CMP	B	;COMPARE TO INPUT
0182   00B7 CA C9 00    	JZ 	FNDCM	;FOUND COMMAND
0183   00BA 23          	INX	H	;BUMP TO
0184   00BB 23          	INX	H	; NEXT
0185   00BC 23          	INX	H	;  COMMAND
0186   00BD C3 B0 00    	JMP	SRCH	;AND CONTINUE
0187   00C0             
0188   00C0             ;
0189   00C0             ; UNDEFINED COMMAND. TYPE ERROR MESSAGE
0190   00C0             ;
0191   00C0             
0192   00C0 21 FF 04    ILLEG:	LXI	H,M2	;UNDEFINED
0193   00C3 CD 1B 01    	CALL	MSG	;  MESSAGE
0194   00C6 C3 A0 00    	JMP	NEXT	;TRY AGAIN
0195   00C9             
0196   00C9             ;
0197   00C9             ; FOUND COMMAND, NOW FETCH ADDRESS AND EXECUTE COMMAND
0198   00C9             ;
0199   00C9             
0200   00C9 23          FNDCM:	INX 	H	;BUMP TO LOW ADDRESS BITS
0201   00CA 5E          	MOV 	E,M	; AND FETCH IT
0202   00CB 23          	INX 	H	;GET HIGH
0203   00CC 56          	MOV 	D,M	; ADDRESS BYTE
0204   00CD EB          	XCHG		;ADDRESS TO HL
0205   00CE E9          	PCHL		;GOTO COMMAND PROCESSOR
0206   00CF             
0207   00CF             ;
0208   00CF             ; OPERATION DECODE/DISPATCH TABLE
0209   00CF             ;
0210   00CF             
0211   00CF 41          OPTAB:	.DB	'A'	;COMMAND
0212   00D0 C1 01       	.DW 	GETAD	; TO GET ADDRESS
0213   00D2             
0214   00D2 0D          	.DB	CR	;COMMAND
0215   00D3 A0 00       	.DW	NEXT	; EFFECTIVE NOP
0216   00D5             
0217   00D5 2E          	.DB 	'.'	;COMMAND
0218   00D6 D3 01       	.DW	LOCAT	; TO EXAMINE CURRENT LOCATION
0219   00D8             
0220   00D8 0A          	.DB	LF	;COMMAND
0221   00D9 F6 01       	.DW	NXLOC	; TO EXAMINE NEXT LOCATION
0222   00DB             
0223   00DB 2D          	.DB 	'-'	;COMMAND
0224   00DC 0C 02       	.DW	LSTLC	; TO EXAMINE PREVIOUS LOCATION
0225   00DE             
0226   00DE 44          	.DB	'D'	;COMMAND
0227   00DF 1D 02       	.DW	DUMP	; TO DUMP MEMORY AREA
0228   00E1             
0229   00E1 46          	.DB	'F'	;COMMAND
0230   00E2 CB 02       	.DW	FILL	; TO FILL MEMORY
0231   00E4             
0232   00E4 47          	.DB	'G'	;COMMAND
0233   00E5 7C 02       	.DW	GOTO	; TO GOTO MEMORY LOCATION
0234   00E7             
0235   00E7 4D          	.DB	'M'	;COMMAND
0236   00E8 AC 02       	.DW MOVE	; TO GOTO AREA OF MEMORY
0237   00EA             
0238   00EA 58          	.DB	'X'	;COMMAND
0239   00EB 84 02       	.DW	GETXA	; TO GET XEQ ADDRESS
0240   00ED             
0241   00ED 4A          	.DB	'J'	;COMMAND
0242   00EE 42 02       	.DW	JUMP	; TO JUMP TO MEMORY LOCATION
0243   00F0             
0244   00F0 52          	.DB	'R'	;COMMAND
0245   00F1 F2 02       	.DW	REGEX	; REGISTER EXAMINE
0246   00F3             
0247   00F3 50          	.DB	'P'	;COMMAND
0248   00F4 A0 03       	.DW	PUNCH	; PUNCH MEMORY
0249   00F6             
0250   00F6 45          	.DB	'E'	;COMMAND
0251   00F7 18 04       	.DW 	PEND	; PUNCH END-OF-FILE
0252   00F9             
0253   00F9 4C          	.DB 	'L'	;COMMAND
0254   00FA 68 04       	.DW 	LOAD	; LOAD MEMORY
0255   00FC             
0256   00FC 4E          	.DB 	'N'	;COMMAND
0257   00FD 5D 04       	.DW 	NULL	; PUNCH NULLS
0258   00FF             
0259   00FF FF          	.DB	-1	;END OF TABLE CODE
0260   0100             
0261   0100             
0262   0100             ;
0263   0100             ; CHIN - ROUTINE TO INPUT ONE CHARACTER,
0264   0100             ;        STRIP OFF PARITY, AND ECHO IF ABOVE
0265   0100             ;        A SPACE (I.E., NOT CR, LF, ETC.)
0266   0100             ;
0267   0100             ; CALLING SEQUENCE ...
0268   0100             ;
0269   0100             ;        CALL CHIN		;CHARACTER IN
0270   0100             ;        ... 		;RETURN AFTER ECHO STARTED
0271   0100             ; 			;WITH CHAR .AND. 7FH IN 'A'
0272   0100             ;
0273   0100             
0274   0100             
0275   0100 3E FF       CHIN:	MVI 	A,-1	;SET ECHO
0276   0102 32 1A 0C    	STA 	ECHO	; FLAG ON
0277   0105 CD 65 05    CHINN:	CALL 	GETCH	;GET CHARACTER
0278   0108 E6 7F       	ANI 	7FH	;STRIP PARITY
0279   010A F5          	PUSH 	PSW	;SAVE DATA
0280   010B 3A 1A 0C    	LDA 	ECHO	; AND CHECK
0281   010E A7          	ANA 	A	;  ECHO FLAG
0282   010F C2 14 01    	JNZ 	$+5	;ECHO SET
0283   0112 F1          	POP 	PSW	;ECHO NOT SET
0284   0113 C9          	RET		; SO RETURN
0285   0114 F1          	POP 	PSW	;RESTORE DATA AND ECHO
0286   0115 FE 20       	CPI 	' '	;CHECK FOR CONTROL
0287   0117 D4 56 05    	CNC 	TYPE	;TYPE IF >= SPACE
0288   011A C9          	RET		;RETURN
0289   011B             
0290   011B             ;
0291   011B             ; MESSAGE PRINT ROUTINE
0292   011B             ;
0293   011B             ; CALLING SEQUENCE ...
0294   011B             ;
0295   011B             ;	LXA H,ADDRESS	;ADDRESS OF MESSAGE
0296   011B             ;	CALL MSG		;CALL ROUTINE
0297   011B             ;	...		;RETURN HERE AFTER LAST CHAR
0298   011B             ;			; INITIATED. ALL REGISTERS
0299   011B             ;			; PRESERVED
0300   011B             ;
0301   011B             
0302   011B F5          MSG:	PUSH 	PSW	;SAVE PSW
0303   011C E5          	PUSH 	H	;SAVE HL
0304   011D 7E          MNXT:	MOV 	A,M	;GET A CHARACTER
0305   011E FE FF       	CPI 	-1	;CHECK FOR 377Q/0FFH/-1 TERMINATOR
0306   0120 CA 2A 01    	JZ 	MDONE	;FOUND THE TERMINATOR
0307   0123 CD 56 05    	CALL 	TYPE	;TYPE THE CHARACTER
0308   0126 23          	INX	H	;DUMP MEM VECTOR
0309   0127 C3 1D 01    	JMP 	MNXT	; AND CONTINUE
0310   012A             
0311   012A E1          MDONE:	POP	H	;RESTORE HL
0312   012B F1          	POP 	PSW	; AND PSW
0313   012C C9          	RET		;EXIT TO CALLER
0314   012D             
0315   012D             ;
0316   012D             ; ROUTINE TO TYPE CR, LF, RBO
0317   012D             ;
0318   012D             ; CALLING SEQUENCE ...
0319   012D             ;
0320   012D             ;        CALL CRET	 
0321   012D             ;        ... 		;RETURN HERE WITH ALL REGS PRESERVED
0322   012D             ;
0323   012D             
0324   012D E5          CRET:	PUSH 	H	;SAVE HL
0325   012E 21 36 01    	LXI 	H,CRMSG	;ADDRESS Of CRLFRBO MSG
0326   0131 CD 1B 01    	CALL 	MSG	;TYPE IT
0327   0134 E1          	POP 	H	;RESTORE HL
0328   0135 C9          	RET		; AND RETURN
0329   0136             
0330   0136 0D 0A 7F FF CRMSG:	.DB CR,LF,RBO,-1
0331   013A             
0332   013A             
0333   013A             ;
0334   013A             ; ROUTINE TO TYPE ONE SPACE
0335   013A             ;
0336   013A             ; CALLING SEQUENCE ...
0337   013A             ;
0338   013A             ;        CALL SPACE 
0339   013A             ;        ... 		;RETURN HERE WITH ALL REGS PRESERVED
0340   013A             
0341   013A F5          SPACE:	PUSH 	PSW	;SAVE A,PSB
0342   013B 3E 20       	MVI 	A,' '	;GET A SPACE
0343   013D CD 56 05    	CALL 	TYPE	; AND DO IT
0344   0140 F1          	POP 	PSW	;RESTORE PSW
0345   0141 C9          	RET		;AND RETURN
0346   0142             
0347   0142             ;
0348   0142             ; ROUTINE TO TYPE VALUE ON 'A' IN HEX ON TTY
0349   0142             ;
0350   0142             ; CALLING SEQUENCE ...
0351   0142             ;
0352   0142             ;        LDA  DATA		;DATA BYTE IN 'A'
0353   0142             ;        CALL THXB		;TYPE IN HEX
0354   0142             ;        ... 		;RETURN HERE WITH ALL REGS PRESERVED
0355   0142             ;
0356   0142             
0357   0142 F5          THXB:	PUSH 	PSW	;SAVE A,PSB
0358   0143 0F          	RRC		;SHIFT
0359   0144 0F          	RRC		; TO
0360   0145 0F          	RRC		;  LEFT
0361   0146 0F          	RRC		;   NIBBLE
0362   0147 CD 4F 01    	CALL 	THXN	;TYPE HEX NIBBLE
0363   014A F1          	POP 	PSW	;RESTORE DATA
0364   014B CD 4F 01    	CALL 	THXN	;TYPE RIGHT NIBBLE
0365   014E C9          	RET		; AND EXIT
0366   014F             
0367   014F             ; ROUTINE TO TYPE ONE ASCII CHARACTER REPRESENTING
0368   014F             ; BITS 3-0 OF 'A' IN HEX
0369   014F             ;
0370   014F             ; CALLING SEQUENCE ...
0371   014F             ;
0372   014F             ;        LDA  DATA		;DATA NIBBLE IN BITS 3-0
0373   014F             ;        CALL THXN		;TYPE NIBBLE IN HEX 
0374   014F             ;        ... 		;RETURN HERE WITH ALL REGS PRESERVED
0375   014F             ;			; AND CONTENTS OF 'A' BITS ARE NOT
0376   014F             ;			; SIGNIFNCANT AND IGNORED
0377   014F             ;
0378   014F             
0379   014F F5          THXN:	PUSH 	PSW	;SAVE PSW
0380   0150 E6 0F       	ANI 	0FH	;ISOLATE NIBBLE B3=>B0
0381   0152 FE 0A       	CPI 	10	;SEE IF > 9
0382   0154 DA 59 01    	JC 	$+5	;NIBBLE <= 9
0383   0157 C6 07       	ADI 	7	;ADJUST ALPHA CHARACTER
0384   0159 C6 30       	ADI 	'0'	; ADD IN ASCII 0
0385   015B CD 56 05    	CALL 	TYPE	; AND TYPE THE NIBBLE
0386   015E F1          	POP 	PSW	;RESTORE PSW
0387   015F C9          	RET		; AND RETURN
0388   0160             
0389   0160             ;
0390   0160             ; ROUTINE TO TYPE A WORD IN HEX
0391   0160             ;
0392   0160             ; CALLING SEQUENCE ...
0393   0160             ;
0394   0160             ;        LHLD WORD		;WORD IN HL
0395   0160             ;        CALL THXW		;TYPE IT IN HEX 
0396   0160             ;        ... 		;RETURN HERE WITH ALL REGS PRESERVED
0397   0160             ;
0398   0160             
0399   0160 F5          THXW:	PUSH	PSW	;SAVE PSW
0400   0161 7C          	MOV 	A,H	;GET HIGH BYTE
0401   0162 CD 42 01    	CALL 	THXB	; AND TYPE IT
0402   0165 7D          	MOV 	A,L	;GET LOW BYTE
0403   0166 CD 42 01    	CALL 	THXB	; AND TYPE IT
0404   0169 F1          	POP 	PSW	;RESTORE PSW
0405   016A C9          	RET		; AND RETURN
0406   016B             
0407   016B             ;
0408   016B             ; ROUTINE TO GET ONE HEX CHARACTER FROM TTY
0409   016B             ;
0410   016B             ; CALLING SEQUENCE ...
0411   016B             ;
0412   016B             ;        CALL GHXN		;GET HEX NIBBLE 
0413   016B             ;        JC   NONHX		;CY SET IF NON-HEX 
0414   016B             ;        ... 		;HEX NIBBLE IN 'A'
0415   016B             ;
0416   016B             ; IF THE CHARACTER ENTERED IS 0 TO 9 OR A TO F
0417   016B             ;  'A' WILL BE SET TO THE BINARY VALUE 0 TO 15
0418   016B             ;  THE CARRY WILL BE RESET.
0419   016B             ;
0420   016B             ; IF THE CHARACTER ENTERED IS NOT A VALID HEX 
0421   016B             ;   THEN THE 'A' REGISTER WILL CONTAIN THE ??
0422   016B             ;   AND THE CARRY WILL BE SET TO A 1.
0423   016B             ;
0424   016B             ; ALL REGISTERS EXCEPT PSW PRESERVED
0425   016B             ;
0426   016B             
0427   016B CD 05 01    GHXN:	CALL	CHINN	;GET CHARACTER IN 
0428   016E             			;(CHINN IN CASE NOT ??
0429   016E FE 30       	CPI 	'0'	;RETURN IF
0430   0170 D8          	RC		; < '0' 
0431   0171 FE 3A       	CPI 	':'	;SEE IF NUMERIC
0432   0173 DA 7F 01    	JC 	GHX1	;CHAR IS 0 TO 9
0433   0176 FE 41       	CPI	'A'	;SEE IF A TO F
0434   0178 D8          	RC		;CHAR ':' TO ' '
0435   0179 FE 47       	CPI 	'G'	;SEE IF > 'F' 
0436   017B 3F          	CMC		;INVERT CY SENSE
0437   017C D8          	RC		;CHAR > 'F'
0438   017D D6 07       	SUI 	7	;CHAR IS A TO F SO 
0439   017F D6 30       GHX1:	SUI	'0'	;ADJUST TO BINARY
0440   0181 C9          	RET		; AND EXIT
0441   0182             
0442   0182             ;
0443   0182             ; ROUTINE TO GET ONE HEX BYTE FROM TTY1
0444   0182             ;
0445   0182             ; CALLING SEQUENCE ...
0446   0182             ;
0447   0182             ;        CALL GHXB		;GET HEX BYTE
0448   0182             ;        JC   NONHX		;SAME AS GHXN NON-HEX 
0449   0182             ;        ... 		;HEX BYTE IN 'A'
0450   0182             ;
0451   0182             ; ALL REGS EXCEPT PSW PRESERVED, CY SET AS NEEDED
0452   0182             ;
0453   0182             
0454   0182 CD 6B 01    GHXB:	CALL	GHXN	;GET LEFT NIBBLE
0455   0185 D8          	RC		;LEAVE IF NON-HEX
0456   0186 C5          	PUSH 	B	;SAVE BC 
0457   0187 07          	RLC		; SHIFT
0458   0188 07          	RLC		;  TO
0459   0189 07          	RLC		;   LEFT
0460   018A 07          	RLC		;    NIBBLE
0461   018B 47          	MOV 	B,A	;AND SAVE IN B
0462   018C CD 6B 01    	CALL 	GHXN	;GET RIGHT NIBBLE
0463   018F DA 93 01    	JC 	$+4	;JMP IF NON-HEX 
0464   0192 80          	ADD 	B	;ADD IN LEFT NIBBLE 
0465   0193 C1          	POP 	B	;RESTORE BC 
0466   0194 C9          	RET		;AND EXIT
0467   0195             
0468   0195             ;
0469   0195             ; ROUTINE TO GET A HEX WORD FROM TTY1
0470   0195             ;
0471   0195             ; CALLING SEQUENCE ...
0472   0195             ;
0473   0195             ;        CALL GHXW		;GET HEX WORD TO HL 
0474   0195             ;        JC   NONHX		;NON-HEX IF CY SET 
0475   0195             ;        ... 		;OK, WORD IN HL
0476   0195             ;
0477   0195             ; IF INPUT VALUE IS VALID HEX THEN VALUE WILL BE IN HL
0478   0195             ;   WITH ALL OTHER REGISTERS PRESERVED AND CY RST
0479   0195             ;
0480   0195             ; IF INPUT IS INVALID, HL WILL BE PARTIALLY MODIFIED
0481   0195             ;   AND CY WILL BE SET AND 'A' WILL HAVE THE
0482   0195             ;   ILLEGAL NON-HEX CHARACTER
0483   0195             ;
0484   0195             
0485   0195 37          GHXW:	STC		;SET AND
0486   0196 3F          	CMC		; CLEAR CY
0487   0197 F5          	PUSH 	PSW	;SAVE STATUS
0488   0198 CD 82 01    	CALL 	GHXB	;GET HIGH HEX BYTE
0489   019B 67          	MOV 	H,A	; AND SET TO H
0490   019C D2 A3 01    	JNC 	GHX2	;JMP IF VALID
0491   019F F1          	POP 	PSW	;RESTORE STATUS
0492   01A0 7C          	MOV 	A,H	;SET A TO BAD CHARACTER
0493   01A1 37          	STC		;SET CY
0494   01A2 C9          	RET		; AND EXIT
0495   01A3             
0496   01A3 CD 82 01    GHX2:	CALL 	GHXB	;GET LOW HEX BYTE
0497   01A6 6F          	MOV 	L,A	; AND SET TO L
0498   01A7 D2 AE 01    	JNC 	GHX3	;JMP IF VALID
0499   01AA F1          	POP 	PSW	;INVALID. RESTORE STATUS
0500   01AB 7D          	MOV 	A,L	;SET A TO BAD CHAR
0501   01AC 37          	STC		; SET CARRY
0502   01AD C9          	RET		;  AND RETURN
0503   01AE             
0504   01AE F1          GHX3:	POP	PSW	;ALL OK
0505   01AF C9          	RET		; SO RET WITH HL SET TO WORD
0506   01B0             
0507   01B0             ;
0508   01B0             ; ROUTINE TO STORE A BYTE IN MEMORY WITH READ-BACK CHK
0509   01B0             ;
0510   01B0             ; CALLING SEQUENCE ...
0511   01B0             ;
0512   01B0             ;        ...		;ADDRESS IN HL
0513   01B0             ;        ...		;DATA IN 'A'
0514   01B0             ;        CALL STORE		;STORE THE BYTE 
0515   01B0             ;        ... 		;RETURN HERE IF OK. ALL REGS PRESERVED
0516   01B0             ;
0517   01B0             ; IF READ-BACK CHECK FAILS, AN APPROPRIATE ERROR
0518   01B0             ; MESSAGE WILL BE TYPED AND CONTROL RETURNED TO
0519   01B0             ; THE MONITOR.
0520   01B0             ;
0521   01B0             
0522   01B0 77          STORE:	MOV 	M,A	;STORE THE BYTE
0523   01B1 BE          	CMP 	M	;READ-BACK CHECK
0524   01B2 C8          	RZ		;LEAVE IF OK
0525   01B3 E5          	PUSH	H	;ERROR, SAVE VECTOR
0526   01B4 21 11 05    	LXI 	H,M4	;TYPE ERROR
0527   01B7 CD 1B 01    	CALL 	MSG	; MESSAGE
0528   01BA E1          	POP 	H	;RESTORE VECTOR
0529   01BB CD 60 01    	CALL 	THXW	; AND TYPE ADDRESS
0530   01BE C3 A0 00    	JMP 	NEXT	;AND RETURN TO EXEC
0531   01C1             
0532   01C1             ;
0533   01C1             ; MEMORY EXAMINE/MODIFY ROUTINES
0534   01C1             ;
0535   01C1             ; THE FOLLOWING ROUTINES HANDLE MEMORY EXAMINES
0536   01C1             ; AND MODIFIES. THE ADDRESS OF THE MEMORY LOCATION
0537   01C1             ; CURRENTLY BEING ACCESSED IS IN 'ADR'. TO INITIALIZE
0538   01C1             ; 'ADR', THE MONITOR COMMAND 'A' IS USED.
0539   01C1             ;
0540   01C1             ;	** A	1234
0541   01C1             ;
0542   01C1             ; WILL SET THE 'ADR' TO THE VALUE 1234 (HEX)
0543   01C1             ;
0544   01C1             ; THE ROUTINE WILL THEM RETURN THE CARRIAGE.
0545   01C1             ; TYPE VALUE OF 'ADR' AND IT'S CONTENTS IN HEX.
0546   01C1             ; AND WAIT FOR ONE OF THE FOLLOWING INPUTS:
0547   01C1             ;
0548   01C1             ;	A VALID HEX BYTE TO REPLACE THE VALUE TYPED
0549   01C1             ;	 IN WHICH CASE THE ROUTINE WILL
0550   01C1             ;	'STORE' THE BYTE. INCREMENT 'ADR', AND
0551   01C1             ;	 Do THE NEXT ADDRESS.
0552   01C1             ;
0553   01C1             ;	A LINE-FEED WILL CAUSE THE NEXT ADDRWSS TO BE
0554   01C1             ;	 ACCESSED WITH-OUT MODIFYING THE CURRENT ONE
0555   01C1             ;
0556   01C1             ;	A CARRIAGE-RETURN WILL RETURN CONTROL TO THE
0557   01C1             ;	 KONITOR.
0558   01C1             ;
0559   01C1             ;	A MINUS SIGN WILL CAUSE THE 'ADR' TO BE
0560   01C1             ;	 DECREMENTED BY ONE.
0561   01C1             ;
0562   01C1             ;  THE LF AND '-' MAY BE ENTERED AS A
0563   01C1             ; MONITOR COMMAND ALSO AND WILL PERFORM THE SAME
0564   01C1             ; FUNCTION.
0565   01C1             ;
0566   01C1             ;  IN ADDITION, THE COMMAND '.' FROM THE
0567   01C1             ; MONITOR WILL CAUSE THE CONTENTS OF THE CURRENT
0568   01C1             ; 'ADR' TO BE TYPED AS IF THE COMMAND 'A' WITH
0569   01C1             ; 'ADR' HAD BEEN ENTERED.
0570   01C1             
0571   01C1             GETAD:			;FROM COMMAND 'A'
0572   01C1 CD 3A 01    	CALL	SPACE	;TYPE A SPACE
0573   01C4 CD 95 01    	CALL	GHXW	; AND GET 'ADR'
0574   01C7 D2 D0 01    	JNC 	GTA1	;JMP IF VALID
0575   01CA             
0576   01CA 21 0D 05    ILLCH:	LXI 	H,M3	;ILLEGAL INPUT
0577   01CD C3 C3 00    	JMP 	ILLEG+3	; MESSAGE AND BACK TO
0578   01D0             			;   MONITOR.
0579   01D0 22 1C 0C    GTA1:	SHLD 	ADR	;SAVE 'ADR'
0580   01D3             
0581   01D3             LOCAT:			; FROM COMMAND '.' ALSO
0582   01D3 CD 2D 01    	CALL 	CRET	;RETURN CARRIAGE
0583   01D6 2A 1C 0C    	LHLD 	ADR	;FETCH 'ADDR'
0584   01D9 CD 60 01    	CALL 	THXW	; AND PRINT IT
0585   01DC CD 3A 01    	CALL 	SPACE	;SPACE
0586   01DF 7E          	MOV 	A,M	;FETCH CONTENTS
0587   01E0 CD 42 01    	CALL 	THXB	; AND TYPE
0588   01E3 CD 3A 01    	CALL 	SPACE	;SPACE
0589   01E6 CD 82 01    	CALL 	GHXB	; AND GET DATA OR COMMAND
0590   01E9 DA FD 01    	JC 	NONHX	;NON-HEX INPUT
0591   01EC CD B0 01    	CALL 	STORE	;STORE THE NEW VALUE
0592   01EF 7E          	MOV	A,M	; AND
0593   01F0 CD 3A 01    	CALL	SPACE	;  ECHO
0594   01F3 CD 42 01    	CALL	THXB	;   VALUE
0595   01F6             
0596   01F6             NXLOC:			;FROM COMMAND 'LF' ALSO
0597   01F6 2A 1C 0C    	LHLD 	ADR	;ACCESS
0598   01F9 23          	INX 	H	; NEXT
0599   01FA C3 D0 01    	JMP 	GTA1	;AND CONTINUE
0600   01FD             
0601   01FD FE 0D       NONHX:	CPI 	CR	;IF CR
0602   01FF CA A0 00    	JZ 	NEXT	; RETURN TO MONITOR
0603   0202 FE 0A       	CPI 	LF	;IF LF
0604   0204 CA F6 01    	JZ 	NXLOC	; ACCESS NEXT 'ADR'
0605   0207 FE 2D       	CPI 	'-'	;IF - ACCESS LAST
0606   0209 C2 CA 01    	JNZ 	ILLCH	;NOT CR, LF, OR - SO ILLEGAL
0607   020C             
0608   020C             LSTLC:			;FROM COMMAND '-' ALSO
0609   020C 2A 1C 0C    	LHLD 	ADR	;DECREMENT 
0610   020F 2B          	DCX 	H	; 'ADR'
0611   0210 C3 D0 01    	JMP 	GTA1	;AND CONTINUE
0612   0213             
0613   0213             
0614   0213             ;
0615   0213             ; ROUTINE TO NEGATE THE DE REGISTER
0616   0213             ;
0617   0213             ; CALLING SEQUENCE...
0618   0213             ;
0619   0213             ;	...		;VALUE IN DE
0620   0213             ;	CALL	NEGDE	;NEGATE DE
0621   0213             ;	...		;RETURN HERE WITH DE = -DE
0622   0213             ;
0623   0213             
0624   0213 F5          NEGDE:	PUSH 	PSW	;SAVE PSW
0625   0214 7A          	MOV 	A,D	;FETCH D
0626   0215 2F          	CMA		;COMPLEMENT
0627   0216 57          	MOV 	D,A	;AND RESTORE
0628   0217 7B          	MOV 	A,E	;FETCH E
0629   0218 2F          	CMA		; COMPLEMENT
0630   0219 5F          	MOV 	E,A	;  AND RESTORE
0631   021A 13          	INX 	D	;ADD ONE TO D
0632   021B F1          	POP 	PSW	;RESTORE PSW
0633   021C C9          	RET		;AND EXIT
0634   021D             
0635   021D             ;
0636   021D             ; ROUTINE TO DUMP A BLOCK OF MEMORY TO TTY
0637   021D             ;
0638   021D             ;    THIS ROUTINE WILL DUMP A BLOCK OF MEMORY
0639   021D             ; ON THE TTY, 16 BYTES PER LINE WITH THE ADDRESS
0640   021D             ; AT THE START OF EACH LINE.
0641   021D             ;
0642   021D             ; THE FOLLOWING MONITOR COMMAND IS USED:
0643   021D             ;
0644   021D             ;	** D XXXX YYYY
0645   021D             ;
0646   021D             ; WILL CAUSE THE CONTENTS OF MEMORY LOCATIONS
0647   021D             ; XXXX TO YYYY TO BE PRINTED. XXXX AND YYYY MUST
0648   021D             ; BOTH BE VALID FOUR DIGIT HEX ADDRESSES AND IF
0649   021D             ; XXXX >= YYYY ONLY LOCATION XXXX WILL BE PRINTED.
0650   021D             ;
0651   021D             ; AFTER THE FIRST LINE, ALL LINES WILL START WITH AN
0652   021D             ; ADDRESS THAT IS AN EVEN MULTIPLE OF 16.
0653   021D             ;
0654   021D             ;
0655   021D             
0656   021D             
0657   021D             DUMP:			;FROM COMMAND 'D'
0658   021D CD 95 03    	CALL  	PU3	;GET HEX ADDRESS
0659   0220 CD 95 03    	CALL  	PU3	;GET ANOTHER
0660   0223             
0661   0223             ;
0662   0223             ; FROM ADDRESS IN HL, TO ADDRESS IN DE
0663   0223             ;
0664   0223 CD 13 02    	CALL  	NEGDE	;NEGATE DE FOR END CHECK
0665   0226             
0666   0226 CD 2D 01    DMRET:	CALL  	CRET	;RETURN CARRIAGE
0667   0229 CD 60 01    	CALL	THXW	;TYPE VECTOR ADDRESS
0668   022C CD 3A 01    	CALL	SPACE
0669   022F CD 3A 01    DMNXT:	CALL 	SPACE	;SPACE
0670   0232 7E          	MOV 	A,M	;GET DATA
0671   0233 CD 42 01    	CALL 	THXB	; AND DISPLAY
0672   0236 CD A4 02    	CALL 	LAST	;CHECK FOR ALL DONE
0673   0239 7D          	MOV 	A,L	;CHECK FOR MOD 16
0674   023A E6 0F       	ANI 	15	; ADDRESS
0675   023C CA 26 02    	JZ 	DMRET	;NEW LINE IF MOD 16
0676   023F C3 2F 02    	JMP 	DMNXT	; CONTINUE IF NOT
0677   0242             
0678   0242             ;
0679   0242             ;   JUMP - ROUTINE TO TRANSFER CONTROL
0680   0242             ;
0681   0242             ;    THIS ROUTINE WILL ACCEPT AN ADDRESS FROM TTY
0682   0242             ; AND THEN RESTORE ALL REGISTERS TO THE STATE AS
0683   0242             ; SAVED IN RAM ON ENTRY TO THE MONITOR AND TRANSFER
0684   0242             ; CONTROL TO THE ADDRESS ENTERED.
0685   0242             ;
0686   0242             ;	** J 1234
0687   0242             ;
0688   0242             ; JUMP TO LOCATION 1234H
0689   0242             ;
0690   0242             ;   IN ADDITION TWO OTHER MODES ARE POSSIBLE.
0691   0242             ;
0692   0242             ; THE COMMAND
0693   0242             ;	** J (CR)
0694   0242             ;
0695   0242             ;  WILL CAUSE THE ADDRESS SAVED AS A RESULT OF
0696   0242             ; A RST 0 TO BE USED FOR THE EXECUTION ADDRESS.
0697   0242             ; INSERTING A RST 0 IN A PROGRAM AS A BREAKPOINT
0698   0242             ; WILL CAUSE THE ENTIRE MACHINE STATE TO BE SAVED
0699   0242             ; AND THE J (CH) WILL RETURN YOU TO THE POINT AFTER
0700   0242             ; THE RST 0
0701   0242             ;    OF COURSE, IF THE RST 0 REPLACED PART OF AN
0702   0242             ; INSTRUCTION YOU MUST REPLACE THE RST 0 AND
0703   0242             ; MODIFY THE ADDRESS WITH 'RP=' SO THAT YOU WILL GET
0704   0242             ; BACK INTO THE PROGRAM AT THE PROPER PLACE.
0705   0242             ;
0706   0242             ;  ALSO
0707   0242             ;
0708   0242             ;  THE COMMAND
0709   0242             ;	** J (LF)
0710   0242             ;
0711   0242             ;    WILL CAUSE THE ADDRESS ENTERED WITH THE 'X'
0712   0242             ; COMMAND TO BE USED AS IF IT WERE TYPED IN.
0713   0242             ;
0714   0242             ;    THE CARRIAGE RETURN AND LINE FEED RESPONSES WILL
0715   0242             ; CAUSE THE ADDRESS TO BE TYPED FOR VERIFICATION AND
0716   0242             ; AFTER THE ADDRESS THE 'OK?' PROMPT WILL REQUIRE A
0717   0242             ; SPACE REPLY FOR EXECUTION TO PROCEED. OTHERWISE
0718   0242             ; THE OPERATION WILL BE ABORTED.
0719   0242             ;
0720   0242             ;
0721   0242             
0722   0242             JUMP:			;COMMAND 'J'
0723   0242 CD 3A 01    	CALL	SPACE	;SPACE
0724   0245 CD 95 01    	CALL 	GHXW	;GET ADDRESS
0725   0248 D2 61 02    	JNC 	JMP3	;HEX ADDRESS ENTERED
0726   024B FE 0D       	CPI 	CR	;SEE IF CR RESPONSE
0727   024D C2 56 02    	JNZ 	JMP1	; NO. GO CHECK FOR LF
0728   0250 2A 0E 0C    	LHLD 	SVPC	;GET SAVED PC VALUE
0729   0253 C3 5E 02    	JMP 	JMP2	; AND SO PROCESS
0730   0256 FE 0A       JMP1:	CPI 	LF	;CHECK FOR LF RESPONSE
0731   0258 C2 CA 01    	JNZ 	ILLCH	; ALL OTHERS ILLEGAL
0732   025B 2A 20 0C    	LHLD 	XEQAD	;GET XEQ ADDRESS FROM 'X'
0733   025E CD 60 01    JMP2:	CALL 	THXW	;TYPE ADDRESS
0734   0261 CD 8E 02    JMP3:	CALL 	OKK	;OK?
0735   0264 22 1F 0C    	SHLD	GOGO+1	;SET UP FINAL JUMP
0736   0267 3E C3       	MVI 	A,0C3H	;JMP COMMAND
0737   0269 32 1E 0C    	STA 	GOGO	; TO RAM
0738   026C 31 14 0C    	LXI 	SP,SVE	;RESTORE REGS
0739   026F D1          	POP	D	; TO
0740   0270 C1          	POP	B 	;  VALUES
0741   0271 F1          	POP 	PSW	;   IN RAM
0742   0272 2A 10 0C    	LHLD 	SVSP	;SAVED SP
0743   0275 F9          	SPHL		;SET NEW SP
0744   0276 2A 12 0C    	LHLD 	SVHL	;AND HL
0745   0279 C3 1E 0C    	JMP 	GOGO	; AND EXECUTE
0746   027C             
0747   027C             ;
0748   027C             ; CONSIAND 'G' - DIRECT GOTO ADDRESS
0749   027C             ;
0750   027C CD 95 03    GOTO:	CALL	PU3	;GET HEX ADDRESS
0751   027F EB          	XCHG		; TO HL
0752   0280 CD 8E 02    	CALL 	OKK	;VFY
0753   0283 E9          	PCHL		; THEN JMP ADR
0754   0284             
0755   0284             ;
0756   0284             ; COKKAND 'X' - SET EXECUTION ADDRESS FOR 'J'
0757   0284             ;
0758   0284 CD 95 03    GETXA:	CALL 	PU3	;GET HEX ADDRESS
0759   0287 EB          	XCHG		;TO HL
0760   0288 22 20 0C    	SHLD 	XEQAD	;SAVE IT
0761   028B C3 A0 00    	JMP 	NEXT	; AND BACK TO NEXT
0762   028E             
0763   028E             ;
0764   028E             ; OKK - ROUTINE TO VERIFY OPERATION
0765   028E             ;
0766   028E             ; CALLING SEQUENCE...
0767   028E             ;
0768   028E             ;	CALL OKK		;VERIFY
0769   028E             ;	...		;RETURN HERE IF SPACE
0770   028E             ;			;ABORT IF NOT
0771   028E             ;
0772   028E             ; ALL REGISTERS PRESERVED
0773   028E             ;
0774   028E             
0775   028E F5          OKK:	PUSH 	PSW	;SAVE PSW
0776   028F E5          	PUSH 	H	; AND HL
0777   0290 21 45 05    	LXI 	H,M7	;ADR OF 'OK?' MSG
0778   0293 CD 1B 01    	CALL 	MSG	;PRINT IT
0779   0296 21 4C 05    	LXI 	H,M8	;POSSIBLE ABORT
0780   0299 CD 00 01    	CALL 	CHIN	;GET ANSWER
0781   029C FE 20       	CPI 	' '	; SPACE?
0782   029E C2 C3 00    	JNZ 	ILLEG+3	;NO, GO ABORT
0783   02A1 E1          	POP 	H	;RESTORL HL
0784   02A2 F1          	POP 	PSW	; AND PSW
0785   02A3 C9          	RET		;  AND LEAVE
0786   02A4             
0787   02A4             ;
0788   02A4             ; ROUTINE TO CHECK FOR LAST OPERATION IN
0789   02A4             ; DUMP, FILL, MOVE, ETC.
0790   02A4             ;
0791   02A4 E5          LAST:	PUSH	H 	;SAVE MEM VECTOR
0792   02A5 19          	DAD 	D	;  ADD NEGATIVE END ADDRESS
0793   02A6 DA A0 00    	JC 	NEXT	;DONE IF CARRY
0794   02A9 E1          	POP 	H	;RESTORE VECTOR
0795   02AA 23          	INX 	H	;BUMP AND
0796   02AB C9          	RET		; EXIT
0797   02AC             
0798   02AC             ;
0799   02AC             ; COMMAND 'M' - MOVE MEMORY BLOCK
0800   02AC             ;
0801   02AC             ; FORMAT
0802   02AC             ;	** M XXXX YYYY ZZZZ  OK?
0803   02AC             ;
0804   02AC             ;     WILL MOVE THE BLOCK OF MEMORY STARTING AT
0805   02AC             ; XXXX AND ENDING AT AND INCLUDING YYYY	TO TKE
0806   02AC             ; BLOCK STARTING AT ZZZZ.
0807   02AC             ;
0808   02AC             ;
0809   02AC             ; ***** THE FOLLOWING RESTRICTIONS APPLY! *****
0810   02AC             ;
0811   02AC             ;  EITHER	ZZZZ <= XXXX
0812   02AC             ;
0813   02AC             ;   OR	ZZZZ > YYYY
0814   02AC             ;
0815   02AC             ;   THE ROUTINE MOVES BYTES IN ASCENDING MEMORY ORDER
0816   02AC             ; SO IF THE HEX ADDRESS VALUES DO NOT SATISFY
0817   02AC             ; THE ABOVE RULES, MOVED DATA WILL OVERWRITE DATA TO
0818   02AC             ; BE MOVED.
0819   02AC             ;
0820   02AC             
0821   02AC CD 95 03    MOVE:	CALL 	PU3	;GET XXXX
0822   02AF D5          	PUSH 	D	;SAVE ON STACK
0823   02B0 CD 95 03    	CALL 	PU3	;GET YYYY TO DE
0824   02B3 CD 95 03    	CALL 	PU3	;GET ZZZZ TO DE, YYYY TO HL
0825   02B6 EB          	XCHG		;DE=Y, HL=Z, TOP=X
0826   02B7 E3          	XTHL		;DE=Y, TOP=Z, HL=X
0827   02B8 CD 13 02    	CALL 	NEGDE	;DE=-Y, TOP=Z, HL=X
0828   02BB CD 8E 02    	CALL 	OKK
0829   02BE 7E          MOV1:	MOV 	A,M	;GET THRU X
0830   02BF E3          	XTHL		;HL=Z, TOP=X
0831   02C0 CD B0 01    	CALL 	STORE	;CHECKED STORE
0832   02C3 23          	INX 	H	;BUMP Z
0833   02C4 E3          	XTHL		;RESTORE
0834   02C5 CD A4 02    	CALL 	LAST	;CHECK FOR END
0835   02C8 C3 BE 02    	JMP 	MOV1	; AND CONTINUE
0836   02CB             
0837   02CB             ;
0838   02CB             ; COMMAND 'F' - FILL A BLOCK OF MEMORY WITH VALUE
0839   02CB             ;
0840   02CB             ;  FORMAT
0841   02CB             ;
0842   02CB             ;	** F XXXX YYYY VV OK?
0843   02CB             ;
0844   02CB             ;    WILL CAUSE MEMORY LOCATIONS XXXX THRU YYYY
0845   02CB             ; INCLUSIVE TO BE SET TO THE VALUE VV (HEX).
0846   02CB             ;
0847   02CB             
0848   02CB CD 95 03    FILL:	CALL 	PU3	;DE=X
0849   02CE CD 95 03    	CALL 	PU3	;DE=Y, HL=X
0850   02D1 CD 13 02    	CALL 	NEGDE	;DE=-Y
0851   02D4 CD 3A 01    	CALL 	SPACE
0852   02D7 CD 82 01    	CALL 	GHXB	;GET VV -> 'A'
0853   02DA DA CA 01    	JC	ILLCH	;MUST BE VALID HEX
0854   02DD CD 8E 02    	CALL 	OKK
0855   02E0 CD B0 01    FILL1:	CALL 	STORE	;STUFF IT
0856   02E3 CD A4 02    	CALL 	LAST	; CHECK IT
0857   02E6 C3 E0 02    	JMP 	FILL1	;  AND CONTINUE IT
0858   02E9             
0859   02E9             ;
0860   02E9             ; REGISTER EXAMINE/MODIFY ROUTINE
0861   02E9             ;
0862   02E9             ;  THE MONITOR COMMAND 'R' FOLLOWED BY A SINGLE
0863   02E9             ; CHARACTER WILL CAUSE THE ENTRY SAVED
0864   02E9             ; CONTENTS OF THAT REGISTER TO BE PRINTED AND A
0865   02E9             ; MODIFICATION ACCEPTED. IF THE 'R' IS FOLLOWED BY
0866   02E9             ; A CR THEN ALL OF THE REGISTERS WILL BE PRINTED.
0867   02E9             ;
0868   02E9             ; RA - ACC
0869   02E9             ; RF - FLAGS, PSB
0870   02E9             ; RB - B
0871   02E9             ; RC - C
0872   02E9             ; RD - D
0873   02E9             ; RE - I
0874   02E9             ; RH - H
0875   02E9             ; RL - L
0876   02E9             ; RS - SP
0877   02E9             ; RP - PROGRAM COUNTER IF MONITOR 'CALLED'
0878   02E9             ;
0879   02E9             ; R(CR) - PRINT ALL REGISTERS
0880   02E9             ;
0881   02E9             ; REGISTERS S AND P WILL BE PRINTED AS 4 HEX DIGITS
0882   02E9             ; AND MODIFICATIONS TO THEM MUST BE 4 DIGITS ALSO.
0883   02E9             ;
0884   02E9             
0885   02E9 414642434445RXLST:	.DB "AFBCDEHL",0	;REGISTER LIST
0885   02EF 484C00
0886   02F2             
0887   02F2             REGEX:			; FROM COMMAND 'R'
0888   02F2 CD 00 01    	CALL 	CHIN	;GET REGISTER TO
0889   02F5 FE 0D       	CPI 	CR	;CHECK FOR CR
0890   02F7 CA 62 03    	JZ 	REXAL	;DO ALL IF CR
0891   02FA F5          	PUSH 	PSW	;SAVE ID
0892   02FB 3E 3D       	MVI 	A,'='	;TYPE
0893   02FD CD 56 05    	CALL 	TYPE	; =
0894   0300 F1          	POP 	PSW	;RESTORE ID
0895   0301 11 0E 0C    	LXI 	D,SVPC	;ADDRESS OF PC
0896   0304 FE 50       	CPI 	'P'	;SEE IF
0897   0306 CA 3E 03    	JZ 	RX2	;PRINT PC
0898   0309 13          	INX 	D	;POINT TO
0899   030A 13          	INX 	D	; SP
0900   030B FE 53       	CPI 	'S'	;CHECK S
0901   030D CA 3E 03    	JZ 	RX2	; DO SP
0902   0310 47          	MOV 	B,A	;SAVE ID
0903   0311 21 E9 02    	LXI 	H,RXLST	;LIST VECTOR
0904   0314 11 19 0C    	LXI 	D,SVA	;ADDRESS OF 'A' STORAGE
0905   0317 7E          RX0:	MOV 	A,M	;GET TABLE ID
0906   0318 A7          	ANA 	A	;CHECK FOR END
0907   0319 CA CA 01    	JZ 	ILLCH	;NOT IN TABLE
0908   031C             
0909   031C B8          	CMP 	B	;CHECK INPUT ID
0910   031D CA 25 03    	JZ 	RX1	;FOUND IT
0911   0320 23          	INX 	H	;NEXT TBL
0912   0321 1B          	DCX 	D	;NEXT REG
0913   0322 C3 17 03    	JMP 	RX0	;CONTINUE
0914   0325             
0915   0325 1A          RX1:	LDAX 	D	;GET THE RGE
0916   0326 CD 42 01    	CALL 	THXB	; AND PRINT IT
0917   0329 CD 3A 01    	CALL 	SPACE	;SPACE
0918   032C CD 82 01    	CALL 	GHXB	;AND WAIT FOR REQUEST
0919   032F DA 36 03    	JC 	RX1A	;NON-HEX SO SEE IF CH
0920   0332 12          	STAX 	D	;STORE INPUT IN RG
0921   0333 C3 A0 00    	JMP 	NEXT	;AND BACK TO MONITOR
0922   0336 FE 0D       RX1A:	CPI 	CR	;CR OK
0923   0338 CA A0 00    	JZ 	NEXT	;BACX TO MON
0924   033B C3 CA 01    	JMP 	ILLCH	;OTHERS ILLEGAL
0925   033E             
0926   033E EB          RX2:	XCHG		;RD ADR TO XL
0927   033F 5E          	MOV	E,M	;GET LOW S OR P
0928   0340 23          	INX 	H	;BUMP VECTOR
0929   0341 56          	MOV 	D,M	;GET HIGH S OR P
0930   0342 EB          	XCHG		;RG VAL TO HL
0931   0343 CD 60 01    	CALL 	THXW	;TYPE WORD
0932   0346 CD 3A 01    	CALL 	SPACE	;SPACE
0933   0349 CD 95 01    	CALL 	GHXW	;AND GET REQUEST
0934   034C DA 36 03    	JC 	RX1A	;IF NON-HEX
0935   034F EB          	XCHG		;RESTORE RAM VECTOR FOR RG
0936   0350 72          	MOV 	M,D	;STORE HIGH S OR P
0937   0351 2B          	DCX 	H	;BUMP VECTOR DOWN
0938   0352 73          	MOV 	M,E	;STORE LOW S OR P
0939   0353 C3 A0 00    	JMP 	NEXT	;BACK TO MON
0940   0356             
0941   0356 CD 3A 01    RXTSE:	CALL 	SPACE	;SPACE
0942   0359 CD 56 05    	CALL 	TYPE	; TYPE ID
0943   035C 3E 3D       	MVI 	A,'='	;  THEN
0944   035E CD 56 05    	CALL 	TYPE	;   =
0945   0361 C9          	RET		; AND RETURN
0946   0362             
0947   0362             
0948   0362 CD 2D 01    REXAL:	CALL	CRET	;RETURN CARRIAGE FOR ALL REGS
0949   0365 11 19 0C    	LXI 	D,SVA	;ADDRESS OF 'A'
0950   0368 21 E9 02    	LXI 	H,RXLST	;ID LIST
0951   036B 7E          RXA1:	MOV 	A,M	;GET ID
0952   036C A7          	ANA 	A	;CHECK FOR LAST
0953   036D CA 7C 03    	JZ 	RXA2	;DONE SINGLES
0954   0370 CD 56 03    	CALL 	RXTSE	;TYPE SPACE, ID, AND =
0955   0373 1A          	LDAX 	D	;GET REG
0956   0374 1B          	DCX 	D	;DUMP RG PNTR
0957   0375 23          	INX 	H	; AND LIST PNTR
0958   0376 CD 42 01    	CALL	THXB	;TYPE REGISTER
0959   0379 C3 6B 03    	JMP 	RXA1	; AND CONTINUE
0960   037C             
0961   037C 3E 50       RXA2:	MVI 	A,'P'	;DO PC
0962   037E CD 56 03    	CALL	RXTSE	;SP, ID, =
0963   0381 2A 0E 0C    	LHLD	SVPC	;GET PC
0964   0384 CD 60 01    	CALL	THXW	; AND PRINT
0965   0387 3E 53       	MVI	A,'S'	; DO SP
0966   0389 CD 56 03    	CALL	RXTSE	;SP,ID,=
0967   038C 2A 10 0C    	LHLD 	SVSP	;GET SP
0968   038F CD 60 01    	CALL	THXW	;AND PRINT
0969   0392 C3 A0 00    	JMP	NEXT	;BACK TO MON
0970   0395             
0971   0395 CD 3A 01    PU3:	CALL	SPACE	;SPACE
0972   0398 CD 95 01    	CALL	GHXW	;GET HEX WORD
0973   039B DA CA 01    	JC	ILLCH	;IF BAD
0974   039E EB          	XCHG		;SAVE TO DE
0975   039F C9          	RET		;AND RETURN
0976   03A0             
0977   03A0             ;
0978   03A0             ;
0979   03A0             ; ROUTINES TO PUNCH OR LOAD MEMORY ON TTY
0980   03A0             ;
0981   03A0             ; THESE ROUTINES WORK WITH DATA IN THE INTEL
0982   03A0             ; BINARY FORMAT. THE FORMAT CONSISTS OF A RECORD
0983   03A0             ; HEADER, UP TO 16 BYTES OF DATA, AND
0984   03A0             ; A RECORD CHECKSUM.
0985   03A0             ;
0986   03A0             ; RECORD FORMAT
0987   03A0             ;
0988   03A0             ; HEADER CHARACTER ':'
0989   03A0             ; HEX-ASCII BYTE COUNT, TWO CHARACTERS
0990   03A0             ; HEX-ASCII LOAD ADDRESS, FOUR CHARACTERS HHLL
0991   03A0             ; HEX-ASCII RECORD TYPE, TWO CHARACTERS 00 FOR DATA
0992   03A0             ;				01 FOR EOF
0993   03A0             ; DATA BYTES IN HEX-ASCII, TWO CHARACTERS EACH
0994   03A0             ;
0995   03A0             ; HEX-ASCII CHECKSUM, TWO CHARACTERS
0996   03A0             ;
0997   03A0             ; THE CHECKSUM IS CALCULATED SUCH THAT THE
0998   03A0             ; SUM OF ALL OF THE TWO CHARACTER BYTE FIELDS
0999   03A0             ; WILL BE ZERO.
1000   03A0             ;
1001   03A0             ;  THE EOF RECORD MAY CONTAIN AN EXECUTION ADDRESS
1002   03A0             ; IN THE LOAD ADDRESS FIELD. THE LOAD ROUTINE WILL
1003   03A0             ; TRANSFER CONTROL TO THIS ADDRESS AFTER READING THE
1004   03A0             ; TAPE IF THE ADDRESS IS NON-ZERO.
1005   03A0             ;
1006   03A0             
1007   03A0             PUNCH:			;COMMAND 'P'
1008   03A0 CD 95 03    	CALL	PU3	;GET FROM ADDRESS
1009   03A3 CD 95 03    	CALL	PU3	;GET TO ADDRESS
1010   03A6 CD 0C 04    	CALL	PWAIT	;TYPE PROMPT AND WRITE
1011   03A9 3E 11       	MVI	A,XON	;START
1012   03AB CD 56 05    	CALL	TYPE	; THE PUNCH
1013   03AE             ;
1014   03AE             ; HL HAS LOW ADDRESS, DE HAS HIGH ADDRESS
1015   03AE             ;
1016   03AE 7D          PN0:	MOV	A,L
1017   03AF C6 10       	ADI	16
1018   03B1 4F          	MOV	C,A
1019   03B2 7C          	MOV	A,H
1020   03B3 CE 00       	ACI	0
1021   03B5 47          	MOV	B,A
1022   03B6 7B          	MOV	A,E
1023   03B7 91          	SUB	C
1024   03B8 4F          	MOV	C,A
1025   03B9 7A          	MOV	A,D
1026   03BA 98          	SBB	B
1027   03BB DA C3 03    	JC	PN1	;RCD LENGTH	16
1028   03BE 3E 10       	MVI	A,16
1029   03C0 C3 C6 03    	JMP	PN2
1030   03C3 79          PN1	MOV	A,C	;LAST RECORD
1031   03C4 C6 11       	ADI	17
1032   03C6 B7          PN2:	ORA	A
1033   03C7 CA FE 03    	JZ	PDONE
1034   03CA D5          	PUSH	D	;SAVE HIGH
1035   03CB 5F          	MOV	E,A	;E=LENGTH
1036   03CC 16 00       	MVI	D,0	;CLREAR CHECKSUM
1037   03CE CD 2D 01    	CALL	CRET	;PUNCH CR,LF,RBO
1038   03D1 3E 3A       	MVI 	A,':'	;PUNCH HDR
1039   03D3 CD 56 05    	CALL 	TYPE
1040   03D6 7B          	MOV 	A,E
1041   03D7 CD F8 03    	CALL 	PBYTE	;PUNCH LENGTH
1042   03DA 7C          	MOV 	A,H
1043   03DB CD F8 03    	CALL 	PBYTE
1044   03DE 7D          	MOV 	A,L
1045   03DF CD F8 03    	CALL 	PBYTE
1046   03E2 AF          	XRA 	A
1047   03E3 CD F8 03    	CALL 	PBYTE	;PUNCH RECORD TYPE
1048   03E6 7E          PN3:	MOV 	A,M	;GET DATA
1049   03E7 23          	INX 	H
1050   03E8 CD F8 03    	CALL 	PBYTE
1051   03EB 1D          	DCR 	E	;DECR CNT
1052   03EC C2 E6 03    	JNZ 	PN3	;CONTINUE
1053   03EF AF          	XRA 	A	;CALCULATE
1054   03F0 92          	SUB 	D	; CHECKSUM
1055   03F1 CD F8 03    	CALL 	PBYTE	;AND PUNCH IT
1056   03F4 D1          	POP 	D	;RESTORE HIGH ADDRESS
1057   03F5 C3 AE 03    	JMP 	PN0	;AND CONTINUE
1058   03F8             
1059   03F8 CD 42 01    PBYTE:	CALL 	THXB
1060   03FB 82          	ADD 	D	;ADD TO SUM
1061   03FC 57          	MOV 	D,A
1062   03FD C9          	RET
1063   03FE             
1064   03FE CD 2D 01    PDONE:	CALL 	CRET
1065   0401 3E 13       	MVI 	A,XOFF	;PUNCH
1066   0403 CD 56 05    	CALL 	TYPE	; OFF
1067   0406 CD 65 05    	CALL	GETCH	;WAIT FOR GO-AHEAD
1068   0409 C3 A0 00    	JMP 	NEXT	;BACK TO MON
1069   040C             
1070   040C             ;
1071   040C             ; ROUTINE TO TYPE 'PAUSE' MESSAGE
1072   040C             ; AND WAIT FOR TTY1 GO-AHEAD
1073   040C             ;
1074   040C             
1075   040C E5          PWAIT:	PUSH	H	;SAVE H
1076   040D 21 29 05    	LXI 	H,M5	;PROMPT
1077   0410 CD 1B 01    	CALL 	MSG	; MESSAGE
1078   0413 E1          	POP	H
1079   0414 CD 65 05    	CALL	GETCH	;WAIT FOR GO-AHEAD
1080   0417 C9          	RET		; AND THEN LEAVE
1081   0418             
1082   0418             ;
1083   0418             ; ROUTINE TO PUNCH EOF RECORD
1084   0418             ;
1085   0418             
1086   0418 CD 3A 01    PEND:	CALL	SPACE
1087   041B CD 95 01    	CALL	GHXW	;GET ADDRESS OR CR
1088   041E D2 29 04    	JNC	PEND1	; ADDRESS
1089   0421 21 00 00    	LXI	H,0	;SET 0 ADDRESS
1090   0424 FE 0D       	CPI	CR	;CHECK FOR CR REPLY
1091   0426 C2 CA 01    	JNZ	ILLCH	; OTHERS ILLEGAL
1092   0429 CD 0C 04    PEND1:	CALL	PWAIT	;PROMPT PAUSE
1093   042C 3E 11       	MVI	A,XON	;PUNCH
1094   042E CD 56 05    	CALL	TYPE	; ON
1095   0431 CD 2D 01    	CALL	CRET	;CR,LF,RBO
1096   0434 3E 3A       	MVI	A,':'
1097   0436 CD 56 05    	CALL	TYPE	;TYPE HDR :
1098   0439 AF          	XRA	A
1099   043A 57          	MOV	D,A	;ZERO CHECKSUM
1100   043B CD F8 03    	CALL	PBYTE	;AND OUTPUT ZERO LINE
1101   043E 7C          	MOV	A,H
1102   043F CD F8 03    	CALL	PBYTE	;EXECUTION
1103   0442 7D          	MOV	A,L
1104   0443 CD F8 03    	CALL	PBYTE	; ADDRESS
1105   0446 3E 01       	MVI	A,1	;RCD TYPE
1106   0448 CD F8 03    	CALL	PBYTE
1107   044B AF          	XRA	A
1108   044C 92          	SUB	D	;CALCULATE CHECKSUM
1109   044D CD F8 03    	CALL	PBYTE	; AND PUNCH IT
1110   0450             ;
1111   0450             ; PUNCH NULLS
1112   0450             ;
1113   0450             
1114   0450 0E 64       NULLS:	MVI	C,100	; 100 NULLS
1115   0452 AF          	XRA	A
1116   0453 CD 56 05    	CALL	TYPE
1117   0456 0D          	DCR	C
1118   0457 C2 53 04    	JNZ	$-4	;CONTINUE
1119   045A C3 FE 03    	JMP	PDONE	;DONE
1120   045D             
1121   045D             NULL:			; COMMAND 'N'
1122   045D CD 0C 04    	CALL	PWAIT	;PROMPT PAUSE
1123   0460 3E 11       	MVI	A,XON	;PUNCH
1124   0462 CD 56 05    	CALL	TYPE	;  ON
1125   0465 C3 50 04    	JMP	NULLS	;GO DO IT
1126   0468             
1127   0468             ;
1128   0468             ; ROUTINE TO LOAD HEX-ASCII TAPE
1129   0468             ;
1130   0468             LOAD:			;COMMAND 'L'
1131   0468 CD 3A 01    	CALL	SPACE
1132   046B CD 95 01    	CALL	GHXW	;GET bDIAS OR CR
1133   046E D2 79 04    	JNC	LDQ	;BIAS ADRESS ENTERED
1134   0471 21 00 00    	LXI	H,0	;BIAS 0
1135   0474 FE 0D       	CPI	CR	;CHECK FOR CR
1136   0476 C2 CA 01    	JNZ	ILLCH	;OTHERS N.G.
1137   0479 E5          LDQ:	PUSH	H	;SAVE BIAS
1138   047A AF          	XRA	A	;KILL
1139   047B 32 1A 0C    	STA	ECHO	; TTY0 ECHO
1140   047E 3E 12       	MVI	A,TON	;TAPE
1141   0480 CD 56 05    	CALL	TYPE	; ON
1142   0483 E1          LD0:	POP	H	;GET BIAS
1143   0484 E5          	PUSH	H	;AND RESTORE
1144   0485 CD DC 04    	CALL	RIX	;GET INPUT
1145   0488 06 3A       	MVI 	B,':'
1146   048A 90          	SUB	B	;CHECK FOR RCD MARK
1147   048B C2 83 04    	JNZ	LD0
1148   048E 57          	MOV 	D,A	;CLEAR CHECKSUM
1149   048F CD E2 04    	CALL	BYTE	;GET LENGTH
1150   0492 CA CA 04    	JZ	LD2	;ZERO ALL DONE
1151   0495 5F          	MOV	E,A	;SAVE LENGTH
1152   0496 CD E2 04    	CALL	BYTE	;GET HIGH ADDRESS
1153   0499 F5          	PUSH	PSW	; AND SAVE
1154   049A CD E2 04    	CALL	BYTE	;GET LOW ADDRESS
1155   049D C1          	POP 	B	;FETCH MSBYTE
1156   049E 4F          	MOV 	C,A	;BC HAS ADDRESS
1157   049F C5          	PUSH 	B	;SAVE VECT
1158   04A0 E3          	XTHL		; TO HL
1159   04A1 22 22 0C    	SHLD 	BLKAD	;SAVE BLOCK ADDRESS
1160   04A4 E3          	XTHL		; IN CASE OF ERROR
1161   04A5 C1          	POP 	B	;RESTORE
1162   04A6 09          	DAD 	B	;ADD TO BIAS
1163   04A7 CD E2 04    	CALL 	BYTE	;GET TYPE
1164   04AA CD E2 04    LD1:	CALL 	BYTE	;GET DATA
1165   04AD CD B0 01    	CALL 	STORE	;AND STORE IT
1166   04B0 23          	INX	H
1167   04B1 1D          	DCR	E
1168   04B2 C2 AA 04    	JNZ 	LD1	;CONTINUE
1169   04B5 CD E2 04    	CALL 	BYTE	;GET CHECKSUM
1170   04B8 CA 83 04    	JZ 	LD0	;CONTINUE
1171   04BB 21 31 05    	LXI 	H,M6	;CHEKSUM ERROR
1172   04BE CD 1B 01    	CALL	MSG	; MSG
1173   04C1 2A 22 0C    	LHLD 	BLKAD	;ADDRESS OF THIS BLOCK
1174   04C4 CD 60 01    	CALL	THXW	; FOR REFERENCE
1175   04C7 C3 A0 00    	JMP	NEXT	;AND EXIT
1176   04CA             
1177   04CA CD E2 04    LD2:	CALL	BYTE	;GET MSB OF XEQAD
1178   04CD 67          	MOV 	H,A
1179   04CE CD E2 04    	CALL	BYTE
1180   04D1 6F          	MOV 	L,A
1181   04D2 B4          	ORA 	H
1182   04D3 3E 14       	MVI 	A,TOFF	;TAPE RDR
1183   04D5 CD 56 05    	CALL	TYPE	; OFF
1184   04D8 CA A0 00    	JZ 	NEXT	;MON IF NO XEQAD
1185   04DB E9          	PCHL		;GO TO ROUTINE
1186   04DC             
1187   04DC CD 65 05    RIX:	CALL 	GETCH
1188   04DF E6 7F       	ANI 	7FH
1189   04E1 C9          	RET
1190   04E2             
1191   04E2 CD 82 01    BYTE:	CALL 	GHXB	;GET TWO CHARS
1192   04E5 4F          	MOV	C,A
1193   04E6 82          	ADD 	D
1194   04E7 57          	MOV 	D,A
1195   04E8 79          	MOV	A,C
1196   04E9 C9          	RET
1197   04EA             
1198   04EA             ;$$$$$$
1199   04EA             ;
1200   04EA             ; SYSTEM MESSAGES
1201   04EA             ;
1202   04EA             
1203   04EA 0D0A0A414D53M0:	.DB	CR,LF,LF,"AMS80 V2.0",LF,-1
1203   04F0 38302056322E300AFF
1204   04F9 0D0A7F2A2A20M1:	.DB	CR,LF,RBO,"** ".-1
1205   04FF 20495320554EM2:	.DB	" IS UNDEFINED",-1
1205   0505 444546494E4544FF
1206   050D 20 3F 3F FF M3:	.DB	" ??", -1
1207   0511 140D0A7F4D45M4:	.DB	TOFF,CR,LF,RBO,"MEM WRITE ERROR AT ",-1
1207   0517 4D205752495445204552524F5220415420FF
1208   0529 205041555345M5:	.DB	" PAUSE ",-1
1208   052F 20FF
1209   0531 142043484B53M6:	.DB	TOFF," CHKSM ERR, BLOCK ",-1
1209   0537 4D204552522C20424C4F434B20FF
1210   0545 20204F4B3F20M7:	.DB	"  OK? ",-1
1210   054B FF
1211   054C 2041424F5254M8:	.DB 	" ABORTED!",-1
1211   0552 454421FF
1212   0556             
1213   0556             ;
1214   0556             ; SYSTEM I/O ROUTINES
1215   0556             ;
1216   0556             ;USER IS TO PATCH HIS OWN TELETYPE
1217   0556             ;ROUTINES HERE
1218   0556             ;
1219   0556             
1220   0556             ;
1221   0556             ; ROUTINE TO TYPE A CHARACTER
1222   0556             ;
1223   0556             ; CALLING SEQUENCE
1224   0556             ;	LDA	CHAR	;CHARACTER IN 'A' REGISTER
1225   0556             ;	CALL	TYPE	;TYPE IT
1226   0556             ;	.....		;RETURN HERE
1227   0556             
1228   0556 F5          TYPE:	PUSH	PSW	;SAVE CONTENTS OF 'A'
1229   0557 DB 01       	IN	1	;INPUT TTY STATUS
1230   0559 E6 04       	ANI	4	;TEST FOR BUSY
1231   055B C2 57 05    	JNZ	TYPE+1	;IF BUSY, KEEP TRYING
1232   055E F1          	POP	PSW	;RETRIEVE THE DATA
1233   055F F5          	PUSH	PSW	;AND SAVE IT AGAIN
1234   0560 2F          	CMA		;PREPARE THE DATA
1235   0561 D3 00       	OUT	0	;OUTPUT IT
1236   0563 F1          	POP	PSW	;RESTORE 'A'
1237   0564 C9          	RET
1238   0565             ;THIS ROUTINE WORKS IN MY SYSTEM
1239   0565             ;BUT MAY NOT WORK IN YOURS
1240   0565             
1241   0565             ;
1242   0565             ; ROUTINE TO GET A CHARACTER FROM THE TTY
1243   0565             ;
1244   0565             ; CALLING SEQUENCE
1245   0565             ;
1246   0565             ;	CALL	GETCH	; GET CHARACTER
1247   0565             ;	.....		; RETURN HERE WITH CHARACTER
1248   0565             ;			; IN 'A'
1249   0565             ;
1250   0565             ; ALL REGISTERS PRESERVED EXCEPT 'A' WHICH
1251   0565             ; CONTAINS THE INPUT CHARACTER
1252   0565             
1253   0565 DB 01       GETCH:	IN	1	;INPUT TTY STATUS
1254   0567 E6 01       	ANI	1	;TEST FOR READY
1255   0569 C2 65 05    	JNZ	GETCH	;KEEP TRYING IF NOT READY
1256   056C DB 00       	IN	0	;GET THE CHARACTER
1257   056E 2F          	CMA		;PROCESS IT
1258   056F C9          	RET
1259   0570             
1260   0570             ;THIS ROUTINE WORKS IN MY SYSTEM BUT MAY NOT
1261   0570             ;WORK IN YOURS
1262   0570             
1263   0570             ENDROM 	=$	;BOUNDARY MARKER
1264   0570             
1265   0570             ;
1266   0570             ; SYSTEM RAM AREA DEFINITIONS
1267   0570             ;
1268   0570             
1269   0C00             .ORG RAM
1270   0C00             
1271   0C00             ;
1272   0C00             ; USER RESTART VECTORS 1 - 7
1273   0C00             ;
1274   0C00 00 00       RST1:	.DW 0
1275   0C02 00 00       RST2:	.DW 0
1276   0C04 00 00       RST3:	.DW 0
1277   0C06 00 00       RST4:	.DW 0
1278   0C08 00 00       RST5:	.DW 0
1279   0C0A 00 00       RST6:	.DW 0
1280   0C0C 00 00       RST7:	.DW 0
1281   0C0E             
1282   0C0E             ;
1283   0C0E             ; MONITOR REGISTER SAVE AREA
1284   0C0E             ;
1285   0C0E             SVPC:
1286   0C0E 00          SVPCL:	.DB	0 ;SAVED PC LOW
1287   0C0F 00          SVPCH:	.DB	0 ;SAVED PC HIGH
1288   0C10             
1289   0C10             SVSP:
1290   0C10 00          SVSPL:	.DB	0 ;SAVED SP LOW
1291   0C11 00          SVSPH:	.DB	0 ;SAVED SP HIGH
1292   0C12             
1293   0C12             SVHL:
1294   0C12 00          SVL:	.DB	0 ;SAVED L
1295   0C13 00          SVH:	.DB	0 ;SAVED H
1296   0C14             
1297   0C14 00          SVE:	.DB	0 ;SAVED E
1298   0C15 00          SVD:	.DB	0 ;SAVED D
1299   0C16 00          SVC:	.DB	0 ;SAVED C
1300   0C17 00          SVB:	.DB	0 ;SAVED B
1301   0C18 00          SVF:	.DB	0 ;SAVED PSB, FLAGS
1302   0C19 00          SVA:	.DB	0 ;SAVED ACC
1303   0C1A             
1304   0C1A 01 00       ECHO:	.DW 	1	;CHIN ECHO FLAG, <>0=ECHO
1305   0C1C             			;=0 = NO ECHO
1306   0C1C             
1307   0C1C 02 00       ADR:	.DW	2	;EXAMINE/MODIFY ADDRESS
1308   0C1E             
1309   0C1E             TMPA:			;TEMP STORAGE LOCATIONS
1310   0C1E 03 00       GOGO:	.DW	3	;'JUMP' STORAGE
1311   0C20 02 00       XEQAD:	.DW 	2	;'X' EXECUTION ADDRESS
1312   0C22 02 00       BLKAD:	.DW 	2	;'L' BLOCK ADDRESS
1313   0C24 00          	NOP		;PROGRAM BOUNDARY MARKER
1314   0C25             
1315   0C25             .END
tasm: Number of errors = 0
