llbasic.asm line 2597: Duplicate label: (OUTR)
llbasic.asm line 2600: Duplicate label: (INP)
llbasic.asm line 2610: Duplicate label: (LDIV)
llbasic.asm line 2667: Duplicate label: (LADD)
llbasic.asm line 2678: Duplicate label: (LSUB)
llbasic.asm line 2840: Duplicate label: (LMCM)
llbasic.asm line 2855: Duplicate label: (LMUL)
llbasic.asm line 2921: Duplicate label: (NORM)
llbasic.asm line 2945: Duplicate label: (DFXL)
llbasic.asm line 2955: Duplicate label: (FLOAT)
llbasic.asm line 3940: Duplicate label: (INPUT)
llbasic.asm line 4127: Duplicate label: (CHAR2)
llbasic.asm line 4137: Duplicate label: (PTVAL)
llbasic.asm line 4170: Duplicate label: (MCHK)
llbasic.asm line 4179: Duplicate label: (MULT)
0001   0000             .TITLE	'Lawrence Livermore Labs BASIC'
0002   0000             ; NOTE: SEND and READ are ODT routines to handle TTYIN/TTYOUT
0003   0000             
0004   0000             MEMST	.EQU	30000O	;MUST BE ON PAGE BOUNDARY
0005   0000             MEMEND	.EQU	37777O
0006   0000             SEND	.EQU	6	;RST FOR ODT
0007   0000             OBUFF	.EQU	MEMST	;INPUT AND OUTPUT BUFFERS OCCUPY
0008   0000             IBUF	.EQU	MEMST+1	;SAME AREA
0009   0000             STLINE	.EQU	MEMST+111O
0010   0000             NLINE	.EQU	MEMST+113O
0011   0000             NL2	.EQU	MEMST+115O
0012   0000             NL4	.EQU	MEMST+117O
0013   0000             NL6	.EQU	MEMST+121O
0014   0000             KLINE	.EQU	MEMST+122O
0015   0000             KL2	.EQU	MEMST+124O
0016   0000             KL4	.EQU	MEMST+126O
0017   0000             KL6	.EQU	MEMST+130O
0018   0000             PLINE	.EQU	MEMST+131O
0019   0000             PL2	.EQU	MEMST+133O
0020   0000             PL4	.EQU	MEMST+135O
0021   0000             SBSAV	.EQU	PL4	;RETURN ADD. SAVE FOR CALL STMT.
0022   0000             PL6	.EQU	MEMST+137O
0023   0000             KASE	.EQU	MEMST+140O
0024   0000             LEN	.EQU	MEMST+141O
0025   0000             MULT1	.EQU	MEMST+142O
0026   0000             MULT2	.EQU	MEMST+144O
0027   0000             NXTSP	.EQU	MEMST+131O
0028   0000             STSPAC	.EQU	MEMST+113O
0029   0000             NORM	.EQU	7707O
0030   0000             FLOAT	.EQU	7712O
0031   0000             ZROL	.EQU	7715O
0032   0000             LPNT	.EQU	MEMST+122O
0033   0000             KLEN	.EQU	MEMST+130O
0034   0000             CPNT	.EQU	MEMST+133O
0035   0000             KFPNT	.EQU	MEMST+126O
0036   0000             FREG2	.EQU	MEMST+200O
0037   0000             CREG	.EQU	MEMST+204O
0038   0000             LADD	.EQU	7720O
0039   0000             LMUL	.EQU	7723O
0040   0000             LDIV	.EQU	7726O
0041   0000             LSUB	.EQU	7731O
0042   0000             DFXL	.EQU	7734O
0043   0000             LMCM	.EQU	7737O
0044   0000             HLINP	.EQU	MEMST+206O
0045   0000             GREG	.EQU	MEMST+167O
0046   0000             FREG1	.EQU	MEMST+174O
0047   0000             SCR	.EQU	MEMST+146O
0048   0000             CONV	.EQU	7745O
0049   0000             MODE	.EQU	MEMST+205O
0050   0000             FINPT	.EQU	7750O
0051   0000             MULT	.EQU	7753O
0052   0000             PTVAL	.EQU	7756O
0053   0000             DCOMP	.EQU	7761O
0054   0000             MCHK	.EQU	7764O
0055   0000             CHAR2	.EQU	7767O
0056   0000             MESCR	.EQU	MEMST+210O	;DEFINE MEMORY SCR AREA PNTR
0057   0000             VARAD	.EQU	MEMST+212O	;TEMP SPACE FOR INP. STMT.
0058   0000             VNAME	.EQU	MEMST+214O	;TEMP SPACE FOR 'FOR-NEXT'
0059   0000             VLOC	.EQU	MEMST+216O	;TEMP SPACE FOR 'FOR-NEXT'
0060   0000             FLIMT	.EQU	MEMST+220O	;TEMP SPACE FOR 'FOR-NEXT'
0061   0000             NEST	.EQU	MEMST+224O	;NESTING STACK-POINTER
0062   0000             STAC	.EQU	MEMST+226O	;FOR-NEXT NESTING STACK
0063   0000             STSIZ	.EQU 	$2C		;STACK SIZE,ALLOWS 10 NESTED FOR-NEXT
0064   0000             TOPNS	.EQU	STAC		;TOP OF STACK
0065   0000             BOTNS	.EQU	STAC+STSIZ	;BOTTOM OF STACK
0066   0000             VEND	.EQU	MEMST+252O	;DEF. END OF VAR. STORAGE AREA
0067   0000             
0068   0000             ;MAIN ROUTINE--HANDLES ALL USER INPUT
0069   1000             	.ORG	10000O
0070   1000 21 00 30    M1:	LXI	H,OBUFF
0071   1003 36 01       	MVI	M,1
0072   1005 21 49 30    	LXI	H,STLINE
0073   1008 36 FF       	MVI	M,377O
0074   100A 2C          	INR	L
0075   100B 36 FF       	MVI	M,377O
0076   100D 2A C8 1F    	LHLD	FWAM	;GET ADDRES OF FWA MEM.
0077   1010 22 4B 30    	SHLD	NLINE	;STORE IN FREE SPACE PNTR.
0078   1013 31 FF 3F    M1A:	LXI	SP,MEMEND
0079   1016 21 54 14    M2:	LXI	H,ODATA
0080   1019 CD 42 14    	CALL	FORM1
0081   101C CD D0 12    	CALL	WRIT
0082   101F 2A 4B 30    M3:	LHLD 	NLINE
0083   1022 23          	INX	H
0084   1023 23          	INX	H
0085   1024 23          	INX	H
0086   1025 23          	INX	H
0087   1026 23          	INX	H
0088   1027 CD C6 13    	CALL	TTYIN
0089   102A 4F          	MOV	C,A
0090   102B FE 00       	CPI	0
0091   102D CA 1F 10    	JZ	M3
0092   1030 CD 22 12    	CALL	ALPHA
0093   1033 DA 42 10    	JC	M4
0094   1036 CD 14 12    	CALL	NUMB
0095   1039 D4 9E 11    	CNC	WHAT
0096   103C CD 8F 10    	CALL	INSERT
0097   103F C3 1F 10    	JMP 	M3	; END OF PAGE 16
0098   1042             
0099   1042 3E 00       M4:	MVI	A,0
0100   1044 CD F4 12    	CALL	SYMSRT
0101   1047 3C          M4A:	INR	A
0102   1048 CC 9E 11    	CZ	WHAT
0103   104B 3D          	DCR	A
0104   104C CA 73 16    	JZ	RUN
0105   104F 3D          	DCR	A
0106   1050 CC AA 11    	CZ	TAPE
0107   1053 CA 16 10    	JZ	M2
0108   1056 3D          	DCR	A
0109   1057 CC D1 11    	CZ	LIST
0110   105A CA 16 10    	JZ	M2
0111   105D 3D          	DCR	A
0112   105E CA 00 10    	JZ	M1
0113   1061 3D          	DCR	A
0114   1062 C4 9E 11    	CNZ 	WHAT
0115   1065             
0116   1065             ; ROUTINE TO INPUT FROM HSR
0117   1065 CD 01 15    PTAPE:	CALL	CHAR5
0118   1068 FE 00       	CPI	0
0119   106A CA 65 10    	JZ	PTAPE
0120   106D CD CE 14    PT1:	CALL	HSRIN
0121   1070 4F          	MOV	C,A
0122   1071 FE 00       	CPI	0
0123   1073 CA 65 10    	JZ	PTAPE
0124   1076 CD 22 12    	CALL	ALPHA
0125   1079 DA 42 10    	JC	M4
0126   107C CD 8F 10    	CALL	INSERT
0127   107F CD 01 15    	CALL	CHAR5
0128   1082 FE 00       	CPI	0
0129   1084 CA 16 10    	JZ	M2
0130   1087 23          	INX	H
0131   1088 23          	INX	H
0132   1089 23          	INX	H
0133   108A 23          	INX	H
0134   108B 23          	INX	H
0135   108C C3 6D 10    	JMP 	PT1
0136   108F             
0137   108F             ; ROUTINE TO HANDLE ALL SOURCE LINE INPUT
0138   108F             ; THIS INCLUDES INSERTION DELETION, AND
0139   108F             ; ADDITION CF NEW SOURCE LINES.
0140   108F 2B          INSERT:	DCX	H
0141   1090 71          	MOV	M,C
0142   1091 23          	INX	H
0143   1092 CD 2A 12    	CALL	CVB
0144   1095 FE 05       	CPI	5
0145   1097 DA A2 10    	JC	ISR1A
0146   109A C4 9E 11    	CNZ	WHAT
0147   109D 7B          	MOV	A,E
0148   109E 17          	RAL
0149   109F DC 9E 11    	CC	WHAT
0150   10A2 2A 4B 30    ISR1A:	LHLD 	NLINE
0151   10A5 72          	MOV	M,D
0152   10A6 23          	INX	H
0153   10A7 73          	MOV	M,E
0154   10A8 21 4B 30    	LXI	H,NLINE
0155   10AB CD EE 0F    	CALL	PTVAL
0156   10AE 2A 49 30    	LHLD	STLINE
0157   10B1 CD A3 12    	CALL	CHK1
0158   10B4 D2 D4 10    	JNC	ISRT3
0159   10B7 2A 4B 30    	LHLD	NLINE
0160   10BA 22 49 30    	SHLD	STLINE
0161   10BD 16 FF       ISRT1:	MVI	D,377O
0162   10BF 5A          	MOV	E,D
0163   10C0 CD 8B 11    	CALL	STPNT
0164   10C3 23          	INX	H
0165   10C4 7E          ISRT2:	MOV	A,M
0166   10C5 C6 05       	ADI	5
0167   10C7 2A 4B 30    	LHLD	NLINE
0168   10CA 85          	ADD	L
0169   10CB 6F          	MOV	L,A
0170   10CC 3E 00       	MVI	A,0
0171   10CE 8C          	ADC	H
0172   10CF 67          	MOV 	H,A
0173   10D0 22 4B 30    	SHLD	NLINE
0174   10D3 C9          	RET
0175   10D4 22 52 30    ISRT3:	SHLD	KLINE
0176   10D7 21 52 30    ISRT4:	LXI	H,KLINE
0177   10DA CD EE 0F    	CALL	PTVAL
0178   10DD 21 4D 30    	LXI	H,NL2
0179   10E0 56          	MOV	D,M
0180   10E1 2C          	INR	L
0181   10E2 5E          	MOV	E,M
0182   10E3 21 54 30    	LXI	H,KL2
0183   10E6 46          	MOV	B,M
0184   10E7 2C          	INR	L
0185   10E8 4E          	MOV	C,M
0186   10E9 CD F1 0F    	CALL	DCOMP
0187   10EC CA 21 11    	JZ	ISRT6
0188   10EF DA 7A 11    	JC 	ISR12
0189   10F2 2A 56 30    	LHLD	KL4
0190   10F5 CD A3 12    	CALL	CHK1
0191   10F8 DA 0F 11    	JC	ISRT5
0192   10FB E5          	PUSH	H
0193   10FC 2A 52 30    	LHLD	KLINE	; END OF PAGE 17
0194   10FF 22 59 30    	SHLD	PLINE
0195   1102 21 59 30    	LXI	H,PLINE
0196   1105 CD EE 0F    	CALL	PTVAL
0197   1108 E1          	POP	H
0198   1109 22 52 30    	SHLD	KLINE
0199   110C C3 D7 10    	JMP	ISRT4
0200   110F 2A 4B 30    ISRT5:	LHLD	NLINE
0201   1112 CD 91 11    	CALL	NOLINE
0202   1115 C8          	RZ
0203   1116 EB          	XCHG
0204   1117 2A 52 30    	LHLD	KLINE
0205   111A CD 8B 11    	CALL	STPNT
0206   111D EB          	XCHG
0207   111E C3 BD 10    	JMP	ISRT1
0208   1121 2A 4B 30    ISRT6:	LHLD	NLINE
0209   1124 CD 91 11    	CALL	NOLINE
0210   1127 C2 48 11    	JNZ	ISRT8
0211   112A 2A 49 30    	LHLD	STLINE
0212   112D EB          	XCHG
0213   112E 2A 52 30    	LHLD	KLINE
0214   1131 E5          	PUSH	H
0215   1132 C1          	POP	B
0216   1133 CD F1 0F    	CALL	DCOMP
0217   1136 2A 56 30    	LHLD	KL4
0218   1139 CA 44 11    	JZ	ISRT7
0219   113C EB          	XCHG
0220   113D 2A 59 30    	LHLD	PLINE
0221   1140 CD 8B 11    	CALL	STPNT
0222   1143 C9          	RET
0223   1144 22 49 30    ISRT7:	SHLD	STLINE
0224   1147 C9          	RET
0225   1148 2A 56 30    ISRT8:	LHLD	KL4
0226   114B EB          	XCHG
0227   114C 2A 4B 30    	LHLD	NLINE
0228   114F CD 8B 11    	CALL	STPNT
0229   1152 2A 52 30    ISRT9:	LHLD	KLINE
0230   1155 EB          	XCHG
0231   1156 2A 49 30    	LHLD	STLINE
0232   1159 E5          	PUSH	H
0233   115A C1          	POP	B
0234   115B CD F1 0F    	CALL	DCOMP
0235   115E CA 71 11    	JZ	ISR11
0236   1161 2A 4B 30    	LHLD	NLINE
0237   1164 EB          	XCHG
0238   1165 2A 59 30    	LHLD	PLINE
0239   1168 CD 8B 11    	CALL	STPNT
0240   116B 21 51 30    ISR10:	LXI	H,NL6
0241   116E C3 C4 10    	JMP	ISRT2
0242   1171 2A 4B 30    ISR11:	LHLD	NLINE
0243   1174 22 49 30    	SHLD	STLINE
0244   1177 C3 6B 11    	JMP	ISR10
0245   117A 2A 52 30    ISR12:	LHLD	KLINE
0246   117D EB          	XCHG
0247   117E 2A 4B 30    	LHLD	NLINE
0248   1181 CD 91 11    	CALL	NOLINE
0249   1184 C8          	RZ
0250   1185 CD 8B 11    	CALL	STPNT
0251   1188 C3 52 11    	JMP	ISRT9
0252   118B             
0253   118B             ; ROUTINE TO STORE POINTERS INTO MEM ARRAY
0254   118B 23          STPNT:	INX	H
0255   118C 23          	INX	H
0256   118D 73          	MOV	M,E
0257   118E 23          	INX	H
0258   118F 72          	MOV	M,D
0259   1190 C9          	RET
0260   1191             
0261   1191             ; ROUTINE TO CHECK NEW LINE FOR SOURCE STMT.
0262   1191 E5          NOLINE:	PUSH	H
0263   1192 23          	INX	H
0264   1193 23          	INX	H
0265   1194 23          	INX	H
0266   1195 23          	INX	H
0267   1196 4E          	MOV	C,M
0268   1197 23          	INX	H
0269   1198 CD 71 12    	CALL	LENGTH
0270   119B E1          	POP	H
0271   119C B9          	CMP	C
0272   119D C9          	RET
0273   119E             
0274   119E             ;ROUTINE TO RESPOND WITH 'WHAT?' FOR UNIDENTIFIED COMMAND.
0275   119E 21 54 14    WHAT:	LXI	H,ODATA
0276   11A1 CD 3E 14    	CALL	FORM7
0277   11A4 CD D0 12    	CALL	WRIT
0278   11A7 C3 13 10    	JMP	M1A
0279   11AA             
0280   11AA             ; ROUTINE TO PUNCH PAPER TAPE OF SOURCE.
0281   11AA F5          TAPE:	PUSH	PSW
0282   11AB C5          	PUSH	B	; 0XC5
0283   11AC 21 54 14    	LXI	H,ODATA
0284   11AF CD 41 14    	CALL	FORM2
0285   11B2 CD D0 12    	CALL	WRIT
0286   11B5 3E 00       	MVI	A,0
0287   11B7 C1          	POP	B
0288   11B8 06 40       	MVI	B,100O
0289   11BA F5          	PUSH	PSW	; END OF PAGE 18
0290   11BB C5          	PUSH	B
0291   11BC CD AD 12    	CALL	PAD
0292   11BF CD D0 12    	CALL	WRIT
0293   11C2 C1          	POP	B
0294   11C3 C5          	PUSH	B
0295   11C4 CD D1 11    	CALL	LIST
0296   11C7 C1          	POP	B
0297   11C8 F1          	POP	PSW
0298   11C9 CD AD 12    	CALL	PAD
0299   11CC CD D0 12    	CALL	WRIT
0300   11CF F1          	POP 	PSW
0301   11D0 C9          	RET
0302   11D1             
0303   11D1             ; ROUTINE TO LIST TO TTY THE SOURCE STMTS.
0304   11D1 2A 49 30    LIST:	LHLD	STLINE
0305   11D4 CD A3 12    	CALL	CHK1
0306   11D7 DA 13 10    	JC	M1A
0307   11DA 22 59 30    	SHLD	PLINE
0308   11DD 21 FF FF    	LXI	H,177777O
0309   11E0 22 52 30    	SHLD	KLINE
0310   11E3 0D          	DCR	C
0311   11E4 C4 46 15    	CNZ	BOUND
0312   11E7 2A 59 30    	LHLD	PLINE
0313   11EA 23          LIS1:	INX	H
0314   11EB 23          	INX	H
0315   11EC 46          	MOV	B,M
0316   11ED 23          	INX	H
0317   11EE 4E          	MOV	C,M
0318   11EF C5          	PUSH	B
0319   11F0 23          	INX	H
0320   11F1 CD 43 14    	CALL	FORM5
0321   11F4 CD D0 12    	CALL	WRIT
0322   11F7 C1          	POP	B
0323   11F8 2A 52 30    	LHLD	KLINE
0324   11FB EB          	XCHG
0325   11FC CD F1 0F    	CALL	DCOMP
0326   11FF C8          	RZ
0327   1200 68          	MOV	L,B
0328   1201 61          	MOV	H,C
0329   1202 CD 08 12    	CALL	QUITT	;CHECK FOR INTERRUPTION
0330   1205 C3 EA 11    	JMP	LIS1	;NONE - CONTINUE
0331   1208             
0332   1208             ;THIS ROUTINE CHECKS PORT 2 FOR A CNTRL/S CHARACTER
0333   1208             ;IF ONE IS FOUND THEN EXECUTION IS TO BE INTERRUPTED
0334   1208             ;CONTROL IS PASSED TO M1A
0335   1208 DB 03       QUITT:	IN	3	;TEST FLAG PORKT
0336   120A 1F          	RAR		;FLAG TO CY
0337   120B D0          	RNC		;NOTHING THERE
0338   120C DB 02       	IN	2	;FLAG WAS SET, GET DATA
0339   120E FE 93       QTCHK:	CPI	223O	;WAS IT CNTRL/S?
0340   1210 CA 13 10    	JZ	M1A	;YES
0341   1213 C9          	RET		;NO, RETURN
0342   1214             
0343   1214             ;ROUTINES NUMB AND ALPHA CHECK IF CONTENTS OF MEMORY
0344   1214             ;LOCATION IN HL CONTAIN ASCII NUMERIC OR ALPHABETIC
0345   1214             ;CHARACTER. RETURN CY=1 IF YES, CY=0 IF NO.
0346   1214 C5          NUMB:	PUSH 	B
0347   1215 06 B0       	MVI	B,260O
0348   1217 0E BA       	MVI	C,272O
0349   1219 7E          C1:	MOV	A,M
0350   121A B8          	CMP	B
0351   121B 3F          	CMC
0352   121C D2 20 12    	JNC	BAC
0353   121F B9          	CMP	C
0354   1220 C1          BAC:	POP	B
0355   1221 C9          	RET
0356   1222 C5          ALPHA:	PUSH 	B
0357   1223 06 C1       	MVI	B,301O
0358   1225 0E DB       	MVI	C,333O
0359   1227 C3 19 12    	JMP	C1
0360   122A             
0361   122A             ;ROUTINE TO CONVERT ASCII NUMERIC CHAR. STRING TO
0362   122A             ;EQUIVALENT BINARY NUMBER. RETURNS EQUIVALENT IN
0363   122A             ;DE REG. LENGTH OF LINE PASSED IN REG C AND
0364   122A             ;RETURNED POINTING TO LAST NUMERIC CHAR. LENGTH
0365   122A             ;OF CHAR STRING RETURNED IN REG A.
0366   122A E5          CVB:	PUSH 	H
0367   122B C5          	PUSH	B
0368   122C CD 71 12    	CALL	LENGTH
0369   122F F5          	PUSH	PSW
0370   1230 E5          	PUSH	H
0371   1231 FE 00       	CPI 	0
0372   1233 CA 68 12    	JZ	CVB2
0373   1236 21 60 30    	LXI	H,KASE
0374   1239 77          	MOV	M,A
0375   123A 2C          	INR	L
0376   123B 71          	MOV	M,C
0377   123C 21 0A 00    	LXI	H,10
0378   123F 22 62 30    	SHLD	MULT1
0379   1242 21 00 00    	LXI	H,0
0380   1245 22 64 30    	SHLD	MULT2
0381   1248 21 65 30    	LXI	H,MULT2+1
0382   124B CD EB 0F    CVB1:	CALL	MULT
0383   124E E3          	XTHL
0384   124F 7E          	MOV	A,M
0385   1250 DE B0       	SBI 	260O
0386   1252 82          	ADD 	D	; END OF PAGE 19
0387   1253 57          	MOV	D,A
0388   1254 3E 00       	MVI	A,0
0389   1256 8B          	ADC	E
0390   1257 5F          	MOV	E,A
0391   1258 23          	INX	H
0392   1259 E3          	XTHL
0393   125A 72          	MOV	M,D
0394   125B 2C          	INR	L
0395   125C 73          	MOV	M,E
0396   125D E5          	PUSH	H
0397   125E 21 61 30    	LXI	H,LEN
0398   1261 35          	DCR	M
0399   1262 2D          	DCR	L
0400   1263 35          	DCR	M
0401   1264 E1          	POP	H
0402   1265 C2 4B 12    	JNZ	CVB1
0403   1268 E1          CVB2:	POP	H
0404   1269 F1          	POP	PSW
0405   126A C1          	POP	B
0406   126B 21 61 30    	LXI	H,LEN
0407   126E 4E          	MOV	C,M
0408   126F E1          	POP	H
0409   1270 C9          	RET
0410   1271             
0411   1271             ;ROUTINE TO EVALUATE LENGTH OF ASCII NUMERIC
0412   1271             ;CHAR STRLING: PASSED ADD OF FIRST CHAR IN HL REG
0413   1271             ;RETURNS LENGTH IN REG A.
0414   1271 C5          LENGTH: 	PUSH	B
0415   1272 E5          	PUSH	H
0416   1273 06 00       	MVI	B,0
0417   1275 CD 14 12    NLE1:	CALL 	NUMB
0418   1278 D2 84 12    	JNC	NLE2
0419   127B 23          	INX	H
0420   127C 04          	INR	B
0421   127D 0D          	DCR	C
0422   127E CA 84 12    	JZ	NLE2
0423   1281 C3 75 12    	JMP	NLE1
0424   1284 78          NLE2:	MOV	A,B
0425   1285 E1          	POP	H
0426   1286 C1          	POP	B
0427   1287 C9          	RET
0428   1288             
0429   1288             ;ROUTINE TO LOCATE SOURCE LINE IN MEM. PASSED BIN VALUE
0430   1288             ;OF LINE NUMBER IN DE(LOW HIGH) REG. RETURNS ADDRESS OF
0431   1288             ;SOURCE LINE IN HL REGS.(HIGH,LOW). CY SET=@ NOT FOUND.
0432   1288 2A 49 30    NSRCH:	LHLD	STLINE
0433   128B CD A3 12    L2:	CALL	CHK1
0434   128E D8          	RC
0435   128F 46          	MOV	B,M
0436   1290 23          	INX	H
0437   1291 4E          	MOV	C,M
0438   1292 CD F1 0F    	CALL	DCOMP
0439   1295 CA A0 12    	JZ	FOUND
0440   1298 23          	INX	H
0441   1299 7E          	MOV	A,M
0442   129A 23          	INX	H
0443   129B 66          	MOV	H,M
0444   129C 6F          	MOV	L,A
0445   129D C3 8B 12    	JMP	L2
0446   12A0 2B          FOUND:	DCX	H
0447   12A1 B7          	ORA	A
0448   12A2 C9          	RET
0449   12A3             
0450   12A3             ;ROUTINE TO COMPARE CONTENTS OF HL TO 177777Q.
0451   12A3             ;RETURNS CY=1 IF YES; CY=0 IF NO.
0452   12A3 C5          CHK1:	PUSH 	B
0453   12A4 E5          	PUSH	H
0454   12A5 06 00       	MVI	B,0
0455   12A7 0E 01       	MVI	C,1
0456   12A9 09          	DAD	B
0457   12AA E1          	POP	H
0458   12AB C1          	POP	B
0459   12AC C9          	RET
0460   12AD             
0461   12AD             ;ROUTINE TO PAD OUTPUT BUFFER WITH CONTENTS OF REG A.
0462   12AD             ;REG B CONTAINS NUMBER OF CHAR TO PAD.
0463   12AD C5          PAD:	PUSH	B
0464   12AE D5          	PUSH	D
0465   12AF E5          	PUSH 	H
0466   12B0 21 00 30    	LXI	H,OBUFF
0467   12B3 4D          	MOV	C,L
0468   12B4 6E          	MOV	L,M
0469   12B5 57          	MOV	D,A
0470   12B6 3E 49       	MVI	A,73
0471   12B8 BD          P1:	CMP	L
0472   12B9 C2 C2 12    	JNZ	P2
0473   12BC 69          	MOV	L,C
0474   12BD 77          	MOV	M,A
0475   12BE CD D0 12    	CALL	WRIT
0476   12C1 2C          	INR	L
0477   12C2 72          P2:	MOV	M,D
0478   12C3 2C          	INR	L
0479   12C4 05          	DCR	B
0480   12C5 C2 B8 12    	JNZ	P1
0481   12C8 7A          	MOV	A,D
0482   12C9 45          	MOV	B,L
0483   12CA 69          	MOV	L,C	;END OF PAGE 20
0484   12CB 70          	MOV	M,B
0485   12CC E1          	POP	H
0486   12CD D1          	POP	D
0487   12CE C1          	POP	B
0488   12CF C9          	RET
0489   12D0             
0490   12D0             ;ROUTINE TO DUMP OUTPUT BUFFER TO TTY.
0491   12D0 16 00       WRIT:	MVI	D,0
0492   12D2 F5          WRIT1:	PUSH	PSW
0493   12D3 E5          	PUSH	H
0494   12D4 C5          	PUSH	B
0495   12D5 21 00 30    	LXI	H,OBUFF
0496   12D8 E5          	PUSH 	H
0497   12D9 4E          	MOV	C,M
0498   12DA 0D          	DCR	C
0499   12DB CA ED 12    	JZ	W2
0500   12DE 2C          	INR	L
0501   12DF 7E          W1:	MOV	A,M
0502   12E0             	RST	SEND	;PRINT VIA ODT
llbasic.asm line 0502: unrecognized argument.             (SEND)
0503   12E0 2C          	INR	L
0504   12E1 0D          	DCR	C
0505   12E2 C2 DF 12    	JNZ	W1
0506   12E5 15          	DCR	D
0507   12E6 CA ED 12    	JZ	W2
0508   12E9 3E 8D       	MVI	A,215O
0509   12EB             	RST	SEND	;PRINT VIA ODT
llbasic.asm line 0509: unrecognized argument.             (SEND)
0510   12EB 3E 8A       	MVI	A,212O
0511   12ED             	RST	SEND	;PRINT VIA ODT
llbasic.asm line 0511: unrecognized argument.             (SEND)
0512   12ED E1          W2:	POP	H
0513   12EE 36 01       	MVI	M,1
0514   12F0 C1          	POP	B
0515   12F1 E1          	POP	H
0516   12F2 F1          	POP	PSW
0517   12F3 C9          	RET
0518   12F4             
0519   12F4             ;ROUTINE TO LOCATE COMMANDS, KEY WORDS, OPERATORS,
0520   12F4             ;AND FUNCTION. HL CONTAINS ADD OF FIRST CHAR.
0521   12F4             ;REG C CONTAINS LENGTH OF LINE: RETURNS SYMBOL NUMBER
0522   12F4             ;IF FOUND IN REG A, 377Q IN A IF NOT FOUND.
0523   12F4 D5          SYMSRT:	PUSH	D
0524   12F5 C5          	PUSH	B
0525   12F6 E5          	PUSH	H
0526   12F7 E5          	PUSH	H
0527   12F8 21 61 30    	LXI	H,LEN	;SAVE C IN LEN
0528   12FB 71          	MOV	M,C
0529   12FC 21 49 13    	LXI	H,KDATA	;LOCATE TYPE OF SYMBOL SOUGHT.
0530   12FF 1E 00       	MVI	E,0	;REG A CONTAINS:
0531   1301 85          	ADD	L	;0 FOR COMMAND
0532   1302 6F          	MOV	L,A	;1 FOR KEYWORD
0533   1303 6E          	MOV	L,M	;2 FOR OPERATOR AND DELIMITER
0534   1304 4E          S2:	MOV	C,M	;3 FOR FUNCTION
0535   1305 2C          S3:	INR	L
0536   1306 46          	MOV	B,M
0537   1307 E3          	XTHL
0538   1308 7E          	MOV	A,M
0539   1309 B8          	CMP	B
0540   130A C2 20 13    	JNZ	S4
0541   130D 0D          	DCR	C
0542   130E CA 3C 13    	JZ	S5
0543   1311 E5          	PUSH	H
0544   1312 21 61 30    	LXI	H,LEN
0545   1315 35          	DCR	M
0546   1316 E1          	POP	H
0547   1317 CA 1F 13    	JZ	S4A
0548   131A 23          	INX	H
0549   131B E3          	XTHL
0550   131C C3 05 13    	JMP	S3
0551   131F 0C          S4A:	INR	C
0552   1320 E1          S4:	POP	H
0553   1321 79          	MOV	A,C
0554   1322 85          	ADD	L
0555   1323 54          	MOV	D,H
0556   1324 E1          	POP	H
0557   1325 C1          	POP	B
0558   1326 C5          	PUSH	B
0559   1327 E5          	PUSH	H
0560   1328 E5          	PUSH	H
0561   1329 21 61 30    	LXI	H,LEN
0562   132C 71          	MOV	M,C
0563   132D 6F          	MOV	L,A
0564   132E 62          	MOV	H,D
0565   132F 7E          	MOV	A,M
0566   1330 1C          	INR	E
0567   1331 4F          	MOV	C,A
0568   1332 3C          	INR	A
0569   1333 C2 05 13    	JNZ	S3
0570   1336 21 61 30    	LXI	H,LEN
0571   1339 34          	INR	M
0572   133A 1E FF       	MVI	E,377O
0573   133C 7B          S5:	MOV	A,E	;MOVE SYMBOL NUMBER INTO REG A
0574   133D 21 61 30    	LXI	H,LEN
0575   1340 5E          	MOV	E,M
0576   1341 1D          	DCR	E
0577   1342 E1          	POP	H
0578   1343 E1          	POP	H	;END OF PAGE 21
0579   1344 C1          	POP	B
0580   1345 4B          	MOV	C,E	;MOVE NUMBER OF CHAR. LEFT IN LINE INT
0581   1346 D1          	POP	D
0582   1347 C9          	RET
0583   1348             
0584   1348             ;***************************************************************
0585   1348             ;THE CODE FROM HERE TO THE NEXT LINE OF *'S MUST BE ON ONE PAGE
0586   1348             ;THIS MACRO ADDS PARITY BITS TO CHARACTERS
0587   1348             CHPAR	MACRO	CH
llbasic.asm line 0587: Label not found: (CHPAR)
llbasic.asm line 0587: label value misalligned.           (CHPAR)
llbasic.asm line 0587: unrecognized instruction.          (CHPAR)
llbasic.asm line 0588: Label not found: (CH)
0588   1348 80          	.DB	CH | 200O
0589   1349             	ENDM
llbasic.asm line 0589: unrecognized instruction.          (ENDM)
0590   1349 4D          KDATA:	.DB	KDAT1 & 377O
0591   134A 61          	.DB	KDAT2 & 377O
0592   134B 9B          	.DB	KDAT3 & 377O
0593   134C BD          	.DB	KDAT4 & 377O
0594   134D 03 D2 D5 CE KDAT1:	.DB	3,322O,325O,316O	;RUN
0595   1351 06 D0 CC D3 	.DB	6,320O,314O,323O	;PLS
0596   1355 03 CC D3    	.DB	3,314O,311O 323O	;LIS
0597   1358 03 D3 C3 D2 	.DB	3,323O,303O,322O	;SCR
0598   135C 03 D0 D4 C1 	.DB	3,320O,324O,301O	;PTA
0599   1360 FF          	.DB	377O
0600   1361 03 CC C5 D4 KDAT2:	.DB	3,314O,305O,324O	;LET
0601   1365 03 D0 D2 C9 	.DB	3,320O,322O,311O	;PRI
0602   1369 03 D2 C5 CD 	.DB	3,322O,305O,315O	;REM
0603   136D 03 D3 D4 CF 	.DB	3,323O,324O,317O	;STO
0604   1371 03 C5 CE C4 	.DB	3,305O,316O,304O	;END
0605   1375 03 C7 CF D4 	.DB	3,307O,317O,324O	;GOT
0606   1379 02 C9 C6    	.DB	2,311O,306O	;IF
0607   137C 03 C9 CE D0 	.DB	3,311O,316O,320O	;INP
0608   1380 03 C4 C9 CD 	.DB	3,304O,311O,315O	;DIM
0609   1384 03 C3       	.DB	3,'C'+200O	;CAL
0610   1386 C1          	.DB	'A'+200O
0611   1387 C9          	.DB	'I'+200O
0612   1388 04 C7       	.DB	4,'G'+200O	;GOSU
0613   138A CF          	.DB	'O'+200O
0614   138B D3          	.DB	'S'+200O
0615   138C D5          	.DB	'U'+200O
0616   138D 03 D2       	.DB	3,'R'+200O	;RET
0617   138F C5          	.DB	'E'+200O
0618   1390 D4          	.DB	'T'+200O
0619   1391 03 C6       	.DB	3,'F' | 200O	;FOR
0620   1393 CF          	.DB	'O' | 200O
0621   1394 D2          	.DB	'R' | 200O
0622   1395 04 CE       	.DB	4, 'N' | 200O	;NEXT
0623   1397 C5          	.DB	'E' | 200O
0624   1398 D8          	.DB	'X' | 200O
0625   1399 D4          	.DB	'T' | 200O
0626   139A FF          	.DB	377O
0627   139B             
0628   139B             ;DELIMITERS HAVE FOLLOWING VALUES:
0629   139B             ;  0  1  2  3  4  5  6     7     8     9  10  11  12
0630   139B             ;  <  >  ,  =  )  ;  THEN  STOP  STEP  *  /   +   - 
0631   139B 01 BC 01 BE KDAT3:	.DB	1,274O,1,276O	; <  >
0632   139F 01 AC 01 BD 	.DB	1,254O,1,275O	; ,  =
0633   13A3 01 A9       	.DB	1,251O	; )
0634   13A5 01 BB       	.DB	1,';'+200O	; ';'
0635   13A7 04          	.DB	4
0636   13A8             	CHPAR	'''T'''
llbasic.asm line 0636: unrecognized instruction.          (CHPAR)
0637   13A8 D4          	.DB	'T' | 200O
0638   13A9             	CHPAR	'''H'''
llbasic.asm line 0638: unrecognized instruction.          (CHPAR)
0639   13A9 C8          	.DB	'H' | 200O
0640   13AA             	CHPAR	'''E'''
llbasic.asm line 0640: unrecognized instruction.          (CHPAR)
0641   13AA C5          	.DB	'E' | 200O
0642   13AB             	CHPAR	'''N'''
llbasic.asm line 0642: unrecognized instruction.          (CHPAR)
0643   13AB CE          	.DB	'N' | 200O	
0644   13AC 02          	.DB	2	;TO
0645   13AD             	CHPAR 	'''T'''
llbasic.asm line 0645: unrecognized instruction.          (CHPAR)
0646   13AD D4          	.DB	'T' | 200O
0647   13AE             	CHPAR	 '''O'''
llbasic.asm line 0647: unrecognized instruction.          (CHPAR)
0648   13AE CF          	.DB	'O' | 200O
0649   13AF 04          	.DB	4	;STEP
0650   13B0             	CHPAR 	'''S'''
llbasic.asm line 0650: unrecognized instruction.          (CHPAR)
0651   13B0 D3          	.DB	'S' | 200O
0652   13B1             	CHPAR	'''T'''
llbasic.asm line 0652: unrecognized instruction.          (CHPAR)
0653   13B1 D4          	.DB	'T' | 200O
0654   13B2             	CHPAR	'''E'''
llbasic.asm line 0654: unrecognized instruction.          (CHPAR)
0655   13B2 C5          	.DB	'E' | 200O
0656   13B3             	CHPAR	'''P'''
llbasic.asm line 0656: unrecognized instruction.          (CHPAR)
0657   13B3 D0          	.DB	'P' | 200O
0658   13B4 01 AA       	.DB	1,'*'+200O	;'*'
0659   13B6 01 AF 01 AB 	.DB 	1,257O,1,253O	;'/', '+'
0660   13BA 01 AD       	.DB	1,255O		;'-'
0661   13BC             				; END OF PAGE 22
0662   13BC             			
0663   13BC FF          	.DB 	377O
0664   13BD 03 C7 C5 D4 KDAT4:	.DB	3,307O,305O,324O	;GET
0665   13C1 03 D0 D5 D4 	.DB	3,320O,325O,324O	;PUT
0666   13C5 FF          	.DB	377O
0667   13C6             
0668   13C6             ;********************************************************
0669   13C6             ;ROUTINE TO INPUT SOURCE LINE FROM TTY. PASSED ADD
0670   13C6             ;OF FIRST CHAR IN HL. RETURNS LENGTH OF LINE IN REG A
0671   13C6 E5          TTYIN:	PUSH	H
0672   13C7 06 00       	MVI 	B,0
0673   13C9 CD F7 0F    TIN1:	CALL 	CHAR2
0674   13CC FE 99       	CPI	231O	;CNTRL Y?
0675   13CE CA FD 13    	JZ	TIN5
0676   13D1 FE FF       	CPI	377O
0677   13D3 CA F3 13    	JZ	TIN2
0678   13D6 FE DF       	CPI	337O	;BACK	(RUBOUT)?
0679   13D8 CA F6 13    	JZ	TIN2+3
0680   13DB FE 8A       	CPI	212O	;LF?
0681   13DD CA C9 13    	JZ	TIN1
0682   13E0 FE 8D       	CPI	215O	;CR
0683   13E2 CA 03 14    	JZ	TIN4
0684   13E5 FE 8C       	CPI	214O	;FORM FEED?
0685   13E7 CA C9 13    	JZ	TIN1	;IGNORE
0686   13EA 77          	MOV	M,A
0687   13EB 23          	INX	H
0688   13EC 04          	INR	B
0689   13ED CD 0D 15    	CALL	MEMFUL
0690   13F0 C3 C9 13    	JMP	TIN1
0691   13F3 3E DF       TIN2:	MVI	A,337O
0692   13F5             	RST	SEND	;PRINT VIA ODT
llbasic.asm line 0692: unrecognized argument.             (SEND)
0693   13F5 2B          	DCX	H
0694   13F6 05          	DCR	B
0695   13F7 F2 C9 13    	JP	TIN1
0696   13FA E1          	POP	H
0697   13FB AF          	XRA	A	;ZERO A
0698   13FC C9          	RET
0699   13FD 3E DC       TIN5:	MVI	A,334O
0700   13FF             	RST	SEND	;PRTNT VIA ODT
llbasic.asm line 0700: unrecognized argument.             (SEND)
0701   13FF 3E 00       TIN5A:	MVI	A,0
0702   1401 E1          	POP	H
0703   1402 C9          	RET
0704   1403 3E 8A       TIN4:	MVI	A,212O
0705   1405             	RST	SEND	;PRINT VIA ODT
llbasic.asm line 0705: unrecognized argument.             (SEND)
0706   1405 0E 00       TIN4A:	MVI	C,0
0707   1407 E1          	POP	H
0708   1408 78          	MOV	A,B
0709   1409 B9          	CMP	C
0710   140A C8          	RZ
0711   140B             
0712   140B             ;ROUTINE TO REMOVE BLANKS FROM SOURCE UNLESS ENCLOSED IN I'S
0713   140B D5          	PUSH	D	;SAVE REG'S
0714   140C E5          	PUSH	H
0715   140D E5          	PUSH 	H
0716   140E 1E A2       	MVI	E,'"'+200O	;INIT E FOR COMPARES
0717   1410 16 00       	MVI	D,0	;D=I=>WITHIN QUOTES, LEAVE BLANKS
0718   1412 AF          PK1:	XRA	A	;CLEAR A
0719   1413 BA          	CMP	D	;CHECK INPUT
0720   1414 7E          	MOV	A,M	;GET CHAR
0721   1415 C2 25 14    	JNZ	QSTRG	;WITHIN QUOTE STRING
0722   1418 BB          	CMP	E	;IS IT 1ST !?
0723   1419 C2 20 14    	JNZ	$+7	;NO - PROCEED
0724   141C 14          	INR	D	;YES	SET FLAG
0725   141D C3 2A 14    	JMP	QSTR1	;CONTINUE
0726   1420 FE A0       	CPI	240O	;IS IT A SPACE?
0727   1422 CA 2F 14    	JZ	PK2	;LEAVE OUT
0728   1425 BB          QSTRG:	CMP	E	;2ND "?
0729   1426 C2 2A 14    	JNZ	$+4	;NO - CONTINUE
0730   1429 15          	DCR	D	;RESET FLAG
0731   142A E3          QSTR1:	XTHL		;GET DESTINATION ADDRESS
0732   142B 77          	MOV	M,A	;SAVE
0733   142C 23          	INX	H	;BUMP PNTR.
0734   142D E3          	XTHL		;GET SOURCE ADD.
0735   142E 0C          	INR	C	;BUMP CHAR. CNT
0736   142F 23          PK2:	INX	H	;BUMP PNTR.
0737   1430 05          	DCR	B	;DCR INPUT LINE CHAF CNT
0738   1431 C2 12 14    	JNZ	PK1	;MORE - DO AGAIN
0739   1434 79          	MOV	A,C	;CHAR CNT TO A
0740   1435 E1          	POP	H	;RESTORE REG'S, RETURN
0741   1436 E1          	POP	H
0742   1437 D1          	POP	D
0743   1438 C9          	RET
0744   1439             
0745   1439             ;ROUTINES TO PAD MESSAGES TO OUTPUT BUFFER.
0746   1439             ;FOR12 PADS 'UNDERFLOW'
0747   1439             ;FOR11 PADS 'OVERFLOW'
0748   1439             ;FOR10 PADS 'ZERODIVIDE'
0749   1439             ;FORM9 PADS 'INPUT ERROR, TRY AGAIN'
0750   1439             ;FORM8 PADS 'MEMORY FULL'
0751   1439             ;FORM7 PADS 'WHAT?'
0752   1439             ;FORM4 PADS 'IN LINE'
0753   1439             ;FORM3 PADS 'ERROR'
0754   1439             ;FORM2 PADS 'TURN ON PUNCH'
0755   1439             ;FORM1 PADS 'READY'
0756   1439             ;FORM5 PADS SOURCE LINE, PASSED ADDRESS OF
0757   1439             ;LENGTH OF LINE IN HL REGS.
0758   1439             ;FORM6 PADS CHAR STRING, PASSED ADD OF FIRST CHAR IN
0759   1439             ;HL, LENGTH OF STRING IN REG C	;END OF PAGE 23
0760   1439             
0761   1439 2C          FOR12:	INR	L
0762   143A 2C          FOR11:	INR	L
0763   143B 2C          FOR10:	INR	L
0764   143C 2C          FORM9:	INR	L
0765   143D 2C          FORM8:	INR	L
0766   143E 2C          FORM7:	INR	L
0767   143F 2C          FORM4:	INR	L
0768   1440 2C          FORM3:	INR	L
0769   1441 2C          FORM2:	INR	L
0770   1442 6E          FORM1:	MOV	L,M
0771   1443 4E          FORM5:	MOV	C,M
0772   1444 79          	MOV	A,C
0773   1445 FE 00       	CPI	0
0774   1447 C8          	RZ
0775   1448 23          F1:	INX	H
0776   1449 7E          FORM6:	MOV	A,M
0777   144A 06 01       	MVI	B,1
0778   144C CD AD 12    	CALL	PAD
0779   144F 0D          	DCR	C
0780   1450 C2 48 14    	JNZ	F1
0781   1453 C9          	RET
0782   1454             
0783   1454             ;**************************************************************
0784   1454             ;THE CODE FROM HERE TO THE NEXT LINE OF *'S MUST BE ON ONE PAGE
0785   1454 5E          ODATA:	.DB	ODAT1 & 377O
0786   1455 64          	.DB	ODAT2 & 377O
0787   1456 72          	.DB	ODAT3 & 377O
0788   1457 7A          	.DB	ODAT4 & 377O
0789   1458 84          	.DB	ODAT5 & 377O
0790   1459 8A          	.DB	ODAT6 & 377O
0791   145A 99          	.DB	ODAT7 & 377O
0792   145B B0          	.DB	ODAT8 & 377O
0793   145C BB          	.DB	ODAT9 & 377O
0794   145D C4          	.DB	ODA10 & 377O
0795   145E             
0796   145E 055245414459ODAT1:	.DB	5,"READY"
0797   1464 0D5455524E20ODAT2:	.DB	13,"TURN ON PUNCH"
0797   146A 4F4E2050554E4348
0798   1472 088D8A455252ODAT3:	.DB	8,215O,212O,"ERROR"
0798   1478 4F52
0799   147A 0920494E2D4CODAT4:	.DB	9," IN-LINE "
0799   1480 494E4520
0800   1484 05574841543FODAT5:	.DB	5,"WHAT?"
0801   148A 0E4D454D4F52ODAT6:	.DB	14,"MEMORY FULL",215O,212O,"?"
0801   1490 592046554C4C8D8A3F
0802   1499 16494E505554ODAT7:	.DB	22,"INPUT ERROR, TRY AGAIN"
0802   149F 204552524F522C2054525920414741494E
0803   14B0 0A494E444546ODAT8:	.DB	10,"INDEFINITE"
0803   14B6 494E495445
0804   14BB 084F56455246ODAT9:	.DB	8,"OVERFLOW"
0804   14C1 4C4F57
0805   14C4 09554E444552ODA10:	.DB	9,"UNDERFLOW"
0805   14CA 464C4F57
0806   14CE             
0807   14CE             ;***************************************************
0808   14CE             ;ROUTINE TO INPUT SOURCE LINE FROM HSR. PASSED ADD
0809   14CE             ;OF FIRST CHAR IN HL. RETURNS LENGTH OF LINE IN REG A
0810   14CE E5          HSRIN:	PUSH	H
0811   14CF 06 00       	MVI	B,0
0812   14D1 C3 D7 14    	JMP 	PIN1A
0813   14D4 CD 01 15    PIN1:	CALL 	CHAR5
0814   14D7 FE 99       PIN1A:	CPI	231O	;CNTRL Y?
0815   14D9 CA FF 13    	JZ	TIN5A
0816   14DC FE FF       	CPI	377O
0817   14DE CA F9 14    	JZ	PIN3
0818   14E1 FE DF       	CPI	337O
0819   14E3 CA F9 14    	JZ	PIN3
0820   14E6 FE 8A       	CPI	212O
0821   14E8 CA 05 14    	JZ	TIN4A
0822   14EB FE 8D       	CPI	215O
0823   14ED CA D4 14    	JZ	PIN1
0824   14F0 77          	MOV	M,A
0825   14F1 23          	INX	H
0826   14F2 04          	INR	B
0827   14F3 CD 0D 15    	CALL	MEMFUL
0828   14F6 C3 D4 14    	JMP	PIN1
0829   14F9 2B          PIN3:	DCX	H
0830   14FA 05          	DCR	B
0831   14FB F2 D4 14    	JP	PIN1
0832   14FE E1          	POP	H
0833   14FF AF          	XRA	A	;ZERO A
0834   1500 C9          	RET		; END OF PAGE 24
0835   1501             	
0836   1501             ;ROUTINE TO INPUT CHAR FROM HSR
0837   1501 C5          CHAR5:	PUSH	B
0838   1502 06 04       	MVI	B,4
0839   1504 D3 05       	OUT	5
0840   1506 CD F4 0F    	CALL	MCHK
0841   1509 DB 05       	IN	5
0842   150B C1          	POP	B
0843   150C C9          	RET
0844   150D             
0845   150D             ;ROUTINE TO INSURE SOURCE DOES NOT OVERFLOW MEM SPACE
0846   150D             ;COMPARES CURENT MEM ADDRESS TO SP.
0847   150D C5          MEMFUL:	PUSH	B
0848   150E D5          	PUSH	D
0849   150F E5          	PUSH	H
0850   1510 3E 32       	MVI	A,50
0851   1512 85          	ADD	L
0852   1513 47          	MOV	B,A
0853   1514 3E 00       	MVI	A,0
0854   1516 8C          	ADC	H
0855   1517 4F          	MOV	C,A
0856   1518 21 00 00    	LXI	H,0
0857   151B 39          	DAD	SP
0858   151C 55          	MOV	D,L
0859   151D 5C          	MOV	E,H
0860   151E CD F1 0F    	CALL	DCOMP
0861   1521 E1          	POP	H
0862   1522 D1          	POP	D
0863   1523 C1          	POP	B
0864   1524 D0          	RNC
0865   1525 21 54 14    	LXI	H,ODATA
0866   1528 CD 3D 14    	CALL	FORM8
0867   152B CD D0 12    	CALL	WRIT
0868   152E CD F7 0F    	CALL	CHAR2
0869   1531 CD AD 12    	CALL	PAD
0870   1534 CD D0 12    	CALL 	WRIT
0871   1537 DE B0       	SBI	260O
0872   1539 FE 04       	CPI	4
0873   153B CC 9E 11    	CZ	WHAT
0874   153E 31 FF 3F    	LXI	SP,MEMEND
0875   1541 0E 01       	MVI	C,1
0876   1543 C3 47 10    	JMP	M4A
0877   1546             
0878   1546             ; ROUTINE TO EVALUATE BOUNDS FOR LIST AND PLIST
0879   1546             ; COMMANDS. RETURNS PLINE AS FIRST LINE, KLINE
0880   1546             ; AS LAST LINE TO BE LISTED.
0881   1546 2A 4B 30    BOUND:	LHLD	NLINE
0882   1549 3E 09       	MVI	A,9
0883   154B 85          	ADD	L
0884   154C 6F          	MOV	L,A
0885   154D 3E 00       	MVI	A,0
0886   154F 8C          	ADC	H
0887   1550 67          	MOV	H,A
0888   1551 E5          	PUSH	H
0889   1552 CD 14 12    	CALL	NUMB
0890   1555 D4 9E 11    	CNC	WHAT
0891   1558 CD 2A 12    	CALL	CVB
0892   155B F5          	PUSH	PSW
0893   155C C5          	PUSH	B
0894   155D CD 9C 15    	CALL	BND2
0895   1560 C1          	POP	B
0896   1561 2B          	DCX	H
0897   1562 22 59 30    	SHLD 	PLINE
0898   1565 F1          BND1:	POP	PSW
0899   1566 E1          	POP	H
0900   1567 3C          	INR	A
0901   1568 85          	ADD	L
0902   1569 6F          	MOV	L,A
0903   156A 3E 00       	MVI	A,0
0904   156C 8C          	ADC	H
0905   156D 67          	MOV	H,A
0906   156E 3E 00       	MVI	A,0
0907   1570 B9          	CMP	C
0908   1571 C8          	RZ
0909   1572 0D          	DCR	C
0910   1573 CD 14 12    	CALL	NUMB
0911   1576 D4 9E 11    	CNC	WHAT
0912   1579 D5          	PUSH	D
0913   157A CD 2A 12    	CALL	CVB
0914   157D D5          	PUSH	D
0915   157E C5          	PUSH 	B
0916   157F CD 9C 15    	CALL	BND2
0917   1582 C1          	POP	B
0918   1583 23          	INX	H
0919   1584 56          	MOV	D,M
0920   1585 23          	INX	H
0921   1586 5E          	MOV	E,M
0922   1587 EB          	XCHG
0923   1588 22 52 30    	SHLD 	KLINE
0924   158B D1          	POP	D
0925   158C E1          	POP	H
0926   158D 79          	MOV	A,C
0927   158E FE 00       	CPI	0
0928   1590 C2 9E 11    	JNZ	WHAT
0929   1593 44          	MOV	B,H
0930   1594 4D          	MOV	C,L	; END OF PAGE 25
0931   1595 CD F1 0F    	CALL	DCOMP
0932   1598 D0          	RNC
0933   1599 C3 9E 11    	JMP	WHAT
0934   159C 2A 49 30    BND2:	LHLD	STLINE
0935   159F 46          BND3:	MOV	B,M
0936   15A0 23          	INX	H
0937   15A1 4E          	MOV	C,M
0938   15A2 CD F1 0F    	CALL	DCOMP
0939   15A5 D8          	RC
0940   15A6 C8          	RZ
0941   15A7 E5          	PUSH 	H
0942   15A8 23          	INX	H
0943   15A9 7E          	MOV	A,M
0944   15AA 23          	INX	H
0945   15AB 66          	MOV	H,M
0946   15AC 6F          	MOV	L,A
0947   15AD CD A3 12    	CALL	CHK1
0948   15B0 C1          	POP	B
0949   15B1 D2 9F 15    	JNC	BND3
0950   15B4 C5          	PUSH	B
0951   15B5 E1          	POP	H
0952   15B6 C9          	RET
0953   15B7             
0954   15B7             ;ROUIINE TO OUTPUT ERROR MSG. TO USER.
0955   15B7             ;REG A CONTAINS BCD ERROR NUMBER, HL
0956   15B7             ;LOADED WITH VALUE OF KLINE.
0957   15B7 21 13 10    ERROR:	LXI	H,M1A	;RETURN ADDRESS
0958   15BA E5          	PUSH	H	;PUT ON STACK
0959   15BB 21 54 14    	LXI	H,ODATA	;OUTPUT BUFFER DATA TABLES
0960   15BE E5          	PUSH	H
0961   15BF 57          	MOV	D,A	;SAVE ERROR NUMB. IN D
0962   15C0 CD 40 14    	CALL	FORM3	;PAD 'ERROR '
0963   15C3 06 01       	MVI	B,1	;INIT FOR PADS
0964   15C5 48          	MOV	C,B	;INIT AS CNTR.
0965   15C6 7A          	MOV	A,D	;GET ERROR NUMB.
0966   15C7 07          	RLC		;ROTATE HIGH 4 BITS TO LOW 4
0967   15C8 07          	RLC
0968   15C9 07          	RLC
0969   15CA 07          	RLC
0970   15CB E6 0F       ERRR1:	ANI	17O	;MASK	
0971   15CD C6 B0       	ADI	260O	;CONVERT TO ASCII
0972   15CF CD AD 12    	CALL	PAD	;PAD IT
0973   15D2 7A          	MOV	A,D	;GET ERROR NUMB
0974   15D3 0D          	DCR	C	;ANOTHER PASS?
0975   15D4 F2 CB 15    	JP	ERRR1	;YES
0976   15D7 E1          	POP	H	;NO-CONTINUE
0977   15D8 CD 3F 14    ERLN:	CALL	FORM4
0978   15DB 2A 52 30    	LHLD 	KLINE
0979   15DE 23          	INX	H
0980   15DF 23          	INX	H
0981   15E0 23          	INX	H
0982   15E1 23          	INX	H
0983   15E2 4E          	MOV	C,M
0984   15E3 23          	INX	H
0985   15E4 CD 71 12    	CALL	LENGTH
0986   15E7 4F          	MOV	C,A
0987   15E8 CD 49 14    	CALL	FORM6
0988   15EB CD D0 12    	CALL	WRIT
0989   15EE C9          	RET
0990   15EF             
0991   15EF             ;THIS ROUTINE INCREMENTS H AND L AND
0992   15EF             ;DECR. C(CHARS IN LINE) SHOULD C RESULT
0993   15EF             ;IN 0 THEN THE ERROR CORRES. TO ENTRY PNT.
0994   15EF             ;IS GIVEN
0995   15EF 3E 07       ICP7:	MVI	A,7
0996   15F1 C3 00 16    	JMP	INCPT
0997   15F4 3E 08       ICP8:	MVI	A,8
0998   15F6 C3 00 16    	JMP	INCPT
0999   15F9 3E 04       ICP4:	MVI	A,4
1000   15FB C3 00 16    	JMP	INCPT
1001   15FE 3E 02       ICP2:	MVI	A,2
1002   1600             INCPT:
1003   1600             	INX	M
llbasic.asm line 1003: unrecognized argument.             (M)
1004   1600 0D          	DCR	C
1005   1601 C0          	RNZ
1006   1602 C3 B7 15    	JMP 	ERROR
1007   1605             
1008   1605             ;FSYM FINDS SYMBOLS IN TABLE
1009   1605             ;B C CONTAIN SYMBOL
1010   1605             ;RET WITH B,C,D,E SAME
1011   1605             ;H AND L PNT TO VALUE (1ST BYTE)
1012   1605             ;CY=1  =@ FOUND
1013   1605             ;CY=0  AND A SCALAR VAR. =@ INSERTED
1014   1605             ;   AND SET TO 0
1015   1605             ;CY=0  AND AN ARRAY  =@ NO ACTION,
1016   1605             ;   H AND L PNT TO LAST ENTRY IN SYMBOL TABLE
1017   1605 D5          FSYM:	PUSH 	D
1018   1606 AF          	XRA	A
1019   1607 B0          	ORA	B	;SET CARRY IF NOT
1020   1608 CA 0C 16    	JZ	AR	;AN ARRAY AND SAVE
1021   160B 3F          	CMC
1022   160C F5          AR:	PUSH	PSW
1023   160D 2A 59 30    	LHLD	NXTSP	;GET NEXT AVAILABLE
1024   1610 C5          	PUSH	B	;SPACE PNTR.
1025   1611 44          	MOV	B,H
1026   1612 4D          	MOV	C,L	;CHECK TO SEE
1027   1613 2A 4B 30    	LHLD	STSPAC	;IF SYMBOL TABLE
1028   1616             			;EMPTY
1029   1616             			; END OF PAGE 26
1030   1616 54          	MOV	D,H
1031   1617 5D          	MOV	E,L
1032   1618 CD F1 0F    	CALL	DCOMP	;DOUBLE BYTE COMPARE
1033   161B C1          	POP	B	;GET VAR. BACK
1034   161C CA 3C 16    	JZ	NOSYM
1035   161F CD A3 12    LUKON:	CALL	CHK1	;CHECK FOR END
1036   1622 DA 3E 16    	JC	NOENT
1037   1625 54          	MOV	D,H	;SAVE OLD PNTR
1038   1626 5D          	MOV	E,L
1039   1627 78          	MOV	A,B
1040   1628 BE          	CMP	M	;DO VARIABLES MATCH
1041   1629 C2 33 16    	JNZ	NOMAT
1042   162C 23          	INX	H
1043   162D 79          	MOV	A,C
1044   162E BE          	CMP	M
1045   162F CA 6C 16    	JZ	ENTRY
1046   1632 2B          	DCX	H
1047   1633 23          NOMAT:	INX	H	;NO MATCH GET NEW PNT.
1048   1634 23          	INX	H
1049   1635 7E          	MOV	A,M
1050   1636 23          	INX	H
1051   1637 66          	MOV	H,M
1052   1638 6F          	MOV	L,A
1053   1639 C3 1F 16    	JMP	LUKON
1054   163C             ;ARRIVE HERE IF SYMBOL TABLE IS EMPTY
1055   163C 1B          NOSYM:	DCX	D	; =STSPAC-2 SO STPNT WORKS RIGHT
1056   163D 1B          	DCX	D
1057   163E             
1058   163E             ;ARRIVE HERE WHEN NO ENTRY FOUND
1059   163E 2A 59 30    NOENT:	LHLD	NXTSP	;ADD. OF FREE MEMORY
1060   1641 EB          	XCHG		;TO DE, HL HAVE LAST SYM.TAB. ENTRY
1061   1642 F1          	POP	PSW	;ARRAY?
1062   1643 D2 71 16    	JNC	FBAC	;YES, RETURN
1063   1646 CD A8 1F    	CALL	CHKLC	;CHECK FOR PAGE BOUNDARY CROSSING
1064   1649 CD 8B 11    	CALL	STPNT	;UPDATE PNTR
1065   164C EB          	XCHG		;NXTSP TO HL
1066   164D 70          	MOV	M,B	;STORE VAR.
1067   164E 23          	INX	H
1068   164F 71          	MOV	M,C
1069   1650 23          	INX	H
1070   1651 E5          	PUSH	H
1071   1652 23          	INX	H	;STORE NXTSP+8 IN NXTSP
1072   1653 23          	INX	H
1073   1654 23          	INX	H
1074   1655 23          	INX	H
1075   1656 23          	INX	H
1076   1657 23          	INX	H
1077   1658 22 59 30    	SHLD	NXTSP
1078   165B CD 0D 15    	CALL	MEMFUL	;MEMORY FULL?
1079   165E E1          	POP	H	;SET FWD PNT. TO -1
1080   165F 36 FF       	MVI	M,377O
1081   1661 23          	INX	H
1082   1662 36 FF       	MVI	M,377O
1083   1664 23          	INX	H	;INIT TO FLT. PNT. 0
1084   1665 CD CD 0F    	CALL	ZROL
1085   1668 B7          	ORA	A	;CLEAR CY
1086   1669 C3 71 16    	JMP	FBAC	;RESET CARRY AND RETURN
1087   166C F1          ENTRY:	POP	PSW	;VAR FOUND
1088   166D 23          	INX	H	;MOVE PNT. TO FIRST BYTE
1089   166E 23          	INX	H	;OF FLT. PNT. NO.
1090   166F 23          	INX	H
1091   1670 37          	STC		;SET CY AND RET.
1092   1671 D1          FBAC:	POP	D	;RESTORE D 
1093   1672 C9          	RET
1094   1673             
1095   1673             ;
1096   1673             ;
1097   1673             ; RUN - THE INTERPRETER
1098   1673             ;
1099   1673             ;
1100   1673             ;INIT NXTSP
1101   1673 2A 4B 30    RUN:	LHLD	STSPAC
1102   1676 EB          	XCHG
1103   1677 CD B9 1F    	CALL	CKDIM	;ADJUST START OF SYMBOL TABLE SO
1104   167A             			;IT STARTS ON AN EVEN 4 WORD BOUNDARY
1105   167A CD A8 1F    	CALL	CHKLC	;ADJUST START OF SYMBOL TABLE SO IT
1106   167D EB          	XCHG		;DOES NOT CROSS PAGE BOUNDARY
1107   167E 22 4B 30    	SHLD	STSPAC
1108   1681 22 59 30    	SHLD	NXTSP
1109   1684 21 C2 30    	LXI	H,BOTNS	;INIT SP FOR NESTING STACK
1110   1687 22 94 30    	SHLD	NEST
1111   168A 21 13 10    	LXI	H,M1A	;PRECAUTION, IN CASE RETURN IS
1112   168D E5          	PUSH	H	;EXECUTED BEFORE A GOSUB
1113   168E E5          	PUSH	H
1114   168F 2A 49 30    	LHLD	STLINE	;START OF SOURCE
1115   1692 CD 08 12    ILOOP:	CALL	QUITT	;CHECK FOR INTERRUPTION
1116   1695 CD A3 12    	CALL	CHK1	;HL=-1 =@ NO MORE SOURCE
1117   1698 D2 A0 16    	JNC	SORCE
1118   169B 3E 01       	MVI	A,1
1119   169D C3 B7 15    	JMP	ERROR	;ERROR 1, NO END STMT.
1120   16A0 22 52 30    SORCE:	SHLD	LPNT
1121   16A3 E5          	PUSH	H
1122   16A4 21 52 30    	LXI	H,LPNT	;DEFINE VALUES OF
1123   16A7 CD EE 0F    	CALL	PTVAL	;KBIN,KFPNT,KLEN
1124   16AA 3A 58 30    	LDA	KLEN	;CHAR'S IN LINE TO C
1125   16AD             			; END OF PAGE 27
1126   16AD 4F          	MOV	C,A
1127   16AE 0C          	INR	C
1128   16AF E1          	POP	H	;MOVE PNTR. TO 1ST CHAR
1129   16B0 23          	INX	H	;IN SOURCE REC.
1130   16B1 23          	INX	H
1131   16B2 23          	INX	H
1132   16B3 23          	INX	H
1133   16B4 CD FE 15    L1:	CALL	ICP2	;INCR. H L DCR C
1134   16B7 CD 22 12    	CALL	ALPHA	;FIND FAST LETTER
1135   16BA D2 B4 16    	JNC	L1
1136   16BD AF          	XRA	A
1137   16BE 3C          	INR	A	;LETTER FOUND
1138   16BF CD F4 12    	CALL	SYMSRT	;DETERMINE KEYWORD
1139   16C2 FE FF       	CPI	377O
1140   16C4 C2 CC 16    	JNZ	GKEY
1141   16C7 3E 02       	MVI	A,2	;BAD KEYWORD
1142   16C9 C3 B7 15    	JMP	ERROR
1143   16CC 22 5B 30    GKEY:	SHLD	CPNT
1144   16CF 21 DC 16    	LXI	H,JTBL	;LOAD JUMP TABLE PNTR.
1145   16D2 87          	ADD	A	;DOUBLE A
1146   16D3 5F          	MOV	E,A
1147   16D4 16 00       	MVI	D,0
1148   16D6 19          	DAD	D	;PNT. TO PROPER PROC.
1149   16D7 7E          	MOV	A,M	;ADD. IN JUMP TABLE
1150   16D8 23          	INX	H	;GET PROC. ADD.
1151   16D9 66          	MOV	H,M
1152   16DA 6F          	MOV	L,A
1153   16DB E9          	PCHL		;INDIRECT JUMP TO PROC.
1154   16DC EB 1B       JTBL:	.DW	LET	;JMP TABLE
1155   16DE A3 1A       	.DW	PRI
1156   16E0 9A 1B       	.DW	IEND	;REM STMT. - NO ACTION
1157   16E2 13 10       	.DW	M1A	;STOP STMT.-RETURN TO EDIT MODE
1158   16E4 F8 16       	.DW	ENDD
1159   16E6 06 17       	.DW	GOTO
1160   16E8 8B 1C       	.DW	IFRT
1161   16EA 5A 1B       	.DW	INPUT
1162   16EC 26 17       	.DW	DIM
llbasic.asm line 1163: Label not found: (CALLP)
llbasic.asm line 1163: Label not found: (CALLP)
1163   16EE 00 00       	.DW	CALLP
1164   16F0 DE 1D       	.DW	GOSUB
1165   16F2 F3 1D       	.DW	RETRN
1166   16F4 F5 1D       	.DW	FOR
1167   16F6 E7 1E       	.DW	NEXT
1168   16F8 2A 56 30    ENDD:	LHLD	KFPNT	;CHECK TO SEE IF MORE
1169   16FB CD A3 12    	CALL	CHK1	;SOURCE AFTER END
1170   16FE DA 13 10    	JC	M1A
1171   1701 3E 03       	MVI	A,3	;MORE SOURCE ERROR 3
1172   1703 C3 B7 15    	JMP	ERROR
1173   1706 2A 5B 30    GOTO:	LHLD	CPNT	;GOTO STMT. PROC,
1174   1709 23          GSENT:	INX	H	;INCREMENT PAST KEYWORD
1175   170A 23          	INX	H
1176   170B 23          	INX	H
1177   170C CD F9 15    	CALL	ICP4	;POSSIBLE ERROR 4
1178   170F CD 2A 12    GTRA:	CALL	CVB	;GET DESTINATION
1179   1712 B7          	ORA	A	;MAKE SURE IT WAS OK
1180   1713 C2 1B 17    	JNZ	OKN
1181   1716 3E 04       	MVI	A,4
1182   1718 C3 B7 15    	JMP	ERROR
1183   171B CD 88 12    OKN:	CALL	NSRCH	;GET NEXT LPNT
1184   171E D2 92 16    	JNC	ILOOP	;MAKE SURE IT EXISTED
1185   1721 3E 05       	MVI	A,5
1186   1723 C3 B7 15    	JMP	ERROR	;NON-EXISTENT
1187   1726 2A 5B 30    DIM:	LHLD	CPNT	;DIM STMT. PROC.
1188   1729 23          	INX	H	;PNT TO FIRST VAR.
1189   172A 23          	INX	H
1190   172B 23          	INX	H
1191   172C CD 22 12    DLOOP:	CALL	ALPHA	;CHECK IF IT IS A VAR.
1192   172F DA 37 17    	JC	OKLET
1193   1732 3E 06       ER6:	MVI	A,6	;ERROR 6
1194   1734 C3 B7 15    	JMP	ERROR
1195   1737 46          OKLET:	MOV	B,M
1196   1738 CD EF 15    	CALL	ICP7	;INCR.CPNT
1197   173B 3E A8       	MVI	A,250O	;CHECK FOR (
1198   173D BE          	CMP	M
1199   173E C2 32 17    	JNZ	ER6
1200   1741 CD EF 15    	CALL	ICP7	;INCR. CPNT
1201   1744 CD 2A 12    	CALL	CVB	;CCNV. TO BIN NO.
1202   1747 85          	ADD	L	;UPDATE CPNT
1203   1748 6F          	MOV	L,A	;ED CONTAIN ARRAY LEN.
1204   1749 3E 00       	MVI	A,0
1205   174B 8C          	ADC	H	;C CONT. NO. CHARS LEFT
1206   174C 67          	MOV	H,A	;IN LINE
1207   174D 3E A9       	MVI	A,251O	;CHECK FOR
1208   174F BE          	CMP	M
1209   1750 C2 32 17    	JNZ	ER6
1210   1753 E5          	PUSH	H
1211   1754 C5          	PUSH	B	;SAVE B,C,H,L
1212   1755 48          	MOV	C,B	;SET UP OR CALL TO FSYM
1213   1756 06 00       	MVI	B,0
1214   1758 CD 05 16    	CALL	FSYM
1215   175B D2 65 17    	JNC	NDOU
1216   175E C1          	POP	B
1217   175F E1          	POP 	H
1218   1760 3E 11       	MVI	A,11H	;ERROR 11
1219   1762             			; END OF PAGE 28
1220   1762 C3 B7 15    	JMP	ERROR
1221   1765 D5          NDOU:	PUSH	D	; (COMMENTS MISSING)
1222   1766 EB          	XCHG 
1223   1767 2A 59 30    	LHLD	NXTSP 
1224   176A EB          	XCHG
1225   176B CD B9 1F    	CALL	CKDIM
1226   176E CD 8B 11    	CALL	STPNT
1227   1771 EB          	XCHG
1228   1772 D1          	POP	D
1229   1773 36 00       	MVI	M,0
1230   1775 23          	INX	H
1231   1776 71          	MOV	M,C
1232   1777 23          	INX	H
1233   1778 36 FF       	MVI	M,377O	;FPNT TO -1
1234   177A 23          	INX	H
1235   177B 36 FF       	MVI	M,377O
1236   177D 23          	INX	H
1237   177E 7A          	MOV	A,D
1238   177F 2F          	CMA
1239   1780 4F          	MOV	C,A
1240   1781 7B          	MOV	A,E
1241   1782 2F          	CMA
1242   1783 47          	MOV	B,A
1243   1784 CD CD 0F    CONT:	CALL	ZROL	;ZERO OUT ELEMENTS
1244   1787 23          	INX	H	;OF ARRAY
1245   1788 23          	INX	H
1246   1789 23          	INX	H
1247   178A 23          	INX	H
1248   178B 03          	INX	B
1249   178C E5          	PUSH	H
1250   178D CD 0D 15    	CALL	MEMFUL	;MEMORY FULL?
1251   1790 60          	MOV	H,B
1252   1791 69          	MOV	L,C
1253   1792 CD A3 12    	CALL	CHK1
1254   1795 E1          	POP	H
1255   1796 D2 84 17    	JNC	CONT
1256   1799 22 59 30    	SHLD	NXTSP	;NEW VAL
1257   179C C1          	POP	B	;RESTORE
1258   179D E1          	POP	H
1259   179E 23          	INX	H
1260   179F 0D          	DCR	C
1261   17A0 CA 9A 1B    	JZ	IEND
1262   17A3 0D          	DCR	C
1263   17A4 CA 32 17    	JZ	ER6
1264   17A7 3E AC       	MVI	A,254O	;NEXT ELEMENT A
1265   17A9 BE          	CMP	M
1266   17AA 23          	INX	H
1267   17AB CA 2C 17    	JZ	DLOOP
1268   17AE C3 32 17    	JMP	ER6
1269   17B1             
1270   17B1             ;ROUTINE TO COPY CONTENTS PNTED TO
1271   17B1             ;BY DE TO LOCATION H,L
1272   17B1 F5          COPDH:	PUSH	PSW	;SAVE REGISTERS
1273   17B2 C5          	PUSH	B
1274   17B3 D5          	PUSH	D
1275   17B4 E5          	PUSH	H
1276   17B5 06 04       	MVI	B,4	;COUNT
1277   17B7 1A          COPD1:	LDAX	D	;GET FROM SOURCE
1278   17B8 77          	MOV	M,A	;PUT TO DESTINATION
1279   17B9 13          	INX	D	;BUMP PNTRS, CNT
1280   17BA 23          	INX	H
1281   17BB 05          	DCR	B
1282   17BC C2 B7 17    	JNZ	COPD1
1283   17BF E1          	POP	H	;RESTORE REGIS
1284   17C0 D1          	POP	D
1285   17C1 C1          	POP	B
1286   17C2 F1          	POP	PSW
1287   17C3 C9          	RET
1288   17C4             
1289   17C4             ;OUTR PADS OUTPUT FROM CONV INTO
1290   17C4             ;OUTPUT BUFFER USING ROUTINE PAD
1291   17C4             ;ALL REG'S MAINTAINED
1292   17C4 C5          OUTR:	PUSH	B	;SAVE REG B
1293   17C5 06 01       	MVI	B,1	;PAD ONCE
1294   17C7 CD AD 12    	CALL	PAD	;DO IT
1295   17CA C1          	POP	B	;RESTORE B AND RET
1296   17CB C9          	RET
1297   17CC             
1298   17CC             ;VALUE RETURNS IN D(H) E(L) PNTR.
1299   17CC             ;TO THE VALUE OF A TOKEN
1300   17CC             ;C,H,L ARE UPDATED
1301   17CC             ;A,B ARE DESTROYED
1302   17CC CD 7B 18    VALUE:	CALL	VAR	;IS ITA VARIABLE?
1303   17CF D8          	RC		;YES	DONE
1304   17D0 3E 03       	MVI	A,3	;NO CALL A FUNC
1305   17D2 CD F4 12    	CALL	SYMSRT
1306   17D5 FE FF       	CPI	377O
1307   17D7 CA 44 18    	JZ	KONT	;NOT	A FUNCTION -
1308   17DA FE 01       	CPI	1	;WAS	IT PUT(--)?
1309   17DC C2 E2 17    	JNZ	GET	;NO - OK
1310   17DF C3 86 1C    	JMP	ER10	;ILLEGAL USE OF FUNCTION
1311   17E2 23          GET:	INX	H	;OK, IT'S GET(--)
1312   17E3 23          	INX	H	;UPDATE H,L
1313   17E4 23          	INX	H
1314   17E5 79          	MOV	A,C	;CHECK FOR PREMANENT EOL
1315   17E6 B7          	ORA 	A	; END OF PAGE 29
1316   17E7 CA 30 1A    	JZ	ER8
1317   17EA 3E A8       	MVI	A,250O	;CHEK FOR (
1318   17EC BE          	CMP	M
1319   17ED C2 30 1A    	JNZ	ER8
1320   17F0 CD F4 15    	CALL	ICP8	;BUMP PNTR'S
1321   17F3 CD D5 19    	CALL	EVAL	;GET PORT =
1322   17F6 E5          	PUSH	H	;SAVE REG H,L
1323   17F7 21 7C 30    	LXI	H,FREG1
1324   17FA CD B1 17    	CALL	COPDH	;COPY IT
1325   17FD EB          	XCHG	
1326   17FE E1          	POP	H	;RESTORE H,L
1327   17FF CD 23 19    	CALL	FIX	;FIX IT
1328   1802 13          	INX	D
1329   1803 13          	INX	D	;GET LOWEST BYTE TO
1330   1804 13          	INX	D	;REG D
1331   1805 1A          	LDAX	D
1332   1806 57          	MOV 	D,A
1333   1807 79          	MOV	A,C	;EOL?
1334   1808 B7          	ORA	A
1335   1809 CA 30 1A    	JZ	ER8
1336   180C 3E A9       	MVI	A,251O	;CHECK FOR )
1337   180E BE          	CMP	M
1338   180F C2 30 1A    	JNZ	ER8
1339   1812 23          	INX	H	;BUMP PNTR'S
1340   1813 0D          	DCR	C
1341   1814 E5          	PUSH	H	;SAVE H,L,B,C
1342   1815 C5          	PUSH	B	;STORE PROGRAM SEGMENT
1343   1816 01 77 30    	LXI	B,GREG	;IN RAM START AT GREG
1344   1819 21 3F 18    	LXI	H,RINST	;ADD. OF INST'S
1345   181C 1E 05       	MVI	E,5	;NUMB. OF BYTES
1346   181E 7E          V1:	MOV	A,M	;GET BYTE
1347   181F 02          	STAX	B	;STORE IN RAM
1348   1820 23          	INX	H
1349   1821 03          	INX	B
1350   1822 1D          	DCR	E	;BUMP PNTR'S,DCR CNT
1351   1823 C2 1E 18    	JNZ	V1
1352   1826 21 78 30    	LXI	H,GREG+1	;STORE PORT =
1353   1829 72          	MOV	M,D	;IN RAM
1354   182A C3 77 30    	JMP	GREG	;OK - TRANSFER
1355   182D 21 79 30    HOME:	LXI	H,GREG+2	;SET UP FOR FLOAT
1356   1830 77          	MOV	M,A	;STORE AWAY INPUT
1357   1831 2B          	DCX	H
1358   1832 AF          	XRA	A	;ZERO OUT HIGHER BYTES
1359   1833 77          	MOV	M,A	;BUT CHAR. DOESN'T MATTER
1360   1834 2B          	DCX	H
1361   1835 77          	MOV	M,A
1362   1836 CD DC 0F    	CALL	DFXL	;FLOAT IT
1363   1839 11 77 30    	LXI	D,GREG	;FIX D,E RESTORE C,H,L
1364   183C C1          	POP	b
1365   183D E1          	POP	H
1366   183E C9          	RET
1367   183F DB 00       RINST:	IN	0	;RAM INSTRUCTIONS
1368   1841 C3 2D 18    	JMP	HOME
1369   1844 CD 14 12    KONT:	CALL	NUMB	;NUMBER
1370   1847 DA 50 18    	JC	OKK
1371   184A 3E AE       	MVI	A,256O	;DEC; PNT.?
1372   184C BE          	CMP	M
1373   184D C2 30 1A    	JNZ	ER8
1374   1850 3E 01       OKK:	MVI	A,1	;MODE=1, IE INPUT FROM SOURCE
1375   1852 CD 5C 18    	CALL	RDKON	;READ CONSTANT TO GREG
1376   1855 DA 76 18    	JC	ER9	;IF ERROR THEN CY=1
1377   1858 11 77 30    	LXI	D,GREG	;PNTS. TO CONSTANT
1378   185B C9          	RET
1379   185C             
1380   185C             ;THIS ROUTINE READS A CONSTANT INTO GREG FROM ASCII
1381   185C             ;CHARCTERS POINTED TO BY HL AND C
1382   185C             ;ENTER WITH A=0 => DATA FROM TTY
1383   185C             ;ENTER WITH A=1 => DATA FROM SOURCE
1384   185C             ;TURN WITH CY=1 => ERROR IN CONVERSION
1385   185C 32 85 30    RDKON:	STA	MODE	;SAVE MODE FOR ROUT. INP
1386   185F 22 86 30    	SHLD	HLINP	;SAVE HL FOR ROUT. INP
1387   1862 79          	MOV	A,C
1388   1863 32 84 30    	STA	CREG	;SAVE C FOR ROUT. INP
1389   1866 21 77 30    	LXI	H,GREG	;WHERE VALUE WILL GO
1390   1869 0E 66       	MVI	C,SCR & 377O	;SET UP AND CALL FINPT
1391   186B CD E8 0F    	CALL	FINPT
1392   186E 2A 86 30    	LHLD	HLINP	;RESTORE H,L AND C
1393   1871 3A 84 30    	LDA	CREG
1394   1874 4F          	MOV	C,A
1395   1875 C9          	RET		;DONE
1396   1876 3E 09       ER9:	MVI	A,9
1397   1878 C3 B7 15    	JMP	ERROR
1398   187B             
1399   187B             ;VAR DECIDES WHETHER A TOKEN IS
1400   187B             ;A VARIABLE IF SO CY=1 AND
1401   187B             ;ADDRESS IS COMPUTED (SUBSCRIPT IS
1402   187B             ;EVALUATED ETC.) RETURNS WITH DE PNTING
1403   187B             ;TO VAR. REFERENCED H,L,C,UPDATED
1404   187B             ;A,B DESTROYED
1405   187B             ;IF NOT A VARIBLE CY=0
1406   187B             ;H,L,C ARE LEFT UNTOUCHED
1407   187B CD 22 12    VAR:	CALL	ALPHA	;1ST CHAR A LETTER?
1408   187E D0          	RNC		;NO-NOT VAR.
1409   187F 23          	INX	H	;BUMP PNTR'S
1410   1880 0D          	DCR 	C	; END OF PAGE 30
1411   1881 C2 8D 18    	JNZ	MORE	;MORE TO LINE
1412   1884 C5          SC1:	PUSH	B	;SAVE B,EOL
1413   1885 0E 00       	MVI	C,0	;SET FOR CALL TO FSYM
1414   1887 2B          	DCX	H	;GET SINGLE LETTER
1415   1888 46          	MOV	B,M	;VAR TO B
1416   1889 23          	INX	H
1417   188A C3 BF 18    	JMP	SCALR
1418   188D CD 22 12    MORE:	CALL	ALPHA	;2NO A LETTER?
1419   1890 D2 A2 18    	JNC	SFSG	;SO FAR SO GOOD
1420   1893 C5          	PUSH	B	;SAVE C
1421   1894 3E 02       	MVI	A,2	;CHECK FOR DELIMITER
1422   1896 CD F4 12    	CALL 	SYMSRT
1423   1899 C1          	POP	B	;RESTORE C
1424   189A 3C          	INR	A	;FOUND?
1425   189B C2 84 18    	JNZ	SC1	;YES
1426   189E 0C          BUPT:	INR	C	;NOT A VAR.
1427   189F 2B          	DCX	H	;BACK UP PNTR'S
1428   18A0 B7          	ORA	A	;CY=0 AND RET
1429   18A1 C9          	RET
1430   18A2             
1431   18A2 CD 14 12    SFSG:	CALL	NUMB	;TEST FOR NUMBER
1432   18A5 D2 C7 18    	JNC	ARCK	;MAYBE AN ARRAY
1433   18A8 23          	INX	H	;ITS A SCALAR
1434   18A9 0D          	DCR	C	;BUMP PNTR'S
1435   18AA CA B8 18    	JZ	SLOAD	;EOL
1436   18AD C5          	PUSH	B	;SAVE C
1437   18AE 3E 02       	MVI	A,2	;SET UP FOR SYMSRT
1438   18B0 CD F4 12    	CALL	SYMSRT	;TEST FOR LEGAL
1439   18B3 C1          	POP	B	;GET C BACK
1440   18B4 3C          	INR	A	;DELIMITER FOUND?
1441   18B5 CA 30 1A    	JZ	ER8	;NO, ERROR
1442   18B8 2B          SLOAD:	DCX	H	;MOVE BACK
1443   18B9 C5          	PUSH	B	;SAVE C
1444   18BA 4E          	MOV	C,M	;GET VAR. INTO
1445   18BB 2B          	DCX	H	;B,C FOR FSYM
1446   18BC 46          	MOV	B,M
1447   18BD 23          	INX	H
1448   18BE 23          	INX	H
1449   18BF EB          SCALR:	XCHG		;SAVE H,L IN D,E
1450   18C0 CD 05 16    	CALL	FSYM	;GET PNTR TO VALUE
1451   18C3 EB          	XCHG		;RESTORE H,L PNTR TO DE
1452   18C4 C1          	POP	B	;GET C REG BACK
1453   18C5 37          	STC		;SET CY,RET
1454   18C6 C9          	RET
1455   18C7             
1456   18C7 7E          ARCK:	MOV	A,M	;ARRAY CHEK, GET CHARACTER
1457   18C8 FE A8       	CPI	250O	;IS IT (?
1458   18CA CA DB 18    	JZ	ARYES	;YES,ITS AN ARRAY
1459   18CD 3E 02       	MVI	A,2	;NO-CHEK FOR LEGAL DELIM.
1460   18CF C5          	PUSH	B	;SAVE C
1461   18D0 CD F4 12    	CALL	SYMSRT
1462   18D3 C1          	POP	B	;RESTORE C
1463   18D4 3C          	INR	A	;DELIMITER F
1464   18D5 CA 30 1A    	JZ	ER8
1465   18D8 C3 84 18    	JMP	SC1	;1 CHAR. SCALAR VAR.
1466   18DB 2B          ARYES:	DCX	H	;YES-WE HAVE ARRAY
1467   18DC 7E          	MOV	A,M	;GET VAR.
1468   18DD 23          	INX	H
1469   18DE F5          	PUSH	PSW	;SAVE VAR.
1470   18DF CD F4 15    	CALL	ICP8	;BUMP PNTR'S
1471   18E2 CD D5 19    	CALL	EVAL	;EVALUATE SUBSCRIPT
1472   18E5 E5          	PUSH	H	;SAVE REG H,L
1473   18E6 21 7C 30    	LXI	H,FREG1
1474   18E9 CD B1 17    	CALL	COPDH	;COPY IT
1475   18EC EB          	XCHG
1476   18ED E1          	POP	H	;RESTORE H,L
1477   18EE CD 23 19    	CALL	FIX	;FIX VALUE
1478   18F1 3E A9       	MVI	A,251O	;CHECK FOR )
1479   18F3 BE          	CMP	M
1480   18F4 C2 30 1A    	JNZ	ER8
1481   18F7 23          	INX	H
1482   18F8 0D          	DCR	C	;BUMP PNTR'S
1483   18F9 13          	INX 	D	;PNT TO LOWER 2 BYTES
1484   18FA 13          	INX	D	
1485   18FB 1A          	LDAX	D
1486   18FC 47          	MOV	B,A	;H-BYTE TO B
1487   18FD 13          	INX	D	;PNT TO LOW BYTE
1488   18FE 1A          	LDAX	D	;LOW BYTE TO A
1489   18FF B7          	ORA	A	;KILL CY
1490   1900 17          	RAL		;START MULT OF OFFSET
1491   1901 5F          	MOV	E,A	;BY 4(BYTES/FLTPT =)
1492   1902 78          	MOV	A,B	;GET H BYTE
1493   1903 17          	RAL
1494   1904 57          	MOV	D,A	;DE IS OFFSET*2
1495   1905 7B          	MOV	A,E	;GET LOW
1496   1906 B7          	ORA	A	;KILL CARRY
1497   1907 17          	RAL
1498   1908 5F          	MOV	E,A
1499   1909 7A          	MOV	A,D
1500   190A 17          	RAL
1501   190B 57          	MOV	D,A
1502   190C F1          	POP	PSW	;DE CONTAIN OFFSET*4
1503   190D C5          	PUSH	B	;GET VAR., SAVE C
1504   190E 4F          	MOV	C,A
1505   190F 06 00       	MVI	B,0	;SETUP TO CALL
1506   1911             			; END OF PAGE 31
1507   1911 E5          	PUSH	H	;SAVE H,L
1508   1912 CD 05 16    	CALL	FSYM	;GET START ADD.
1509   1915 DA 1D 19    	JC	AFOND
1510   1918 3E 12       	MVI	A,12H	;ERROR 12
1511   191A C3 B7 15    	JMP	ERROR	;ARRAY REF. NOT DIM'ED.
1512   191D 19          AFOND:	DAD	D	;H,L NOW PNT TO START OF
1513   191E EB          	XCHG		;ARRAY ADD OFFSET EXCHG
1514   191F E1          	POP	H	;RESTORE PNTR'S AND RET.
1515   1920 C1          	POP	B
1516   1921 37          	STC		;SET CY
1517   1922 C9          	RET
1518   1923             
1519   1923             ;ROUTINE TO FIX FLOATING POINT
1520   1923             ;NUMBERS, ALL REG'S BUT A ARE
1521   1923             ;MAINTAINED. DE PNT TO 4 BYTES
1522   1923             ;OF = TO BE FIXED
1523   1923 C5          FIX:	PUSH	B
1524   1924 E5          	PUSH	H
1525   1925 D5          	PUSH	D	;SAVE REG'S
1526   1926 13          	INX	D
1527   1927 13          	INX	D
1528   1928 13          	INX	D	;PNT TO 4TH BYTE
1529   1929 1A          	LDAX	D
1530   192A F5          	PUSH	PSW	;SAVE CHAR. (FOR SIGN)
1531   192B E6 7F       	ANI 	177O
1532   192D 17          	RAL		;CHEK IF EXP SIGN IS
1533   192E 17          	RAL
1534   192F DA 3E 19    	JC	MINSE
1535   1932 1F          	RAR
1536   1933 1F          	RAR		;RESTORE CHAR
1537   1934 FE 18       	CPI	30O	;IS IT TOO BIG?
1538   1936 DA 40 19    	JC	GOOD
1539   1939 3E 13       	MVI	A,13H	;ERROR 13
1540   193B C3 B7 15    	JMP	ERROR	;FIX = TOO BIG
1541   193E 1F          MINSE:	RAR
1542   193F 1F          	RAR
1543   1940 12          GOOD:	STAX	D	;ABSOLUTE VALUE
1544   1941 1B          	DCX	D
1545   1942 1B          	DCX	D
1546   1943 1B          	DCX	D	;MOV PNTR BACK
1547   1944 21 7C 30    	LXI	H,FREG1
1548   1947 CD B1 17    	CALL	COPDH	;COPY TO FREGI
1549   194A 21 80 30    	LXI	H,FREG2	;STORE .5*2**24 IN
1550   194D 11 7D 19    	LXI	D,FDAT	;FREG2
1551   1950 CD B1 17    	CALL	COPDH	;COPY IT
1552   1953 21 7C 30    	LXI	H,FREG1	;SET UP TO CALL LADD
1553   1956 06 80       	MVI	B,FREG2 & 377O
1554   1958 0E 66       	MVI	C,SCR & 377O
1555   195A CD D0 0F    	CALL	LADD	;ADD THEM,RESULT IN FREG1
1556   195D 21 7C 30    	LXI	H,FREG1
1557   1960 F1          	POP	PSW	;GET SIGN AND ADD.
1558   1961 D1          	POP	D
1559   1962 17          	RAL
1560   1963 3E 00       	MVI	A,0	;GET SIGN ONLY
1561   1965 1F          	RAR
1562   1966 46          	MOV	B,M	;GET BYTE1
1563   1967 12          	STAX	D	;STORE BYTE 1 OF FIX
1564   1968 78          	MOV	A,B
1565   1969 E6 7F       	ANI	177O	;CLEAR HIGH BIT (FROM ADD)
1566   196B 13          	INX	D
1567   196C 23          	INX	H
1568   196D 46          	MOV	B,M	;GET BYTE 2
1569   196E 12          	STAX	D	;STORE BYTE 2 OF FIX
1570   196F 13          	INX	D
1571   1970 78          	MOV	A,B
1572   1971 23          	INX	H
1573   1972 46          	MOV	B,M	;GET BYTE 3
1574   1973 12          	STAX	D	;STORE BYTE 3 OF FIX
1575   1974 78          	MOV	A,B
1576   1975 13          	INX	D
1577   1976 12          	STAX	D	;STORE BYTE 4 OF FIX
1578   1977 1B          	DCX	D	;FIX D PNTR
1579   1978 1B          	DCX	D
1580   1979 1B          	DCX	D
1581   197A E1          	POP	H
1582   197B C1          	POP	B
1583   197C C9          	RET
1584   197D 80 00 00 18 FDAT:	.DB	200O,0,0,30O
1585   1981             
1586   1981             ;INP SAVES ALL REG'S
1587   1981             ;SERVES AS BUFFER BETWEEN FINPT AND
1588   1981             ;DATA INPUT. IF MODE=0 DATA COMES FROM TTY
1589   1981             ;IF MODE=1 DATA COMES FROM SOURCE STMTS.
1590   1981             ;IN ALL CASES HL,C ARE UPDATED FROM HLINP, AND
1591   1981             ;CREG AND RETURNED TO THOSE LOCATIONS
1592   1981 E5          INP:	PUSH	H	;SAVE ALL REG'S
1593   1982 D5          	PUSH	D
1594   1983 C5          	PUSH	B
1595   1984 2A 86 30    	LHLD	HLINP	;GET PNTR'S
1596   1987 3A 84 30    	LDA	CREG
1597   198A 4F          	MOV	C,A
1598   198B B7          	ORA	A	;CHECK FOR EOL
1599   198C C2 95 19    	JNZ	CHKMD	;NO CHECK MODE
1600   198F 3E A0       SPACE:	MVI	A,240O	;SEND A SPACE
1601   1991 C1          IDONE:	POP	B	;RESTORE REG'S
1602   1992             			; END OF PAGE 32
1603   1992 D1          	POP	D
1604   1993 E1          	POP	H
1605   1994 C9          	RET		;AND RETURN
1606   1995             
1607   1995 3A 85 30    CHKMD:	LDA	MODE	;GET MODE
1608   1998 3D          	DCR	A	;CHECK IT
1609   1999 CA A5 19    	JZ	MODE1	;MODE IS 1
1610   199C 7E          	MOV	A,M	;MODE 0 GET ????
1611   199D FE AC       	CPI	',' | 200O	;IS IT A ','?
1612   199F CA 8F 19    	JZ	SPACE	;YES - SEND A SPACE
1613   19A2 C3 C9 19    	JMP	BMPTR	;NO - SEND IT
1614   19A5 CD 14 12    MODE1:	CALL	NUMB	;NUMBER? (ALSO LOADS IT TO A)
1615   19A8 DA C9 19    	JC	BMPTR	;YES - SEND IT AND BUMP PNTR'S
1616   19AB FE AE       	CPI	256O	;DEC. PNT.?
1617   19AD CA C9 19    	JZ	BMPTR
1618   19B0 FE C5       	CPI	305O	;E?
1619   19B2 CA C9 19    	JZ	BMPTR
1620   19B5 FE AB       	CPI	253O	;+?
1621   19B7 CA BF 19    	JZ	CHEKE
1622   19BA FE AD       	CPI	255O	;-?
1623   19BC C2 8F 19    	JNZ	SPACE	;SEND A SPACE
1624   19BF 47          CHEKE:	MOV	B,A	;CHEK IF E PRECEDES +,-
1625   19C0 2B          	DCX	H	;BACK UP AND GET PRE-
1626   19C1 7E          	MOV	A,M	;CEDING CHARACTER
1627   19C2 FE C5       	CPI	305O	;IS IT E?
1628   19C4 C2 8F 19    	JNZ	SPACE	;NO, +OR- WAS DELIMITTER
1629   19C7 78          	MOV	A,B	;YET GET + OR -
1630   19C8 23          	INX	H	;RESTORE H L
1631   19C9 23          BMPTR:	INX	H	;BUMP AND STORE PNTR'S
1632   19CA 0D          	DCR	C
1633   19CB 22 86 30    	SHLD	HLINP
1634   19CE 21 84 30    	LXI	H,CREG
1635   19D1 71          	MOV	M,C
1636   19D2 C3 91 19    	JMP	IDONE	;REG'S AND RETURN
1637   19D5             
1638   19D5             ;THIS ROUTINE WILL EVALUATE UNARY AND/OR
1639   19D5             ;BINARY EXPRESIONS CALLED WITH H AND L
1640   19D5             ;POINTING TO FIRST CHAR. OF EXP. C CONTAINS
1641   19D5             ;NUMBER OF CHAR'S LEFT IN LINE. RETURNS
1642   19D5             ;D(H) AND E(L) POINTING TO THE ANSWER
1643   19D5             ;THIS ROUTINE CALLS ITSELF RECURSIVELY
1644   19D5             ;IN ORDER TO EVALUATE SUBSCRIPT
1645   19D5             ;EXPRESIONS. REG A,B DESTROYED
1646   19D5             ; H L ARE UPDATED
1647   19D5 3E AD       EVAL:	MVI	A,255O	;IS IT UNARY -
1648   19D7 BE          	CMP	M	;Z=1 => YES
1649   19D8 F5          	PUSH	PSW	;Z=1 => NO
1650   19D9 C2 DF 19    	JNZ	ECAV
1651   19DC CD F4 15    	CALL	ICP8	;BUMP POINTER
1652   19DF CD CC 17    ECAV:	CALL	VALUE	;GET PNTR. TO VALUE
1653   19E2 E5          	PUSH	H	;GET VALUE TO FREG1
1654   19E3 21 7C 30    	LXI	H,FREG1
1655   19E6 CD B1 17    	CALL	COPDH
1656   19E9 EB          	XCHG
1657   19EA E1          	POP	H
1658   19EB F1          	POP	PSW	;GET SIGN
1659   19EC C2 FA 19    	JNZ	DOL	;SHALL WE NEGATE?
1660   19EF 13          	INX	D	;YES, POINT TO CHAR.
1661   19F0 13          	INX	D
1662   19F1 13          	INX	D
1663   19F2 1A          	LDAX	D	;AND LOAD TO A
1664   19F3 17          	RAL		;ROTATE SIGN TO CY
1665   19F4 3F          	CMC		;COMPLEMENT IT
1666   19F5 1F          	RAR		;ROTATE BACK
1667   19F6 12          	STAX	D	;STORE AWAY
1668   19F7 1B          	DCX	D	;AND FIX PNTR.
1669   19F8 1B          	DCX	D
1670   19F9 1B          	DCX	D
1671   19FA 79          DOL:	MOV	A,C	;IS THIS END OF LINE?
1672   19FB B7          	ORA	A
1673   19FC C8          	RZ		;YES-RETURN
1674   19FD C5          	PUSH	B	;SAVE C
1675   19FE 3E 02       	MVI	A,2	;NO SET UP TO CALL
1676   1A00 CD F4 12    	CALL	SYMSRT	;SYMSRT AND CALL
1677   1A03 C1          	POP	B	;RESTORE C
1678   1A04 3C          	INR	A	;DELIMITER FOUND?
1679   1A05 CA 30 1A    	JZ	ER8	;NO, ERROR
1680   1A08 D6 0A       EOK:	SUI	10	;CHECK FOR EXPRESSION
1681   1A0A D8          	RC		;DELIMITER
1682   1A0B F5          	PUSH	PSW	;SAVE OPERATION
1683   1A0C CD F4 15    	CALL	ICP8	;BUMP PNTR'S
1684   1A0F B7          	ORA	A	;CLEAR CY
1685   1A10 E5          AGA:	PUSH	H	;GET BYTES OF NUMBER
1686   1A11 1A          	LDAX	D	;AND PLACE ON STACK
1687   1A12 6F          	MOV	L,A
1688   1A13 13          	INX	D
1689   1A14 1A          	LDAX 	D
1690   1A15 13          	INX	D
1691   1A16 67          	MOV	H,A	;2 BYTES TO H,L
1692   1A17 E3          	XTHL		;XCHANGE, RESTORES H,L
1693   1A18 3F          	CMC
1694   1A19 DA 10 1A    	JC	AGA	;ANOTHER PASS?
1695   1A1C CD CC 17    	CALL	VALUE	;GET 2ND VALUE
1696   1A1F 79          	MOV	A,C	;CHECK FOR END OF LINE
1697   1A20 B7          	ORA	A	;IF SO => WELL FORMED
1698   1A21             			; END OF PAGE 33
1699   1A21 CA 35 1A    	JZ	WFOR
1700   1A24 C5          	PUSH	B	;SAVE C
1701   1A25 3E 02       	MVI	A,2	;ELSE CALL SYMSRT TO
1702   1A27 CD F4 12    	CALL	SYMSRT	;CHEK FOR EXP. DEL.
1703   1A2A C1          	POP	B	;RECOVER IT
1704   1A2B FE 0A       	CPI	10
1705   1A2D DA 35 1A    	JC	WFOR	;YES WELL FORMED
1706   1A30 3E 08       ER8:	MVI	A,8	;ILL-FORMED EXP.
1707   1A32 C3 B7 15    	JMP	ERROR
1708   1A35 C5          WFOR:	PUSH	B	;SAVE C, AND H,L
1709   1A36 E5          	PUSH	H
1710   1A37 21 80 30    	LXI	H,FREG2	;COPY 2ND VALUE TO
1711   1A3A CD B1 17    	CALL	COPDH	;FREG2
1712   1A3D D1          	POP	D	;GET BYTES FROM STACK
1713   1A3E C1          	POP	B
1714   1A3F E1          	POP	H	;INTO FREG1+2
1715   1A40 22 7E 30    	SHLD	FREG1+2
1716   1A43 E1          	POP	H	;AND NEXT 2 BYTES
1717   1A44 22 7C 30    	SHLD	FREG1	;FROM STACK TO FREG1
1718   1A47 EB          	XCHG		;GET OPERATION
1719   1A48 F1          	POP	PSW
1720   1A49             ;THIS ROUTINE PERFORMS BINARY OFERATIONS ON OPERANDS IN FREG1 AND FREG2
1721   1A49             ;B,C,H,L ARE LEFT UNDISTURBED. A IS DESTROYED
1722   1A49             ;D,E PNT TO RESULT
1723   1A49             ;OPERATIONS ARE SPECIFIED BY A REGISTER AS FOLLOWS:
1724   1A49             ;	A=0	=>	FREG1	* FREG2
1725   1A49             ;	A=1	=>	FREG1 / FREG2
1726   1A49             ;	A=2	=>	FRE01 + FREG2
1727   1A49             ;	A=3	=>	FREG1 - FREG2
1728   1A49             	
1729   1A49             ; IN CASE OF ARITHMETIC ERROR A MESSAGE IS SENT TO USER.
1730   1A49             ; IF A CONTAINS ILLEGAL OPERATION REQUEST ERROR IS SENT TO USER
1731   1A49             ; (ERROR 8) AND THE INTERPRETER IS ABORTED.
1732   1A49 C5          BINOP:	PUSH	B	;SAVE REG'S
1733   1A4A E5          	PUSH 	H
1734   1A4B 21 7C 30    	LXI	H,FREG1	;SET UP PNTR'S TO
1735   1A4E 06 80       	MVI	B,FREG2 & 377O	;FREG'S AND SCR AREA
1736   1A50 0E 66       	MVI	C,SCR & 377O	;AND DO OPERATION
1737   1A52 3D          	DCR	A
1738   1A53 FA 95 1A    	JM	FMULT	;0,1=>* OR /
1739   1A56 CA 9B 1A    	JZ	DIV	;2,3=>+ OR -
1740   1A59 3D          	DCR	A
1741   1A5A CA 64 1A    	JZ	ADDD
1742   1A5D 3D          	DCR	A
1743   1A5E CA 8F 1A    	JZ	SUBB
1744   1A61 C3 30 1A    	JMP	ER8	;ILLEGAL OPER.
1745   1A64 CD D0 0F    ADDD:	CALL	LADD	;DO ADDITION
1746   1A67 54          ASBC:	MOV	D,H	;FIX PNTR'S FOR RET.
1747   1A68 5D          	MOV	E,L
1748   1A69 B7          FPERR:	ORA	A	;SET FLAGS
1749   1A6A CA 8C 1A    	JZ	NFPER	;NO ERROR
1750   1A6D D5          	PUSH	D	;SAVE DE
1751   1A6E F5          	PUSH	PSW	;SAVE A
1752   1A6F CD D0 12    	CALL	WRIT	;DUMP BUFFER
1753   1A72 F1          	POP	PSW	;GET A BACK
1754   1A73 21 85 1A    	LXI	H,WFPER	;RETURN ADDRESS
1755   1A76 E5          	PUSH	H	;SAVE ON STACK
1756   1A77 21 54 14    	LXI	H,ODATA	;MESSAGE TABLE
1757   1A7A 17          	RAL		;UNDERFLOW?
1758   1A7B DA 39 14    	JC	FOR12	;YES
1759   1A7E 17          	RAL		;OVERFLOW?
1760   1A7F DA 3A 14    	JC	FOR11	;YES
1761   1A82 C3 3B 14    	JMP	FOR10	;NO - ITS ZERODIVIDE
1762   1A85 21 54 14    WFPER:	LXI	H,ODATA	;MESSAGE TABLE
1763   1A88 CD D8 15    	CALL	ERLN	;PRINT 'IN LINE	(USE PART OF ERROR)
1764   1A8B D1          	POP	D	;RESTORE REG'S
1765   1A8C E1          NFPER:	POP	H
1766   1A8D C1          	POP	B
1767   1A8E C9          	RET
1768   1A8F CD D9 0F    SUBB:	CALL	LSUB	;DO SUBTRACTION
1769   1A92 C3 67 1A    	JMP	ASBC
1770   1A95 CD D3 0F    FMULT:	CALL	LMUL	;DO MULT.
1771   1A98 C3 9E 1A    	JMP	MDBC
1772   1A9B CD D6 0F    DIV:	CALL	LDIV	;DO DIV
1773   1A9E 54          MDBC:	MOV	D,H	;AND FIX PNTR'S FOR RET.
1774   1A9F 59          	MOV	E,C
1775   1AA0 C3 69 1A    	JMP	FPERR	;CHECK FOR ERROR
1776   1AA3             
1777   1AA3             ;PRINT PROCESSOR
1778   1AA3 2A 5B 30    PRI:	LHLD	CPNT
1779   1AA6 23          	INX	H	;INCR. PAST KEYWORD
1780   1AA7 23          	INX	H
1781   1AA8 23          	INX	H
1782   1AA9 CD EF 15    	CALL 	ICP7
1783   1AAC 23          	INX	H	;BUMP PNTRS
1784   1AAD 0D          	DCR	C
1785   1AAE 06 00       	MVI	B,0	;SET CHAR CNT
1786   1AB0 C2 BC 1A    	JNZ	PLOOP	;CONTINUE IF MORE
1787   1AB3 04          	INR	B	;NOTHING MORE, PAD A MULL
1788   1AB4 3E 00       	MVI	A,0
1789   1AB6 CD AD 12    	CALL	PAD
1790   1AB9 C3 54 1B    	JMP	PEND	;WRITE IT AND CONTINUE
1791   1ABC 7E          PLOOP:	MOV	A,M	;GET CHARACTER
1792   1ABD FE A2       	CPI	'"'+200O	;IS IT "?"
1793   1ABF             			; END OF PAGE 34
1794   1ABF C2 E4 1A    	JNZ	EXPRE	;NO
1795   1AC2 CD EF 15    QUOTE:	CALL	ICP7	;GET CHARACTER TO A
1796   1AC5 7E          	MOV	A,M
1797   1AC6 FE A2       	CPI	'"'+200O	;IS IT "?
1798   1AC8 CA D6 1A    	JZ	QCHEK
1799   1ACB 04          QOTOK:	INR	B	;INCREMENT CNT
1800   1ACC 50          	MOV	D,B	;SAVE IN 0
1801   1ACD 06 01       	MVI	B,1	;PAD ONCE
1802   1ACF CD AD 12    	CALL 	PAD
1803   1AD2 42          	MOV	B,D	;RESTORE CNT
1804   1AD3 C3 C2 1A    	JMP	QUOTE	;AGAIN
1805   1AD6 23          QCHEK:	INX	H	;BUMP PNTRS
1806   1AD7 0D          	DCR	C
1807   1AD8 CA 54 1B    	JZ	PEND	;EOL
1808   1ADB 7E          	MOV	A,M
1809   1ADC FE A2       	CPI	'"'+200O	;ANOTHER
1810   1ADE CA CB 1A    	JZ	QOTOK
1811   1AE1 C3 15 1B    	JMP	SCOLN
1812   1AE4 CD 22 12    EXPRE:	CALL	ALPHA	;IS IT A LETTER
1813   1AE7 DA FB 1A    	JC	PRTIT	;YES EVALUATE AND PRINT
1814   1AEA CD 14 12    	CALL	NUMB	;IS IT A NUMB?
1815   1AED DA FB 1A    	JC	PRTIT	;YES, EVALUATE AND PRINT
1816   1AF0 7E          	MOV	A,M
1817   1AF1 FE AE       	CPI	'.'+200O	;IS IT A DECIMAL PNT?
1818   1AF3 CA FB 1A    	JZ	PRTIT	;YES EVALUATE, PRINT
1819   1AF6 FE AD       	CPI	'-'+200O	;IS IT A -?
1820   1AF8 C2 15 1B    	JNZ	SCOLN	;NO, CHECK FOR ;
1821   1AFB C5          PRTIT:	PUSH	B	;SAVE CNT
1822   1AFC CD D5 19    	CALL	EVAL	;EVALUATE EXPRESION
1823   1AFF C5          	PUSH	B	;SAVE C,H,L
1824   1B00 E5          	PUSH	H
1825   1B01 EB          	XCHG		;DE TO HL
1826   1B02 0E 66       	MVI	C,SCR & 377O	;SET UP, CONVERT
1827   1B04 CD E5 0F    	CALL 	CONV
1828   1B07 E1          	POP	H	;RESTORE REG'S
1829   1B08 C1          	POP	B
1830   1B09 79          	MOV	A,C
1831   1B0A C1          	POP	B
1832   1B0B 4F          	MOV	C,A
1833   1B0C B7          	ORA	A	;CHECK EOL
1834   1B0D CA 54 1B    	JZ	PEND
1835   1B10 3E 0B       	MVI	A,11	;UPDATE CNTR
1836   1B12 80          	ADD	B
1837   1B13 47          	MOV	B,A
1838   1B14 7E          	MOV	A,M	;GET CHAR.
1839   1B15 FE BB       SCOLN:	CPI	$3B+200O	;IS IT semi-colon?
1840   1B17 CA 47 1B    	JZ	SONWD
1841   1B1A FE AC       	CPI	','+200O	;IS IT ,?
1842   1B1C C2 32 17    	JNZ	ER6	;NO-UNEXPECTED CHAR.
1843   1B1F AF          	XRA	A	;ZERO A
1844   1B20 C6 0D       ADFLO:	ADI	13	;ADD FIELD LENGTH
1845   1B22 B8          	CMP	B	;CDKPARE TO CNT
1846   1B23 CA 29 1B    	JZ	$+6
1847   1B26 D2 3B 1B    	JNC	FLDFD
1848   1B29 FE 34       	CPI	52	;LAST FLD?
1849   1B2B C2 20 1B    	JNZ	ADFLO
1850   1B2E CD D0 12    	CALL	WRIT	;YES-WRITE LINE
1851   1B31 06 00       	MVI	B,0	;RESET CNT
1852   1B33 23          ONWD:	INX	H	;BUM PNTRS
1853   1B34 0D          	DCR	C
1854   1B35 CA 54 1B    	JZ	PEND
1855   1B38 C3 BC 1A    	JMP	PLOOP
1856   1B3B 90          FLDFD:	SUB	B	;FOUND FIELD
1857   1B3C 50          	MOV	D,B	;DETERMINE #OF SPACES TO PAD
1858   1B3D 5F          	MOV	E,A	;SET UP TO CALL PAD
1859   1B3E 47          	MOV	B,A
1860   1B3F 3E A0       	MVI	A,240O
1861   1B41 CD AD 12    	CALL	PAD	;PAD SPACES
1862   1B44 7A          	MOV	A,D
1863   1B45 83          	ADD	E	;NEW CNT
1864   1B46 47          	MOV	B,A	;SAVE IN B
1865   1B47 23          SONWD:	INX	H	;CHECK EOL
1866   1B48 0D          	DCR	C
1867   1B49 C2 BC 1A    	JNZ	PLOOP
1868   1B4C 16 01       	MVI	D,1	;SUPPRESS CR/LF
1869   1B4E CD D2 12    	CALL	WRIT1
1870   1B51 C3 57 1B    	JMP	$+6
1871   1B54 CD D0 12    PEND:	CALL	WRIT	;DUMP BUFFER, CONTINUE
1872   1B57 C3 9A 1B    	JMP 	IEND
1873   1B5A             
1874   1B5A             ;INPUT PROCESSOR - READS VALUES FROM TTY
1875   1B5A             ;THEY MUST BE DELIMITED BY COMMAS ONLY
1876   1B5A 79          INPUT:	MOV	A,C	;IN CASE OF ERROR
1877   1B5B 32 5F 30    	STA	PL6	;SAVE
1878   1B5E 2A 5B 30    INPER:	LHLD	CPNT	;INPUT LINE (V-STRING) PNTR
1879   1B61 23          	INX	H	;ADJUST PNTR'S
1880   1B62 23          	INX	H
1881   1B63 23          	INX	H
1882   1B64 CD EF 15    	CALL	ICP7
1883   1B67 CD EF 15    	CALL	ICP7
1884   1B6A C5          PRMPT:	PUSH	B	;SAVE PNTR'S
1885   1B6B E5          	PUSH	H
1886   1B6C 06 01       	MVI	B,1	;SEND PROMPT
1887   1B6E 3E 3A       	MVI 	A,':'	; END OF PAGE 35
1888   1B70 50          	MOV	D,B	;TO SUPPRESS CR/LF
1889   1B71 CD AD 12    	CALL	PAD	;PAD IT
1890   1B74 CD D2 12    	CALL	WRIT1	;WRITE IT
1891   1B77 21 01 30    	LXI	H,IBUF	;ADD. OF INPUT BUFFER
1892   1B7A CD C6 13    	CALL	TTYIN	;READ A LINE
1893   1B7D EB          	XCHG		;ADD. OF K-STRING TO DE
1894   1B7E E1          	POP	H	;ADD. OF V-STRING
1895   1B7F C1          	POP	B	;V-STRING CNT TO C
1896   1B80 47          	MOV	B,A	;K-STRING CNT TO B
1897   1B81 CD A0 1B    	CALL	STRIN	;TRANSFER CONSTANT TO VARIBLES
1898   1B84 CA 97 1B    	JZ	INPOK	;NO ERROR
1899   1B87 21 54 14    	LXI	H,ODATA	;SEND ERROR MESSAGE
1900   1B8A CD 3C 14    	CALL	FORM9
1901   1B8D CD D0 12    	CALL	WRIT
1902   1B90 3A 5F 30    	LDA	PL6	;GET V-STRING CNT
1903   1B93 4F          	MOV	C,A
1904   1B94 C3 5E 1B    	JMP	INPER	;START AGAIN
1905   1B97 DA 6A 1B    INPOK:	JC	PRMPT	;NEED MORE CONSTANTS
1906   1B9A 2A 56 30    IEND:	LHLD	KFPNT	;ALL OK - GET NEW PNTR.
1907   1B9D C3 92 16    	JMP	ILOOP	;CONTINUE
1908   1BA0             
1909   1BA0             ;THIS ROUTINE TRANSFERS THE FLOATING POINT VALUES
1910   1BA0             ;OF AN ASCII STRING OF CONSTANTS TO THE LOCATIONS
1911   1BA0             ;SPECIFIED BY AN ASCII STRING OF VARIBLES
1912   1BA0             ;POINTER AND LINE CNT OF VAR. STRING ARE IN HL,C
1913   1BA0             ;POINTER AND LINE CNT OF CONST. STRING ARE IN DE,B
1914   1BA0             ;ON RETURN:
1915   1BA0             ;	Z=0 AND CY=0	ALL OK
1916   1BA0             ;	Z=0 AND CY=0	NEED MORE CONSTANTS
1917   1BA0             ;	Z=1		ERROR IN CONVERSION
1918   1BA0             ;ALL POINTERS AND LINE CNT'S ARE RETURNED UPDATED
1919   1BA0 79          STRIN:	MOV	A,C	;GET V-STRING CNT
1920   1BA1 B7          	ORA	A	;TFJTVFOR EOL
1921   1BA2 C8          	RZ		;DONE	CY=O => ALL OLK
1922   1BA3 7E          	MOV	A,M	;GET 6HAR.
1923   1BA4 FE AC       	CPI	',' | 200O	;IS IT A ,?
1924   1BA6 C2 AE 1B    	JNZ	STOKV	;IT'S	NOT A ,
1925   1BA9 23          	INX	H	;COMMA, BUMP PNTR'S
1926   1BAA 0D          	DCR	C
1927   1BAB CA D6 1B    	JZ	ERRET	;POSSIBLE ERROR (IF EOL)
1928   1BAE 78          STOKV:	MOV	A,B	;GET K-STRING LENGTH
1929   1BAF B7          	ORA	A	;TEST FOR EOL
1930   1BB0 37          	STC		;IN CASE IT'S EOL
1931   1BB1 C8          	RZ		;RETJ CY=I Z@ NEED MORE CONSTANTS
1932   1BB2 1A          	LDAX	D	;GET CHAR
1933   1BB3 FE AC       	CPI	',' | 200O	;TEST FOR ,
1934   1BB5 C2 BD 1B    	JNZ	STOKK	;NOT A , - READY TO GO
1935   1BB8 13          	INX	D	;BUMP PATR'S
1936   1BB9 05          	DCR	B	;POSSIBLE ERROR (IF EOL)
1937   1BBA CA D6 1B    	JZ 	ERRET
1938   1BBD C5          STOKK:	PUSH	B	;SAVE,K-STRING CNT
1939   1BBE D5          	PUSH	D	;SAVE K-STRING PNTR
1940   1BBF CD 7B 18    	CALL	VAR	;ADD. TO VARIBLE TO DE
1941   1BC2 EB          	XCHG		;VAR. ADD TO H,L
1942   1BC3 22 8A 30    	SHLD	VARAD	;SAVE
1943   1BC6 E1          	POP	H	;ADDRESS OF K-STRING
1944   1BC7 79          	MOV	A,C	;V-STRING CNT TO A
1945   1BC8 C1          	POP	B	;K-STRING CNT TO B
1946   1BC9 48          	MOV	C,B	;K-STRING CNT TO C
1947   1BCA F5          	PUSH	PSW	;SAVE V-STRING CNT
1948   1BCB D5          	PUSH	D	;SAVE V-STRING ADD.
1949   1BCC 3E 00       	MVI	A,0	;A=0 =@ DATA FROM TTY
1950   1BCE CD 5C 18    	CALL	RDKON	;GET CONSTANT TO GREG
1951   1BD1 D2 D9 1B    	JNC 	STNER
1952   1BD4 E1          	POP	H	;EMPTY STACK
1953   1BD5 E1          	POP	H
1954   1BD6 AF          ERRET:	XRA	A	;ERROR
1955   1BD7 3C          	INR	A
1956   1BD8 C9          	RET
1957   1BD9 E5          STNER:	PUSH	H	;SAVE K-STRING PNTR.
1958   1BDA 2A 8A 30    	LHLD	VARAD	;GET VAR. ADD
1959   1BDD 11 77 30    	LXI	D,GREG	;ADD. TO CONST.
1960   1BE0 CD B1 17    	CALL	COPDH	;COPY IT TO VARIABLE LOC.
1961   1BE3 D1          	POP	D	;K-STING PNTR. TO DE
1962   1BE4 41          	MOV	B,C	;K-STRING LENGTH TO B
1963   1BE5 E1          	POP	H	;V-STRING PNTR. TO HL
1964   1BE6 F1          	POP	PSW	;V-STRING LENGTH TO C
1965   1BE7 4F          	MOV	C,A
1966   1BE8 C3 A0 1B    	JMP	STRIN	;LOOP
1967   1BEB             
1968   1BEB             ;LET STMT. PROCESSOR
1969   1BEB 2A 5B 30    LET:	LHLD	CPNT	;GET PNTR.
1970   1BEE 23          	INX	H	;FIX PNTR.
1971   1BEF 23          	INX	H
1972   1BF0 23          	INX	H
1973   1BF1 79          	MOV	A,C	;CHECK FOR EOL
1974   1BF2 B7          	ORA	A
1975   1BF3 C2 FB 1B    	JNZ	LOK
1976   1BF6 3E 07       ER7:	MVI	A,7
1977   1BF8 C3 B7 15    	JMP	ERROR
1978   1BFB CD 7B 18    LOK:	CALL	VAR	;GET ADDRESS TO VAR.
1979   1BFE DA 40 1C    	JC	SAVV	;IT'S A VARIABLE
1980   1C01 3E 03       	MVI	A,3	;NO-CHEK FOR FUNC.
1981   1C03 CD F4 12    	CALL	SYMSRT
1982   1C06 FE FF       	CPI	377O	; END OF PAGE 36
1983   1C08 CA 30 1A    	JZ	ER8	;DON'T KNOW WHAT IT IS
1984   1C0B 3D          	DCR	A
1985   1C0C C2 86 1C    	JNZ	ER10	;ILLEGAL USE OF FUNC.
1986   1C0F 23          	INX	H	;IT'S PUT,UPDATE H,L
1987   1C10 23          	INX	H
1988   1C11 23          	INX	H
1989   1C12 79          	MOV	A,C	;EOL CHK
1990   1C13 B7          	ORA	A
1991   1C14 CA 30 1A    	JZ	ER8
1992   1C17 7E          	MOV	A,M	;CHEK FOR (
1993   1C18 FE A8       	CPI	250O
1994   1C1A C2 30 1A    	JNZ	ER8
1995   1C1D CD F4 15    	CALL	ICP8	;BUMP PNTRS
1996   1C20 CD D5 19    	CALL	EVAL	;EVALUATE AND FIX
1997   1C23 E5          	PUSH	H	;SAVE H,L
1998   1C24 21 7C 30    	LXI	H,FREG1
1999   1C27 CD B1 17    	CALL	COPDH	;COPY IT
2000   1C2A EB          	XCHG
2001   1C2B E1          	POP	H
2002   1C2C CD 23 19    	CALL	FIX
2003   1C2F 13          	INX	D
2004   1C30 13          	INX	D
2005   1C31 13          	INX	D
2006   1C32 1A          	LDAX	D	;GET LOWEST BYTE
2007   1C33 F5          	PUSH	PSW	;PORT = IS SAVED
2008   1C34 7E          	MOV	A,M
2009   1C35 FE A9       	CPI	251O	;CHECK FOR
2010   1C37 C2 30 1A    	JNZ	ER8
2011   1C3A CD F4 15    	CALL	ICP8	;BUMP PNTR'S
2012   1C3D 16 FF       	MVI	D,377O
2013   1C3F 5A          	MOV	E,D
2014   1C40 D5          SAVV:	PUSH	D	;KEEP ADDRESS
2015   1C41 7E          	MOV	A,M	;CHEK FOR
2016   1C42 FE BD       	CPI	275O
2017   1C44 C2 30 1A    	JNZ	ER8
2018   1C47 CD F4 15    	CALL	ICP8	;BUMP PNTRS
2019   1C4A CD D5 19    	CALL	EVAL	;EVALUATE EXPRESSION
2020   1C4D E1          	POP	H	;GET ADDRESS
2021   1C4E CD A3 12    	CALL	CHK1
2022   1C51 DA 5A 1C    	JC	PTFIN	;IT WAS A PUT
2023   1C54 CD B1 17    	CALL	COPDH	;COPY TO ADDRESS
2024   1C57 C3 9A 1B    	JMP	IEND	;CONTINUE
2025   1C5A 21 7C 30    PTFIN:	LXI	H,FREG1	;COPY VALUE TO FREG1
2026   1C5D CD B1 17    	CALL	COPDH
2027   1C60 EB          	XCHG
2028   1C61 CD 23 19    	CALL	FIX	;FIX THE VALUE
2029   1C64 13          	INX	D
2030   1C65 13          	INX	D
2031   1C66 13          	INX	D
2032   1C67 1A          	LDAX 	D
2033   1C68 4F          	MOV	C,A	;SAVE IN C
2034   1C69 21 81 1C    	LXI	H,PINST	;ADD OF BYTES TO GO TO
2035   1C6C 11 77 30    	LXI	D,GREG	;RAM AT GREG
2036   1C6F 06 05       	MVI	B,5	;BYTE CNT
2037   1C71 7E          PRI1:	MOV	A,M	;STORE PROG. SEG. IN
2038   1C72 12          	STAX	D	;RAM
2039   1C73 23          	INX	H
2040   1C74 13          	INX	D
2041   1C75 05          	DCR	B
2042   1C76 C2 71 1C    	JNZ	PRI1
2043   1C79 F1          	POP	PSW	;GET PORT
2044   1C7A 21 78 30    	LXI	H,GREG+1
2045   1C7D 77          	MOV	M,A	;STORE
2046   1C7E 79          	MOV	A,C	;GET DARA OUT TO A
2047   1C7F 2B          	DCX	H	;TRANSFER
2048   1C80 E9          	PCHL
2049   1C81 D3 00       PINST:	OUT	0	;RAM INSTRUCTIONS
2050   1C83 C3 9A 1B    	JMP	IEND
2051   1C86 3E 10       ER10:	MVI	A,10H
2052   1C88 C3 B7 15    	JMP	ERROR
2053   1C8B             
2054   1C8B             ;IF STMT. PROCESSOR
2055   1C8B 2A 5B 30    IFRT:	LHLD	CPNT	;GET PNTR., ADJUST
2056   1C8E 23          	INX	H
2057   1C8F 0C          	INR	C	;CHECK EOL
2058   1C90 CD EF 15    	CALL	ICP7
2059   1C93 CD D5 19    	CALL	EVAL	;EVALUATE EXPRESSION
2060   1C96 79          	MOV	A,C
2061   1C97 B7          	ORA	A	;CHECK EOL
2062   1C98 CA F6 1B    	JZ	ER7
2063   1C9B E5          IAGA:	PUSH	H	;SAVE H,L, PUT VALUE ON 3SK
2064   1C9C 1A          	LDAX	D
2065   1C9D 13          	INX	D
2066   1C9E 6F          	MOV	L,A
2067   1C9F 1A          	LDAX 	D
2068   1CA0 13          	INX	D
2069   1CA1 67          	MOV	H,A
2070   1CA2 E3          	XTHL		;RESTORE H,L
2071   1CA3 3F          	CMC
2072   1CA4 DA 9B 1C    	JC	IAGA	;ANOTHER PASS?
2073   1CA7 3E 02       	MVI	A,2
2074   1CA9 CD F4 12    	CALL	SYMSRT	;CHEK TYPE OF RELATION
2075   1CAC FE 04       	CPI	4	;WAS IT LEGAL?
2076   1CAE DA B6 1C    	JC	II1	; END OF PAGE 37
2077   1CB1 3E 14       ER14:	MVI	A,14H
2078   1CB3 C3 B7 15    	JMP	ERROR
2079   1CB6 FE 02       II1:	CPI	2	;WAS IT A ,?
2080   1CB8 CA B1 1C    	JZ	ER14
2081   1CBB 3C          	INR	A	;ALL OK, INC,SAVE
2082   1CBC F5          	PUSH	PSW
2083   1CBD 0C          	INR	C
2084   1CBE CD EF 15    	CALL	ICP7	;BUMP PNTRS
2085   1CC1 3E 02       	MVI	A,2	;CALL SYMSRT
2086   1CC3 CD F4 12    	CALL 	SYMSRT
2087   1CC6 FE FF       	CPI	377O	;FOUND ANYTHING?
2088   1CC8 CA E3 1C    	JZ	RELAT	;DONE
2089   1CCB FE 02       	CPI	2
2090   1CCD CA B1 1C    	JZ	ER14	;IT WAS A ,
2091   1CD0 FE 04       	CPI	4
2092   1CD2 D2 B1 1C    	JNC	ER14	;NOT LEGAL
2093   1CD5 3C          	INR	A
2094   1CD6 47          	MOV	B,A
2095   1CD7 0C          	INR	C
2096   1CD8 CD EF 15    	CALL	ICP7
2097   1CDB F1          	POP	PSW	;GET SECOND RELATION
2098   1CDC 80          	ADD	B	;ADD THEM
2099   1CDD F5          	PUSH	PSW	;AND SAVE
2100   1CDE FE 08       	CPI	10O	;TEST FOR ==
2101   1CE0 CA B1 1C    	JZ 	ER14
2102   1CE3             
2103   1CE3             ;RELATION IS STORED ON TOP OF STACK (PUSH PSW) ACCORDING TO
2104   1CE3             ;THE FOLLOWING
2105   1CE3             ;
2106   1CE3             ;	1 =>	<
2107   1CE3             ;	2 =>	>
2108   1CE3             ;	3 =>	<>
2109   1CE3             ;	4 =>	=
2110   1CE3             ;	5 =>	<=
2111   1CE3             ;	6 =>	>=
2112   1CE3             ;
2113   1CE3 CD D5 19    RELAT:	CALL	EVAL	;EVALUATE
2114   1CE6 E5          	PUSH	H	;SAVE H,L
2115   1CE7 21 80 30    	LXI	H,FREG2	;COPY A FREG2
2116   1CEA CD B1 17    	CALL	COPDH
2117   1CED E1          	POP	H	;GET H,L
2118   1CEE F1          	POP	PSW	;AND REATION
2119   1CEF E3          	XTHL		;GET 2ND 2 BYTES
2120   1CF0 22 7E 30    	SHLD	FREG1+2	;STORE
2121   1CF3 E1          	POP	H	;GET 1ST 2 BYTES,STORE
2122   1CF4 E3          	XTHL
2123   1CF5 22 7C 30    	SHLD	FREG1
2124   1CF8 C5          	PUSH	B
2125   1CF9 F5          	PUSH	PSW	;SAVE A,B,C
2126   1CFA CD 31 1D    	CALL	FCOMP	;COMPART NUMBERS
2127   1CFD 57          	MOV	D,A	;SAVE RESULT IN D
2128   1CFE F1          	POP	PSW	;GET RELATION,B,C
2129   1CFF C1          	POP	B
2130   1D00 BA          	CMP	D	;SAME?
2131   1D01 CA 24 1D    	JZ	TRUE	;YES
2132   1D04 D6 04       	SUI	4
2133   1D06 F2 16 1D    	JP	NOT3	;NOT RELATION 3?
2134   1D09 3C          	INR	A	;IS IT RELATION 3?
2135   1D0A C2 20 1D    	JNZ	FALSE	;NO, ITS FALSE
2136   1D0D 3E 04       	MVI	A,4	;IT IS. CHECK FOR INEQUALITY
2137   1D0F BA          	CMP	D
2138   1D10 C2 24 1D    	JNZ	TRUE
2139   1D13 C3 20 1D    	JMP	FALSE
2140   1D16 BA          NOT3:	CMP	D	;RELATION 5,6 TRUE?
2141   1D17 CA 24 1D    	JZ	TRUE	;YES
2142   1D1A 3E 04       	MVI	A,4	;IT WAS, CHECK FOR EQUALITY
2143   1D1C BA          	CMP	D
2144   1D1D CA 24 1D    	JZ	TRUE
2145   1D20 E1          FALSE:	POP	H	;CONTINUE
2146   1D21 C3 9A 1B    	JMP	IEND
2147   1D24 E1          TRUE:	POP	H
2148   1D25 06 04       	MVI	B,4
2149   1D27 CD EF 15    THEN:	CALL	ICP7	;INCREMENT PAST THEN
2150   1D2A 05          	DCR	B
2151   1D2B C2 27 1D    	JNZ	THEN
2152   1D2E C3 0F 17    	JMP	GTRA	;TRANSFER TO GOTO
2153   1D31             
2154   1D31             ;ROUTINE FCOMP COMPARES 2 FLOATING POINT #'S. THEY ARE ASSUMED
2155   1D31             ;TO BE IN FREG1 AND FREG2.
2156   1D31             ;ALL REGISTERS ARE DESTROYED.
2157   1D31             ;THE VALUE RETURNED IN REG A IS RESULT OF COMPARISON.
2158   1D31             ;RESULTS ARE AS FOLLOWS:
2159   1D31             ;	A=1	=>	FREG1 < FREG2
2160   1D31             ;	A=2	=>	FREG1 > FREG2
2161   1D31             ;	A=4	=>	FREG1 = FREG2
2162   1D31 21 7F 30    FCOMP:	LXI	H,FREG1+3	;PNTS TO CHAR OF 1SR
2163   1D34 11 83 30    	LXI	D,FREG2+3	;PNTS TO CHAR OF 2ND
2164   1D37 7E          	MOV	A,M	;GET 1 CHAR
2165   1D38 06 80       	MVI	B,200O	;MASK TO B
2166   1D3A A0          	ANA	B	;GET SIGN, 1
2167   1D3B 4F          	MOV	C,A	;SAVE IN C
2168   1D3C 1A          	LDAX	D	;GET CHAR 2
2169   1D3D A0          	ANA	B	;GET SIGN 2
2170   1D3E             			; END OF PAGE 38
2171   1D3E A9          	XRA	C
2172   1D3F CA 49 1D    	JZ	SINEQ	;SAME SIGNS
2173   1D42 79          	MOV	A,C	;OPPISITE SIGNS,GET 1 SIGN
2174   1D43 17          	RAL		;ROTATE TO CY
2175   1D44 3E 01       	MVI	A,1
2176   1D46 D8          	RC		;FREG1 < FREG2 => A=1
2177   1D47 3C          	INR	A	;ELSE FREG1 > FREG2
2178   1D48 C9          	RET		;AND A=2
2179   1D49 C5          SINEQ:	PUSH	B	;SAVE SIGN
2180   1D4A 2B          	DCX	H	;PNTR TO 1 IN H,L
2181   1D4B 2B          	DCX	H
2182   1D4C 2B          	DCX	H
2183   1D4D 43          	MOV	B,E	;PNTR TO 2 IN B
2184   1D4E 05          	DCR	B
2185   1D4F 05          	DCR	B
2186   1D50 05          	DCR	B
2187   1D51 CD DF 0F    	CALL	LMCM	;COMPARE ????
2188   1D54             ;AT THIS POINT Z=1 => =, CY=1 => 1<2
2189   1D54 C1          	POP	B	;GET SIGN
2190   1D55 C2 5B 1D    	JNZ	$+6
2191   1D58 3E 01       	MVI	A,1	;EQUAL =>, A=4
2192   1D5A C9          	RET
2193   1D5B 79          	MOV	A,C	;GET SIGN TO A
2194   1D5C 3C          	INR	A	;SET SIGN BIT
2195   1D5D 3E 01       	MVI	A,1
2196   1D5F FA 65 1D    	JM	$+6	;SIGN IS NEGATIVE
2197   1D62 D8          	RC		;SIGN=+ AND ABS(FREGL)<ABS(FREG2)
2198   1D63 3C          	INR	A	;ABS(FREG1)>ABS(FREG2)
2199   1D64 C9          	RET
2200   1D65 D0          	RNC		;SIGN=- AND ABS(FREG1)>ABS(FREG2)
2201   1D66 3C          	INR	A	;ABS(FREG1)<ABS(FREG2)
2202   1D67 C9          	RET
2203   1D68             
2204   1D68             ;CALL PROCESSOR
2205   1D68 21 9A 1B    CALLF:	LXI	H,IEND	;INIT RE 	ADDRESS
2206   1D6B E5          	PUSH	H
2207   1D6C 2A 5B 30    	LHLD	CPNT
2208   1D6F 23          	INX	H
2209   1D70 23          	INX	H
2210   1D71 23          	INX	H
2211   1D72 CD EF 15    	CALL	ICP7
2212   1D75 7E          	MOV	A,M	;GET CHAR
2213   1D76 FE A8       	CPI	'('+200O	;IS IT A (?
2214   1D78 C2 F6 1B    	JNZ	ER7	;BAD
2215   1D7B CD EF 15    	CALL	ICP7	;BUMP PNTRS
2216   1D7E CD 2A 12    	CALL	CVB	;GET SUB
2217   1D81 85          	ADD	L	;UPDATA H,L
2218   1D82 6F          	MOV	L,A
2219   1D83 3E 00       	MVI	A,0
2220   1D85 8C          	ADC	H
2221   1D86 67          	MOV	H,A	;D NOW CONTAINS SUB
2222   1D87 E5          	PUSH	H	;SAVE HL
2223   1D88 21 CA 1F    	LXI	H,SUBS	;GET START OF SUB TABLE
2224   1D8B 7E          NUSUB:	MOV	A,M	;GET ENTRY
2225   1D8C BA          	CMP	D	;COMPARE
2226   1D8D CA 9C 1D    	JZ	FNDSB	;FOUND IT
2227   1D90 23          	INX	H	;PNT TO NEXT
2228   1D91 23          	INX	H
2229   1D92 23          	INX	H
2230   1D93 3C          	INR	A	;CHECK TO SEE IF LAST WAS 377Q
2231   1D94 C2 8B 1D    	JNZ	NUSUB
2232   1D97 3E 15       	MVI	A,15H	;ER 15 - NO SUB BY THIS A *
2233   1D99 C3 B7 15    	JMP	ERROR
2234   1D9C 23          FNDSB:	INX	H
2235   1D9D 5E          	MOV	E,M
2236   1D9E 23          	INX	H
2237   1D9F 66          	MOV	H,M
2238   1DA0 6B          	MOV	L,E	;AND SAVE IT
2239   1DA1 22 5D 30    	SHLD	SBSAV
2240   1DA4 2A 59 30    	LHLD	NXTSP	;INIT MEMORY SCRATCH AREA
2241   1DA7 22 88 30    	SHLD	MESCR
2242   1DAA E1          	POP	H	;GET SOURCE PNTR
2243   1DAB 7E          PARLP:	MOV	A,M	;GET CHAR
2244   1DAC FE A9       	CPI	')'+200O	;IS IT )?
2245   1DAE CA DA 1D    	JZ	CLSUB	;YES - DO CALL SUN
2246   1DB1 FE AC       	CPI	','+200O	;DO WE HAVE A ','
2247   1DB3 C2 32 17    	JNZ	ER6	;UEXPECTED CHARACTER
2248   1DB6 CD EF 15    	CALL	ICP7	;BUMP PNTRS
2249   1DB9 CD 7B 18    	CALL	VAR	;DO WE HAVE A VARIABLE
2250   1DBC D2 C3 1D    	JNC	PREXP	;NO
2251   1DBF D5          	PUSH	D	;YES - SAVE ADDRESS
2252   1DC0 C3 AB 1D    	JMP	PARLP	;CONTINUE
2253   1DC3 CD D5 19    PREXP:	CALL	EVAL	;EVALUATE EXPRESSION
2254   1DC6 E5          	PUSH	H	;SAVE H,L
2255   1DC7 2A 88 30    	LHLD	MESCR	;GET SCRATCH AREA
2256   1DCA CD B1 17    	CALL	COPDH	;AND COPY TO IT
2257   1DCD D1          	POP	D	;HL TO DE
2258   1DCE E5          	PUSH	H	;SAVE ADDRESS
2259   1DCF 23          	INX	H	;UPDATE MESCR
2260   1DD0 23          	INX	H
2261   1DD1 23          	INX	H
2262   1DD2 23          	INX 	H
2263   1DD3 22 88 30    	SHLD	MESCR	;SAVE IT
2264   1DD6 EB          	XCHG		;GET H,L BACK
2265   1DD7             			; END OF PAGE 39
2266   1DD7 C3 AB 1D    	JMP	PARLP	;CONTINUE
2267   1DDA 2A 5D 30    CLSUB:	LHLD	SBSAV	;START OF ROUTINE
2268   1DDD E9          	PCHL		;TRANSFER
2269   1DDE             
2270   1DDE             ;GOGUB PROCESSOR
2271   1DDE 21 92 16    GOSUB:	LXI	H,ILOOP	;FOR RETURN STMT.
2272   1DE1 E5          	PUSH	H	;TO STACK
2273   1DE2 2A 56 30    	LHLD	KFPNT	;PNTR. TO NEXT STMT.
2274   1DE5 E5          	PUSH	H	;SAVE ON STACK
2275   1DE6 2A 59 30    	LHLD	NXTSP	;CHECK MEMORY
2276   1DE9 CD 0D 15    	CALL	MEMFUL
2277   1DEC 2A 5B 30    	LHLD	CPNT	;GET CHAR. PNTR
2278   1DEF 23          	INX 	H
2279   1DF0 C3 09 17    	JMP	GSENT	;PART OF GOTO TO FINISH
2280   1DF3             
2281   1DF3             ;RETURN STMT. PROCESSOR
2282   1DF3 E1          RETRN:	POP	H	;GET RETURN ADD. FROM STACK
2283   1DF4 C9          	RET		;CONTINUE
2284   1DF5             
2285   1DF5             ;FOR STATEMENT PROCESSOR
2286   1DF5 2A 5B 30    FOR:	LHLD	CPNT	;FIX PNTRS
2287   1DF8 0C          	INR	C
2288   1DF9 23          	INX	H
2289   1DFA 23          	INX	H
2290   1DFB CD EF 15    	CALL	ICP7
2291   1DFE CD 22 12    	CALL	ALPHA	;LETTER?
2292   1E01 D2 A3 1F    	JNC	ER21	;NO
2293   1E04 46          	MOV	B,M	;GET IT TO B
2294   1E05 CD EF 15    	CALL	ICP7	;BUMP PNTR'S
2295   1E08 51          	MOV	D,C	;SAVE C
2296   1E09 0E 00       	MVI	C,0	;INIT C TO 0
2297   1E0B CD 14 12    	CALL	NUMB	;NUMBER?
2298   1E0E D2 17 1E    	JNC	$+9	;NO
2299   1E11 4E          	MOV	C,M	;YES GET IT
2300   1E12 23          	INX	H	;BUM6 PNTR'S
2301   1E13 15          	DCR	D
2302   1E14 CA F6 1B    	JZ	ER7	;PREMATURE EOL
2303   1E17 E5          	PUSH	H	;SAVE H,L
2304   1E18 CD 05 16    	CALL	FSYM	;GET VAR. LOCATION
2305   1E1B E3          	XTHL		;PUT ON STACK GET H,L
2306   1E1C 59          	MOV	E,C	;VARIABLE TO D,E
2307   1E1D 4A          	MOV	C,D	;RESTORE C
2308   1E1E 50          	MOV	D,B
2309   1E1F EB          	XCHG		;SAVE VAR NAME
2310   1E20 22 8C 30    	SHLD	VNAME
2311   1E23 EB          	XCHG		;RESTORE H,L
2312   1E24 7E          	MOV	A,M	;LOOK FOR =
2313   1E25 FE BD       	CPI	'=' | 200O
2314   1E27 C2 8A 1F    	JNZ	ER16
2315   1E2A CD EF 15    	CALL	ICP7	;BUMP PNTR'S
2316   1E2D CD D5 19    	CALL	EVAL	;EVALUATE EXPRESSION
2317   1E30 E3          	XTHL		;VARIABLE LOCATION
2318   1E31 CD B1 17    	CALL	COPDH	;WRITE VALUE
2319   1E34 22 8E 30    	SHLD	VLOC	;SAVE PNTR TO VARIABLE LOCATION
2320   1E37 E1          	POP	H	;GET H,L BACK
2321   1E38 79          	MOV	A,C	;CHECK EOL
2322   1E39 B7          	ORA	A
2323   1E3A CA F6 1B    	JZ	ER7
2324   1E3D 3E 02       	MVI	A,2	;CHECK FOR 'TO'
2325   1E3F CD F4 12    	CALL	SYMSRT
2326   1E42 FE 07       	CPI	7
2327   1E44 C2 8F 1F    	JNZ	ER17
2328   1E47 23          	INX	H	;BUMB PNTR'S
2329   1E48 23          	INX	H
2330   1E49 79          	MOV	A,C	;CHECK EOL
2331   1E4A B7          	ORA	A
2332   1E4B CA F6 1B    	JZ	ER7
2333   1E4E CD D5 19    	CALL	EVAL	;EVALUATE LIMIT
2334   1E51 E5          	PUSH	H	;SAVE H,L
2335   1E52 21 90 30    	LXI	H,FLIMT	;SAVE LIMIT VALUE
2336   1E55 CD B1 17    	CALL	COPDH
2337   1E58 79          	MOV	A,C	;CHECK EOL
2338   1E59 B7          	ORA	A
2339   1E5A C2 64 1E    	JNZ	STP
2340   1E5D 11 E3 1E    	LXI	D,FONE	;DEFAULT STEP=1
2341   1E60 E1          	POP	H	;RESTORE H,L
2342   1E61 C3 79 1E    	JMP	FBILD
2343   1E64 E1          STP:	POP	H	;GET H,L
2344   1E65 3E 02       	MVI	A,2	;LOOK TOR 'STEP'
2345   1E67 CD F4 12    	CALL	SYMSRT
2346   1E6A FE 08       	CPI	8
2347   1E6C C2 8F 1F    	JNZ	ER17
2348   1E6F 23          	INX	H	;FIX H,L
2349   1E70 23          	INX	H
2350   1E71 23          	INX	H
2351   1E72 0C          	INR	C	;CHECK EOL
2352   1E73 CD EF 15    	CALL	ICP7
2353   1E76 CD D5 19    	CALL	EVAL	;GET STEP SIZE
2354   1E79             
2355   1E79             ;AT THIS POINT:
2356   1E79             ;VARIABLE NAME IS IN LOCATION VNAME
2357   1E79             ;VARIABLE ADDRESS IS IN LOCATION VLOC
2358   1E79             ;VARIBLE HAS BEEN INITIALIZED
2359   1E79             ;LIMIT IS IN 4 BYTE LOCATION FLIMT
2360   1E79             ;STEP IS POINTED TO BY D,E
2361   1E79             ;H,L,C ARE POINTER, COUNTER AS USUAL
2362   1E79 D5          FBILD:	PUSH	D	;SAVE PNTR TO STEP
2363   1E7A             			; END OF PAGE 40
2364   1E7A             		
2365   1E7A 2A 8C 30    	LHLD	VNAME	; GET VARIABLE NAME
2366   1E7D 3E 3F       	MVI	A,77O	;MASK
2367   1E7F A4          	ANA	H	;MASK OFF TOP 2 BITS
2368   1E80 47          	MOV	B,A 	;SET UP CALL TO FSYM
2369   1E81 4D          	MOV	C,L
2370   1E82 CD 05 16    	CALL	FSYM	;FIND ENTRY
2371   1E85 DA 9B 1E    	JC	FEXST	;IT WAS THERE
2372   1E88 E5          	PUSH	H	;IT WASN'T, SAVE H,L
2373   1E89 2A 59 30    	LHLD	NXTSP	;UPDATE NSTSP
2374   1E8C 3E 08       	MVI	A,8	;ADD 8 TO H,L
2375   1E8E 85          	ADD	L
2376   1E8F 6F          	MOV	L,A
2377   1E90 3E 00       	MVI	A,0
2378   1E92 8C          	ADC	H
2379   1E93 67          	MOV	H,A
2380   1E94 22 59 30    	SHLD	NXTSP	;NEW VALUE OF NXTSP
2381   1E97 CD 0D 15    	CALL	MEMFUL	;CHECK MEMROY
2382   1E9A E1          	POP	H	;GET ADD. IN DATA BLOCK
2383   1E9B D1          FEXST:	POP	D	;ADDRESS OF STEP SIZE 
2384   1E9C CD B1 17    	CALL	COPDH	;STORE IT 
2385   1E9F 23          	INX	H	;TO WHERE VAR. PNTR GOES
2386   1EA0 23          	INX	H
2387   1EA1 23          	INX	H
2388   1EA2 23          	INX	H
2389   1EA3 3A 8E 30    	LDA	VLOC	;FIRST BYTE
2390   1EA6 77          	MOV	M,A	;STORE IT 
2391   1EA7 23          	INX	H
2392   1EA8 3A 8F 30    	LDA	VLOC+1	;SECOND BYTE
2393   1EAB 77          	MOV	M,A
2394   1EAC 23          	INX	H	;POINT TO WHERE LIMIT GOES
2395   1EAD 11 90 30    	LXI	D,FLIMT	;WHERE IT IS NOW
2396   1EB0 CD B1 17    	CALL	COPDH	;COPY IT
2397   1EB3 23          	INX	H	;PNT TO WHERE KFPNT GOES
2398   1EB4 23          	INX	H
2399   1EB5 23          	INX	H
2400   1EB6 23          	INX	H
2401   1EB7 3A 56 30    	LDA	KFPNT	;1ST BYTE
2402   1EBA 77          	MOV	M,A
2403   1EBB 23          	INX	H
2404   1EBC 3A 57 30    	LDA	KFPNT+1	;2ND BYTE
2405   1EBF 77          	MOV	M,A
2406   1EC0             
2407   1EC0             ;PUT CURRENT VNAME ON NESTING STACK
2408   1EC0 21 00 00    	LXI	H,0 	;GET STACK-POINTER
2409   1EC3 39          	DAD 	SP
2410   1EC4 22 8E 30    	SHLD	VLOC	;SAVE IT
2411   1EC7 2A 94 30    	LHLD	NEST	;GET NEST SP
2412   1ECA 7D          	MOV	A,L	;COMPARE WITH STACK LIMIT
2413   1ECB FE 96       	CPI	TOPNS & 377O	;NEED ONLY COMPARE PAGE LOCATION
2414   1ECD CA 94 1F    	JZ	ER18	;FOR'S NESTED TOO DEEPLY		
2415   1ED0 F9          NSTOK: 	SPHL		;LOAD NEW SP
2416   1ED1 EB          	XCHG		;SAVE NEST SP
2417   1ED2 2A 8C 30    	LHLD	VNAME	;GET INDEX NAME
2418   1ED5 E5          	PUSH	H	;SAVE IT
2419   1ED6 1B          	DCX	D	;UPDATE NEST SP
2420   1ED7 1B          	DCX 	D
2421   1ED8 EB          	XCHG		;SAVE IT
2422   1ED9 22 94 30    	SHLD	NEST
2423   1EDC 2A 8E 30    	LHLD	VLOC	;RESTORE OLD SP
2424   1EDF F9          	SPHL
2425   1EE0 C3 9A 1B    	JMP	IEND
2426   1EE3 80 00 00 01 FONE:	.DB	200O,0,0,001O	;FLOATING PNT ONE
2427   1EE7             
2428   1EE7             ;NEXT STATEMENT PROCESSOR
2429   1EE7 2A 5B 30    NEXT:	LHLD	CPNT 	;FIX PNTR'S
2430   1EEA 23          	INX	H
2431   1EEB 23          	INX	H
2432   1EEC 23          	INX	H
2433   1EED 0C          	INR	C
2434   1EEE CD EF 15    	CALL	ICP7
2435   1EF1 CD 22 12    	CALL	ALPHA	;LETTER?
2436   1EF4 D2 A3 1F    	JNC	ER21	;NO ERROR
2437   1EF7 46          	MOV	B,M	;YES, GET IT
2438   1EF8 51          	MOV	D,C	;SAVE C 
2439   1EF9 0E 00       	MVI	C,0	;INIT C TP 0 
2440   1EFB 23          	INX	H	;BUMP PNTR'S
2441   1EFC 15          	DCR	D
2442   1EFD CA 0B 1F    	JZ	NEXT1
2443   1F00 CD 14 12    	CALL	NUMB	;NUMBER?
2444   1F03 D2 A3 1F    	JNC	ER21	;NO ERROR
2445   1F06 4E          	MOV	C,M	;YFF, GET IT
2446   1F07 15          	DCR	D	;SHOULD BE EOL
2447   1F08 C2 A3 1F    	JNZ	ER21
2448   1F0B 21 00 00    NEXT1:	LXI	H,0	;GET SP
2449   1F0E 39          	DAD	SP
2450   1F0F 22 8E 30    	SHLD	VLOC	;SAVE IT
2451   1F12 2A 94 30    	LHLD	NEST	;GET NEST SP
2452   1F15 7D          	MOV	A,L	;COMPARE WITH BOTTOM
2453   1F16 FE C2       	CPI 	BOTNS & 377O
2454   1F18 CA 99 1F    	JZ	ER19	;NEXT BEFORE FOR
2455   1F1B F9          	SPHL		;LOAD SP
2456   1F1C E1          	POP	H	;GET LAST INDEX
2457   1F1D 78          	MOV	A,B	;COMPARE TO CURRENT
2458   1F1E BC          	CMP	H
2459   1F1F C2 9E 1F    	JNZ	ER20	;NESTING ERROR
2460   1F22             			; END OF PAGE 41
2461   1F22 79          	MOV	A,C
2462   1F23 BD          	CMP	L
2463   1F24 C2 9E 1F    	JNZ	ER20
2464   1F27 2A 8E 30    	LHLD	VLOC	;ALL OK, RESTORE OLD SID
2465   1F2A F9          	SPHL
2466   1F2B 3E 3F       	MVI	A,77O	;MASK
2467   1F2D A0          	ANA	B	;MASK OUT TOP 2 BITS
2468   1F2E 47          	MOV	B,A
2469   1F2F CD 05 16    	CALL	FSYM	;FIND SYMBOL
2470   1F32 EB          	XCHG		;ADDRESS TO D,E
2471   1F33 21 7C 30    	LXI	H,FREG1	;COPY STEP TO FREG1
2472   1F36 CD B1 17    	CALL	COPDH
2473   1F39 13          	INX	D	;PNT TO CHARACTERISTIC OF STEP
2474   1F3A 13          	INX	D
2475   1F3B 13          	INX	D
2476   1F3C 1A          	LDAX	D	;GET LT
2477   1F3D E6 80       	ANI	200O	;GET SIGN
2478   1F3F 17          	RAL		;ROTATE IT INTO CARRY
2479   1F40 3F          	CMC		;COMPLEMENT IT
2480   1F41 3E 00       	MVI	A,0O	;MAKE SURE ASO
2481   1F43 17          	RAL		;ROTATE TO LS5
2482   1F44 3C          	INR	A	;SUMR BY ONE
2483   1F45 32 8E 30    	STA	VLOC	;SAVE IT	TS AL IF - STEP,ELSES
2484   1F48 13          	INX	D	;PNT TO QARJIABLE PNTR
2485   1F49 EB          	XCHG		;GET IT TO DE
2486   1F4A 5E          	MOV	E,M
2487   1F4B 23          	INX	H
2488   1F4C 56          	MOV	D,M
2489   1F4D 23          	INX	H
2490   1F4E E5          	PUSH	H	;SAVE DATA BLOCK PNTR
2491   1F4F 21 80 30    	LXI	H,FREG2	;COPY VARIBLE VALUE TB FAEG2
2492   1F52 CD B1 17    	CALL	COPDH	;SAVE VARIABLE LOCATION IN H,L
2493   1F55 EB          	XCHG
2494   1F56 3E 02       	MVI	A,2	;SET UP TO ADD
2495   1F58 CD 49 1A    	CALL	BINOP	;AND DO IT
2496   1F5B CD B1 17    	CALL	COPDH	;COPY TO VARIABLE
2497   1F5E 21 7C 30    	LXI	H,FREG1	;AND TO FREGI FOR COMPARE
2498   1F61 CD B1 17    	CALL	COPDH
2499   1F64 D1          	POP	D	;PNT TO LIMIT
2500   1F65 21 80 30    	LXI	H,FREG2	;COPY TO FREG2
2501   1F68 CD B1 17    	CALL	COPDH
2502   1F6B D5          	PUSH	D	;SAVE DATA BLOCK PNTR
2503   1F6C CD 31 1D    	CALL	FCOMP	;COMPARE
2504   1F6F 21 8E 30    	LXI	H,VLOC	;COMPARE WITH STEP TYPE
2505   1F72 BE          	CMP	M
2506   1F73 E1          	POP	H	;GET DATA BLOCK PNTR.
2507   1F74 CA 82 1F    	JZ	NXTDN	;YES => LOOP DONE
2508   1F77 23          	INX	H	;LOOP NOT DONE
2509   1F78 23          	INX	H	;PNT TO TRANSFER ADD.
2510   1F79 23          	INX	H
2511   1F7A 23          	INX	H
2512   1F7B 5E          	MOV	E,M	;GET IT TO H,L
2513   1F7C 23          	INX	H
2514   1F7D 56          	MOV	D,M
2515   1F7E EB          	XCHG
2516   1F7F C3 92 16    	JMP	ILOOP
2517   1F82 21 94 30    NXTDN:	LXI	H,NEST	;POP NEST STACK
2518   1F85 34          	INR	M
2519   1F86 34          	INR	M
2520   1F87 C3 9A 1B    	JMP	IEND	;CONTINUE
2521   1F8A 3E 16       ER16:	MVI	A,16H	;'=' EXPECTED(NOTE: NO ARRAY ELEMENTS
2522   1F8C C3 B7 15    	JMP	ERROR	;FOR INDICES)
2523   1F8F 3E 17       ER17:	MVI	A,17H	;BAD SYNTAX NEAR 'TO' OR 'STEP'
2524   1F91 C3 B7 15    	JMP	ERROR	;IN FOR STATEMENT
2525   1F94 3E 18       ER18:	MVI	A,18H	;FOR'S NESTED TOO DEEPLY
2526   1F96 C3 B7 15    	JMP	ERROR
2527   1F99 3E 19       ER19:	MVI	A,19H	;'NEXT' EXECUTED BEFORE A 'FOR'
2528   1F9B C3 B7 15    	JMP	ERROR
2529   1F9E 3E 20       ER20:	MVI	A,20H	;NESTIMG ERROR, 'FOR'-'NEXT'
2530   1FA0 C3 B7 15    	JMP	ERROR
2531   1FA3 3E 21       ER21:	MVI	A,21H	;BAD INDEX IN FOR-NEXT
2532   1FA5 C3 B7 15    	JMP	ERROR
2533   1FA8             
2534   1FA8             ;THIS SUB CHECKS FOR PAGE BOUNDARY CROSSING
2535   1FA8             ;OF VARIABLE STORAGE BEFORE UPDATING
2536   1FA8             ;FORWARD POINTER
2537   1FA8             ;	D-E POINT TO CURRENT LOCATION OF NEXT VARIABLE
2538   1FA8             ;	H-L POINT TO PREVIOUS VARIABLE LOCATION
2539   1FA8             ;MODIFY D-E ( IF NECESSARY ) SO VARIABLE WILL NOT CROSS PAGE BOUNDARY
2540   1FA8             CHKLC:
2541   1FA8 F5          	PUSH	PSW
2542   1FA9 D5          	PUSH	D	;SEE IF CURRENT VARIABLE
2543   1FAA 3E 07       	MVI	A,7	;STORAGE 8 WORD BLOCK
2544   1FAC 83          	ADD	E	;WILL CROSS PAGE BOUNDARY
2545   1FAD DA B3 1F    	JC	CHOVL
2546   1FB0             ;OK - DOES NOT CROSS PAGE
2547   1FB0 D1          	POP	D
2548   1FB1 F1          	POP	PSW
2549   1FB2 C9          	RET
2550   1FB3             
2551   1FB3             ;PAGE BOUNDARY CROSSED - SET D-E TO START OF NEXT PAGE
2552   1FB3             CHOVL:			; END OF PAGE 42
2553   1FB3             	
2554   1FB3             	
2555   1FB3 D1          	POP	D
2556   1FB4 14          	INR	D
2557   1FB5 1E 00       	MVI	E,0
2558   1FB7 F1          	POP	PSW
2559   1FB8 C9          	RET
2560   1FB9             
2561   1FB9             ;THIS SUB IS CALLED PROM 'DIM' PROCESSOR
2562   1FB9             ;REGS. 'D-E' POINT TO NEXT AVAILABLE WORD OF VARIABLE STORAGE
2563   1FB9             ;THIS SUB MAKES SURE THAT STORAGE STARTS ON A 4-WORD
2564   1FB9             ;BOUNDARY SO FLT. PT. NUMBER WILL NOT CROSS PAGE
2565   1FB9             CKDIM:
2566   1FB9 7B          	MOV	A,E
2567   1FBA E6 03       	ANI	3
2568   1FBC C8          	RZ
2569   1FBD 7B          	MOV	A,E
2570   1FBE E6 FC       	ANI	374O
2571   1FC0 C6 04       	ADI	4
2572   1FC2 5F          	MOV	E,A
2573   1FC3 7A          	MOV	A,D
2574   1FC4 CE 00       	ACI	0
2575   1FC6 57          	MOV	D,A
2576   1FC7 C9          	RET
2577   1FC8             	
2578   1FC8             ;CALL ROUTINES
2579   1FC8 AA 30       FWAM:	.DW VEND	;DEFINE FWAM POINTER
2580   1FCA             	
2581   1FCA             ;ENTRIES TO SUBTABLE
2582   1FCA             SUBS:
2583   1FCA FF          	.DB 377O	;END OF TABLE
2584   1FCB             
2585   1FCB             ;	////FLOATING POINT PACKAGE FOR THE MCS8
2586   1FCB             ;	////BY DAVID MEAD
2587   1FCB             ;	////MODIFIED BY HAL BRAND 9/6/74
2588   1FCB             ;	////MODIFIED FOR 24.BIT MATNTISSAS**********
2589   1FCB             ;	////PLUS ADDED I/O CONVERSION ROUTINES
2590   1FCB             ;	////NEW ROUTINE COMMENTS
2591   1FCB             ;	////ARE PRECEEDED BY /
2592   1FCB             ;	////OTHER CHANGES ARE NOTED BY **
2593   1FCB             ;	////MODIFIED BY FRANK OLKEN 6/28/75
2594   1FCB             	
2595   0800             	.ORG 4000O
2596   0800             	
2597   0800             OUTR	.EQU	 7775O	;LINK TO BASIC
2598   0800             OUTL	.EQU	13711O
2599   0800             INL	.EQU 	14606O
2600   0800             INP	.EQU	 7772O	;LINK TO BASIC
2601   0800             MINCH	.EQU	  300O	;MIN. CHARACTERISTIC WITH SIGN EXTENDED
2602   0800             MAXCH	.EQU	  077O	;MAX. CHARACTERISTIC WITH SIGN EXTENDED
2603   0800             
2604   0800             ;
2605   0800             ;************************************************************
2606   0800             ;	//// DIVIDE SUBROUTINE
2607   0800             ;************************************************************
2608   0800             ;
2609   0800             ;
2610   0800             LDIV:
llbasic.asm line 2610: label value misalligned.           (LDIV)
2611   0800 CD 6F 0B    	CALL	CSIGN	;COMPUTE SIGN OF RESULT
2612   0803 CD DA 09    	CALL	ZCHK	;CHECK IF DIVIDEND = ZERO
2613   0806 C2 12 08    	JNZ	DTST2	;IF DIVIDEND .NE. 0 CHECK DIVISOR
2614   0809 CD E2 09    	CALL	BCHK	;CHECK FOR ZERO/ZERO
2615   080C CA AE 0A    	JZ	INDFC	;ZERO/ZERO = INDEFINITE
2616   080F C3 B5 0A    	JMP	WZERC	;ZERO/NONZERO = ZERO
2617   0812 CD E2 09    DTST2:	CALL	BCHK	;COME HERE IF DIVIDEND .NE. 0
2618   0815 CA 61 0B    	JZ	OFLWC	;NONZERO/ZERO = OVERFLOW
2619   0818             			;IF WE GET HERE, THINGS LOOK OKAY
2620   0818 5D          	MOV	E,L	;SAVE BASE IN E
2621   0819 69          	MOV	L,C	;BASE\6 TO L
2622   081A CD 1D 0A    	CALL	DCLR	;CLEAR QUOTIENT MANTISSA SLOT
2623   081D 6B          	MOV 	L,E	;RESTORE BASE IN L
2624   081E CD 16 0B    	CALL	ENT1	;DO FIRST CYCLE
2625   0821 69          	MOV	L,C	;BASE \6 TO L
2626   0822 CD E9 09    	CALL	DLST	;MOVE QUOTIENT OVER ONE PLACE
2627   0825 16 17       	MVI	D,23	;NUMBER OF ITERATIONS TO D
2628   0827 6B          REP3: 	MOV	L,E
2629   0828 CD 10 0B    	CALL	ENT2
2630   082B 15          	DCR	D	;DEC D
2631   082C CA 3B 08    	JZ	GOON
2632   082F 7D          	MOV	A,L
2633   0830 69          	MOV	L,C	;BASE\6 TO L
2634   0831 4F          	MOV 	C,A
2635   0832 CD E9 09    	CALL 	DLST	;MOVE QUOTIENT MANT OVER
2636   0835 7D          	MOV 	A,L	;CPTR TO A
2637   0836 59          	MOV	E,C	;LPTR TO E
2638   0837 4F          	MOV	C,A	;CPTR TO C
2639   0838 C3 27 08    	JMP	REP3
2640   083B CD E7 0A    GOON:	CALL	AORS	;CHECK IF RESULT IS NORMALIZED
2641   083E FA 4D 08    	JM	CRIN
2642   0841 7D          	MOV	A,L	;LPTR TO A
2643   0842             			;END OF PAGE 43
2644   0842             	
2645   0842 69          	MOV	L,C	;CPTR TO L
2646   0843 4F          	MOV	C,A	;LPTR TO C
2647   0844 CD E9 09    	CALL	DLST	;SHIFT QUOTIENT LEFT
2648   0847 4D          	MOV 	C,L
2649   0848 6B          	MOV 	L,E
2650   0849 CD 3F 0B    	CALL	LDCP	;COMPUTE THE CHARACTERISTIC OF RESULT
2651   084C C9          	RET
2652   084D             
2653   084D CD 4C 0A    CRIN:	CALL	CFCHE	;GET A=CHAR(H,L), E=CHAR(H,B)
2654   0850 93          	SUB	E	;NEW CHAR = CHAR(DIVIDEND) - CHAR
2655   0851 FE 7F       	CPI	177O	;CHECK MAX POSITIVE NUMBER (DIVISIOR)
2656   0853 CA 61 0B    	JZ	OFLWC	;JUMP ON OVERFLOW
2657   0856 C6 01       	ADI	1	;ADD 1 SINCE WE DID NOT LEFTSHIFT
2658   0858 CD 4A 0B    	CALL	CCHK	;CHECK AND STORE CHARACTERISTIC
2659   085B C9          	RET		;RETURN
2660   085C             ;
2661   085C             ;
2662   085C             ;**************************************************************	
2663   085C             ;	////ADDITION SUBROUTINE
2664   085C             ;**************************************************************	
2665   085C             ;
2666   085C             ;	
2667   085C             LADD:
llbasic.asm line 2667: label value misalligned.           (LADD)
2668   085C AF          	XRA	A	;/***SET UP TO ADD
2669   085D C3 62 08    	JMP 	LADS	;/NOW DO IT
2670   0860             
2671   0860             ;
2672   0860             ;
2673   0860             ;**************************************************************	
2674   0860             ;	////SUBTRACTION SUBROUTINE
2675   0860             ;**************************************************************	
2676   0860             ;
2677   0860             ;	
2678   0860             LSUB:
llbasic.asm line 2678: label value misalligned.           (LSUB)
2679   0860 3E 80       	MVI	A,200O	;/****SET UP TO SUBTRACT
2680   0862             ;			SUBROUTINE LADS
2681   0862             ;			FLOATING POINT ADD OR SUB
2682   0862             ;			A[128 ON ENTRY [SUB
2683   0862             ;			A[0 ON ENTRY [ADD
2684   0862             ;			F-S[F,FIRST OPER DESTROYED
2685   0862             ;			BASE \11 USED FOR SCRATCH
2686   0862 CD F5 0A    LADS:	CALL	ACPR	;SAVE ENTRY PUT AT BASE \6
2687   0865 CD E2 09    	CALL	BCHK	;CHECK ADDEND/SUBTRAHEND = ZERO
2688   0868 C8          	RZ		;IF SO RESULT=ARG SO RETURN
2689   0869             			;THIS WILL PREVENT UNDERFLOW INDICATION
2690   0869             			;ZERO + OR - ZERO
2691   0869 CD 5B 0A    	CALL	CCMP
2692   086C CA 9C 08    	JZ	E002	;IF EQUAL GO ON
2693   086F 57          	MOV	D,A	;SAVE LPTR CHAR IN D
2694   0870 DA 7F 08    	JC	LLTB	
2695   0873 93          	SUB 	E	;L.GT.B IF HERE
2696   0874 E6 7F       	ANI	127
2697   0876 57          	MOV	D,A	;DIFFERENCE TO D
2698   0877 5D          	MOV	E,L	;SAVE BASE IN E
2699   0878 69          	MOV	L,C	;C PTR TO L
2700   0879 2C          	INR	L	;C PTR\1 TO L
2701   087A 73          	MOV	M,E	;SAVE BASE IN C PTR\1
2702   087B 68          	MOV	L,B	;B PTR TO L
2703   087C C3 84 08    	JMP	NCHK
2704   087F 7B          LLTB:	MOV	A,E	;L.LT.B IF HERE, BPTR TO A
2705   0880 92          	SUB	D	;SUBTRACT LPTR CHAR FROM BPTR CHAR
2706   0881 E6 7F       	ANI	127
2707   0883 57          	MOV	D,A	;DIFFERENCE TO 0
2708   0884 3E 18       NCHK:	MVI	A,24
2709   0886 BA          	CMP	D
2710   0887 D2 8C 08    	JNC	SH10
2711   088A 16 18       	MVI	D,24
2712   088C B7          SH10:	ORA	A
2713   088D CD F8 09    	CALL	DRST
2714   0890 15          	DCR	D
2715   0891 C2 8C 08    	JNZ	SH10
2716   0894 7D          EQUL:	MOV	A,L
2717   0895 B8          	CMP	B
2718   0896 C2 9C 08    	JNZ	E002	;F.GT.S IF L.NE.B
2719   0899 69          	MOV	L,C	;C PTR TO L
2720   089A 2C          	INR 	L	;C PTR\1 TO L
2721   089B 6E          	MOV	L,M	;RESTORE L
2722   089C CD 02 09    E002:	CALL	LASD	;CHECK WHAT TO
2723   089F CD F5 0A    	CALL	ACPR	;SAVE ANSWER
2724   08A2 FE 02       	CPI	2	;TEST FOR ZERO ANSWER
2725   08A4 C2 AA 08    	JNZ	NOTO
2726   08A7 C3 93 0A    	JMP	WZER	;WRITE FLOATING ZERO AND RETURN
2727   08AA 16 01       NOTO:	MVI	D,1	;WILL TEST FOR SUB
2728   08AC A2          	ANA	D
2729   08AD CA D6 08    	JZ	ADDZ	;LSB[1 IMPLIES SUB
2730   08B0 CD ED 0A    	CALL	TSTR	;CHECK NORMAL/REVERSE
2731   08B3 CA B9 08    	JZ	SUBZ	;IF NORMAL,GO SUBZ
2732   08B6 7D          	MOV	A,L	;OTHERWISE REVERSE
2733   08B7 68          	MOV	L,B	;ROLES
2734   08B8 47          	MOV	B,A	;OF L AND B
2735   08B9 CD 26 0A    SUBZ:	CALL	DSUB	;SUBTRACT SMALLER FROM BIGGER
2736   08BC CD EF 08    	CALL	MANT	;SET UP SIGN OF RESULT
2737   08BF CD ED 0A    	CALL	TSTR	;SEE IF WE NEED TO INTERCHANGE
2738   08C2             			;BPTR AND LPTR
2739   08C2             			; END OF PAGE 44
2740   08C2             
2741   08C2 CA C7 0F    	JZ	NORM	;NO INTERCHANGE NECESSARY,NONORMALIZE
2742   08C5             			;AND RETURN
2743   08C5 7D          	MOV	A,L	;INTERCHANGE
2744   08C6 68          	MOV	L,B	;L
2745   08C7 47          	MOV	B,A	;AND B
2746   08C8 79          	MOV	A,C	;CPTR	TO A
2747   08C9 48          	MOV	C,B	;BPTR TO C
2748   08CA 5D          	MOV	E,L	;LPTR TO E
2749   08CB 47          	MOV	B,A	;CPTR TO B
2750   08CC CD 2A 0B    	CALL	LXFR	;MOVE_BPTR> TO _LPTR>
2751   08CF 78          	MOV	A,B
2752   08D0 41          	MOV	B,C
2753   08D1 4F          	MOV	C,A
2754   08D2 6B          	MOV	L,E
2755   08D3 C3 C7 0F    	JMP	NORM	;NORMALIZE RESULT AND RETURN
2756   08D6             
2757   08D6             ;
2758   08D6             ;COPY THE LARGER CHARACTERISTIC TO THE RESULT
2759   08D6             ;
2760   08D6 CD 5B 0A    ADDZ:	CALL	CCMP	;COMPARE THE CHARACTERISTICS
2761   08D9 D2 DF 08    	JNC	ADD2	;IF CHAR(H,L) .GE. CHAR(H,B) CONTINUE
2762   08DC CD 93 0B    	CALL	BCTL	;IF CHAR(H,L) .LT. CHAR(H,B) THEN COPY
2763   08DF             			;CHAR(H,B) TO CHAR(H,L)
2764   08DF CD EF 08    ADD2:	CALL	MANT	;CONPUTE SIGN OF RESULT
2765   08E2 CD 06 0A    	CALL	DADD	;ADD MANTISSAS
2766   08E5 D2 D8 0A    	JNC	SCCFG	;IF THERE IS NO OVFLW - DONE
2767   08E8 CD F8 09    	CALL	DRST	;IF OVERFLOW SHIFT RIGHT
2768   08EB CD BC 0A    	CALL	INCR	;AND INCREMENT CHARACTERISTIC
2769   08EE C9          	RET		;ALL DONE, SO RETURN
2770   08EF             
2771   08EF             ;
2772   08EF             ;THIS ROUTINE STORES THE MANTISSA SIGN IN THE RESULT
2773   08EF             ;THE SIGN HAS PREVIOCISLY BEEN COMPUTED BY LASD.
2774   08EF             ;
2775   08EF 5D          MANT:	MOV	E,L	;SAVE L PTR
2776   08F0 69          	MOV	L,C	;C PTR TO L
2777   08F1 7E          	MOV	A,M	;LOAD INDEX WORD
2778   08F2 E6 80       	ANI	128	;SCARF SIGN
2779   08F4 6B          	MOV	L,E	;RESTORE L PTR
2780   08F5 2C          	INR	L	;L PTR\2
2781   08F6 2C          	INR	L
2782   08F7 2C          	INR	L	;TO L
2783   08F8 5F          	MOV	E,A	;SAVE SIGN IN E
2784   08F9 7E          	MOV	A,M
2785   08FA E6 7F       	ANI	127	;SCARF CHAR
2786   08FC 83          	ADD	E	;ADD SIGN
2787   08FD 77          	MOV	M,A	;STORE IT
2788   08FE 2D          	DCR	L	;RESTORE
2789   08FF 2D          	DCR	L
2790   0900 2D          	DCR	L	;L PTR
2791   0901 C9          	RET
2792   0902             
2793   0902             ;SUBROUTINE LASD
2794   0902             ;UTILITY ROUTINE FOR LADS
2795   0902             ;CALCULATES TRUE OPER AND SGN
2796   0902             ;RETURNS ANSWER IN ??
2797   0902 CD 7F 0B    LASD:	CALL	MSFH	;FETCH MANT SIGNS, F IN A,D
2798   0905 BB          	CMP	E	;COMPARE SIGN
2799   0906 DA 34 09    	JC	ABCH	;F\,S- MEANS GO TO A BRANCH
2800   0909 C2 3D 09    	JNZ	BBCH	;F- S\ MEANS GO TO B BRANCH
2801   090C 83          	ADD	E	;SAME SIGN IF HERE, ADD SIGNS
2802   090D DA 22 09    	JC	BMIN	;IF BOTH MINUS WILL OVERFLOW
2803   0910 CD E7 0A    	CALL	AORS	;BOTH POS IF HERE
2804   0913 F2 46 09    	JP	L000	;IF AN ADD, LOAD 0
2805   0916 CD FA 0A    COM1:	CALL	DCMP	;COMPARE F WITH S
2806   0919 DA 54 09    	JC	L131	;S.GT.F, SO LOAD 131
2807   091C C2 48 09    	JNZ	L001	;F.GT.S, SO LOAD 1
2808   091F 3E 02       L002:	MVI	A,2	;ERROR CONDITION, ZERO ANSWER
2809   0921 C9          	RET
2810   0922 CD E7 0A    BMIN:	CALL	AORS	;CHECK FOR ADD OR SUB
2811   0925 F2 4E 09    	JP	L128	;ADD, SO LOAD 128
2812   0928 CD FA 0A    COM2:	CALL	DCMP	;COMPARE F WITH S
2813   092B DA 4B 09    	JC	L003	;S .GT. F SO LOAD 3
2814   092E C2 51 09    	JNZ	L129	;F.GT.S SO LOAD 129
2815   0931 C3 1F 09    	JMP	L002	;ERROR
2816   0934 CD E7 0A    ABCH:	CALL	AORS	;FT,S- SO TEST FOR A/S
2817   0937 FA 46 09    	JM	L000	;SUBTRACT, SO LOAD 0
2818   093A C3 16 09    	JMP	COM1	;ADD, SO GO TO DCMP
2819   093D CD E7 0A    BBCH:	CALL	AORS	;F-,S\, SO TEST FOR A/S
2820   0940 FA 4E 09    	JM	L128	;SUB
2821   0943 C3 28 09    	JMP	COM2	;ADD
2822   0946 AF          L000:	XRA	A
2823   0947 C9          	RET
2824   0948 3E 01       L001:	MVI	A,1
2825   094A C9          	RET
2826   094B 3E 03       L003:	MVI	A,3
2827   094D C9          	RET
2828   094E 3E 80       L128:	MVI	A,128
2829   0950 C9          	RET
2830   0951 3E 81       L129:	MVI	A,129
2831   0953 C9          	RET
2832   0954 3E 83       L131:	MVI	A,131
2833   0956 C9          	RET		; END OF PAGE 45
2834   0957             	
2835   0957             	
2836   0957             ;SUBROUTINE LMCM
2837   0957             ;COMPARES THE MAGNITUDE OF
2838   0957             ;TWO FLOATING PNT NUMBERS
2839   0957             ;Z[1 IF [,C[1 IF F.LT.S.
2840   0957             LMCM:
llbasic.asm line 2840: label value misalligned.           (LMCM)
2841   0957 CD 5B 0A    	CALL	CCMP	;CHECK CHARS
2842   095A C0          	RNZ		;RETURN IF NOT EQUAL
2843   095B CD FA 0A    	CALL	DCMP	;IF EQUAL, CHECK MANTS
2844   095E C9          	RET
2845   095F             
2846   095F             ;
2847   095F             ;
2848   095F             ;**************************************************************	
2849   095F             ;	////MULTIPLY SUBROUTINE
2850   095F             ;**************************************************************	
2851   095F             ;
2852   095F             ;	SUBROUTINE LMUL
2853   095F             ;	FLOATING POINT MULTIPLY
2854   095F             ;	L PTR X B PTR TO C PTR
2855   095F             LMUL:
llbasic.asm line 2855: label value misalligned.           (LMUL)
2856   095F CD 6F 0B    	CALL	CSIGN	;COMPUTE SION OF RESULT AND STORE IT
2857   0962 CD DA 09    	CALL	ZCHK	;CHECK FIRST OPERAND FOR ZERO
2858   0965 CA B5 0A    	JZ	WZERC	;ZERO X ANYTHING = ZERO
2859   0968 CD DA 09    	CALL	ZCHK	;CHECK SECOND OPERAND FOR ZERO
2860   096B CA B5 0A    	JZ	WZERC	;ANYTHING * ZERO = ZERO
2861   096E 5D          	MOV	E,L	;SAVE L PTR
2862   096F 69          	MOV	L,C	;C PTR TO L
2863   0970 CD 1D 0A    	CALL	DCLR	;CLR PRODCT MANT LOCS
2864   0973 6B          	MOV	L,E	;L PTR TO L
2865   0974 16 18       	MVI	D,24	;LOAD NUMBER ITERATIONS
2866   0976 CD F8 09    KPGO:	CALL	DRST	;SHIFT L PTR RIGHT
2867   0979 DA A4 09    	JC	MADD	;WILL ADD B PTR IF C[1
2868   097C 7D          	MOV	A,L	;INTERCHANGE
2869   097D 69          	MOV	L,C	;L AND
2870   097E 4F          	MOV	C,A	;C PTRS
2871   097F CD F8 09    INTR:	CALL	DRST	;SHIFT PRODUCT OVER
2872   0982 7D          	MOV	A,L	;INTERCHANGE
2873   0983 69          	MOV	L,C	;L AND C PTRS_BACK TO
2874   0984 4F          	MOV	C,A	;ORIGINAL>
2875   0985 15          	DCR	D
2876   0986 C2 76 09    	JNZ	KPGO	;MORE CYCLES IF Z[0
2877   0989 CD E7 0A    	CALL	AORS	;TEST IF RESULT IS NORMALIZED
2878   098C FA 46 0B    	JM	LMCP	;IF NORMALIZED GO COMPUTE CHAR
2879   098F 5D          	MOV	E,L	;SAVE LPTR IN E
2880   0990 69          	MOV	L,C	;SET L=CPTR
2881   0991 CD E9 09    	CALL	DLST	;LEFT SHIFT RESULT TO NORMALIZE
2882   0994 6B          	MOV	L,E	;RESTORE LPTR
2883   0995 CD 4C 0A    	CALL	CFCHE	;OTHERWISE SET A=CHAR(H,L),E=CHAR(H,B)
2884   0998 83          	ADD	E	;CHAR(RESULT) = CHAR(H,L)+CHAR(H,B)
2885   0999 FE 80       	CPI	200O	;CHECK FOR SMALLEST NEGATIVE NUMBER
2886   099B CA 68 0B    	JZ	UFLWC	;IF SO THEN UNDERFLOW
2887   099E D6 01       	SUI	1	;SUBTRACT 1 TO COMPENSATE FOR NORMALIZE
2888   09A0 CD 4A 0B    	CALL	CCHK	;CHECK CHARACTERISTIC AND STORE IT
2889   09A3 C9          	RET		;RETURN
2890   09A4             
2891   09A4 7D          MADD:	MOV	A,L	;INTERCHANGE
2892   09A5 69          	MOV	L,C	;L AND
2893   09A6 4F          	MOV	C,A	;C PTRS
2894   09A7 CD 06 0A    	CALL	DADD	;ACCUMULATE PRODUCT
2895   09AA C3 7F 09    	JMP	INTR
2896   09AD             
2897   09AD             ;
2898   09AD             ;SUBROUTINE NORM
2899   09AD             ;
2900   09AD             ;  THIS SUBROUTINE WILL NORMALIZE A FLOATING POINT
2901   09AD             ;  NUMBER PRESERVTNG ITS ORIGINAL SIGN.
2902   09AD             ;  WE CHECK FOR UNDERFLOW AND SET THE CONDITION
2903   09AD             ;  FLAG APPROPRIATELY. (SEE ERROR RETURNS).
2904   09AD             ;  THER IS AN ENTRY POINT TO FLOAT A SIGNED INTEGER
2905   09AD             ;  (FLOAT) AND AN ENTRY POINT TO FLOAT AN UNSIGNED
2906   09AD             ;  INTEGER.
2907   09AD             ;
2908   09AD             ;  ENTRY POINTS:
2909   09AD             ;
2910   09AD             ;  NORM  -  NORMALIZE FLOATING PT NUMBER AT (H,L)
2911   09AD             ;  FLOAT -	FLOAT TRIPLE PRECISION INTEGER AT (H,L)
2912   09AD             ;	PRESERVING SIGN BIT IN (H,L)+3
2913   09AD             ;  DFXL -	FLOAT UNSIGNED (POSITIVE) TRIPLE PRECISION
2914   09AD             ;	AT (H,L)
2915   09AD             ;
2916   09AD             ;  REGISTERS ON EXIT:
2917   09AD             ;    A = CONDITION FLAG (SEE ERROR RETURNS)
2918   09AD             ;    D,E = GARBAGE
2919   09AD             ;    B,C,H,L = SAME AS ON ENTRY
2920   09AD             ;	
2921   09AD             NORM:
llbasic.asm line 2921: label value misalligned.           (NORM)
2922   09AD 5D          	MOV	E,L	;SAVE L IN E
2923   09AE CD 41 0A    NORM1:	CALL	GCHAR	;GET CHAR(H,L) IN A WITH SIGN EXTENDED
2924   09B1 57          	MOV	D,A	;SAVE CHAR IN 0
2925   09B2 6B          FXL1:	MOV	L,E	;RESTORE L
2926   09B3 CD DA 09    FXL2:	CALL	ZMCHK	;CHECK FOR ZERO MANTISSA
2927   09B6 CA 93 0A    	JZ	WZER	;IF ZERO MANTISSA THEN ZERO RESULT
2928   09B9 7E          REP6:	MOV	A,M	;GET MOST SIGNIFICANT BYTE OF
2929   09BA             			;MANTISSA
2930   09BA             			; END OF PAGE 46
2931   09BA             
2932   09BA B7          	ORA	A	;SET FLAGS
2933   09BB FA CB 09    	JM	SCHAR	;IF MOST SIGNFICANT BIT = 1 THEN
2934   09BE             
2935   09BE             			;NUMBER IS NORMALIZED AND WE GO TO
2936   09BE             			;STORE THE CHARACTERISTIC
2937   09BE 7A          	MOV	A,D	;OTHERWISE CHECK FOR UNDERFLOW
2938   09BF FE C0       	CPI	MINCH	;COMPARE WITH MINIMUM CHAR
llbasic.asm line 2939: Label not found: (WUND)
llbasic.asm line 2939: Unused data in MS byte of argument. (2)
2939   09C1 CA 00 00    	JZ	WUND	;IF EQUAL THEN UNDERFLOW
2940   09C4 CD E9 09    	CALL	DLST	;SHIFT MANTISSA LEFT
2941   09C7 15          	DCR	D	;DECREMENT CHARACTERSTIC
2942   09C8 C3 B9 09    	JMP	REP6	;LOOP AN TEST NEXT BIT
2943   09CB C3 C9 0A    SCHAR:	JMP	INCR3	;STORE THE CHARACTERISTIC USING
2944   09CE             			;THE SAME CODE AS THE INCREMENT
2945   09CE             DFXL:
llbasic.asm line 2945: label value misalligned.           (DFXL)
2946   09CE 5D          	MOV	E,L	;ENTER HERE TO FLOAT UNSIGNED
2947   09CF             			;INTEGER
2948   09CF             			;FIRST SAVE L IN E
2949   09CF 2C          	INR	L	;MAKE (H,L) POINT TO CHAR
2950   09D0 2C          	INR	L	;MAKE (H,L) POINT TO CHAR
2951   09D1 2C          	INR	L	;MAKE (H L) POINT TO CHAR
2952   09D2 AF          	XRA	A	;ZERO ACCUMULATOR
2953   09D3 77          	MOV	M,A	;STORE A PLUS (+) SIGN
2954   09D4 6B          	MOV	L,E	;RESTORE L
2955   09D5             FLOAT:
llbasic.asm line 2955: label value misalligned.           (FLOAT)
2956   09D5 16 18       	MVI	D,24	;ENTER HERE TO FLOAT INTEGER
2957   09D7             			;PRESERVING ORIGINAL SIGN IN (H,L)+3
2958   09D7             			;SET UP CHARACTERISTIC
2959   09D7 C3 B3 09    	JMP	FXL2	;GO FLOAT THE NUMBER
2960   09DA             
2961   09DA             ;
2962   09DA             ;SUBROUTINE ZCHK
2963   09DA             ;
2964   09DA             ;  THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS
2965   09DA             ;  A FLOATING ZERO AT (H,L)
2966   09DA             ;
2967   09DA             ;SUBROUTINE ZMCHK
2968   09DA             ;  THIS ROUTINE SETS THE ZERO FLAG IF IT DETECTS A
2969   09DA             ;  ZERO MANTISSA AT (H,L)
2970   09DA             ;
2971   09DA             ZCHK:
2972   09DA 2C          ZMCHK:	INR	L	;SET L TO POINT LAST BYTE OF MANTISSA
2973   09DB 2C          	INR	L	;SET L TO POINT TO LAST BYTE OF MANT.
2974   09DC 7E          	MOV	A,M	;LOAD LEAST SIGNIFICANT BYTE
2975   09DD 2D          	DCR	L	;L POINTS TO MIDDLE BYTE
2976   09DE B6          	ORA	M	;OR WITH LEAST SIGNFICANT BYTE
2977   09DF 2D          	DCR	L	;L POINTS TO MOST SIGNFICANT BYTE
2978   09E0             			;OF MANTISSA (ORIGINAL VALUE)
2979   09E0 B6          	ORA	M	;OR IN MOST SIGNFICANT BYTE
2980   09E1 C9          	RET		;RETURNS WITH ZERO FLAG SET APPROPRIATELY
2981   09E2             
2982   09E2             ;
2983   09E2             ;SUBROUTINE BCHK
2984   09E2             ;
2985   09E2             ;  THIS ROUTINE CHECKS (H,B) FOR FLOATING PT ZERO
2986   09E2 5D          BCHK:	MOV	E,L	;SAVE LPTR IN E
2987   09E3 68          	MOV	L,B	;SET L=BPTR
2988   09E4 CD DA 09    	CALL	ZCHK	;CHECK FOR ZERO
2989   09E7 6B          	MOV	L,E	;RESTORE L=LPTR
2990   09E8 C9          	RET		;RETURN
2991   09E9             	
2992   09E9             ;
2993   09E9             ;SUBROUTINE DLST
2994   09E9             ;
2995   09E9             ;  SHIFTS .DBL WORD ONE PLACE LF
2996   09E9             ;
2997   09E9 2C          DLST:	INR	L
2998   09EA 2C          	INR	L	;/***TP
2999   09EB 7E          	MOV	A,M	;LOAD 17
3000   09EC B7          	ORA	A	;KILL CARRY
3001   09ED 17          	RAL		;SHIFT IT LEFT
3002   09EE 77          	MOV	M,A	;STORE IT
3003   09EF 2D          	DCR	L
3004   09F0 7E          	MOV 	A,M	;LOAD IT
3005   09F1 17          	RAL		;SHIFT IT LEFT
3006   09F2             			;IF CARRY SET BY FIRST SHIFT
3007   09F2             			;IT WILL BE IN LSB OF SECOND
3008   09F2 77          	MOV	M,A
3009   09F3 2D          	DCR	L	;/***TP EXTENSION
3010   09F4 7E          	MOV	A,M
3011   09F5 17          	RAL
3012   09F6 77          	MOV	M,A	;/***ALL DONE TP
3013   09F7 C9          	RET		;SUBROUTINE DRST
3014   09F8             			;SHIFTS DOUBLE WORD ONE PLACE
3015   09F8             			;TO THE RIGHT
3016   09F8             			;DOES NOT AFFECT D
3017   09F8             
3018   09F8 5D          DRST:	MOV	E,L	;/***TP MODIFIED RIGHT SHIFT TP
3019   09F9 7E          	MOV	A,M	;LOAD FIRST WORD
3020   09FA 1F          	RAR		;ROTATE IT RIGHT
3021   09FB 77          	MOV	M,A	;STORE IT
3022   09FC 2C          	INR	L	;/*** TP
3023   09FD 7E          	MOV 	A,M	;LOAD SECOND WORD
3024   09FE 1F          	RAR		;SHIFT IT RIGHT
3025   09FF 77          	MOV	M,A	;STORE TT
3026   0A00             			; END OF PAGE 47
3027   0A00             		
3028   0A00 2C          	INR L		;/***TP EXTENSION
3029   0A01 7E          	MOV A,M
3030   0A02 1F          	RAR
3031   0A03 77          	MOV M,A
3032   0A04 6B          	MOV L,E	;/***TP - ALL DONE TP
3033   0A05 C9          	RET
3034   0A06             
3035   0A06             ; SUBROUTINE DADD
3036   0A06             ; ADDS TWO DOUBLE PRECISION
3037   0A06             ; WORDS, C[1 IF THERE IS OVRFLW
3038   0A06 5D          DADD:	MOV	E,L	;SAVE BASE IN E
3039   0A07 68          	MOV	L,B	;BASE \3 TO L
3040   0A08 2C          	INR	L	;BASE \4 TO L
3041   0A09 2C          	INR	L	;/***TP
3042   0A0A 7E          	MOV	A,M	;LOAD S MANTB
3043   0A0B 6B          	MOV	L,E	;BASE TO L
3044   0A0C 2C          	INR	L	;BASE \1 TO L
3045   0A0D 2C          	INR	L	;/***TP
3046   0A0E 86          	ADD	M	;ADD TWO MANTBIS
3047   0A0F 77          	MOV	M,A	;STORE ANSWER
3048   0A10 68          	MOV	L,B	;/***TP EXTENSION
3049   0A11 2C          	INR	L
3050   0A12 7E          	MOV	A,M
3051   0A13 6B          	MOV	L,E
3052   0A14 2C          	INR	L
3053   0A15 8E          	ADC	M
3054   0A16 77          	MOV	M,A	;/***TP - ALL DONE
3055   0A17 68          	MOV	L,B	;BASE \3 TO L
3056   0A18 7E          	MOV	A,M	;MANTA OF S TO A
3057   0A19 6B          	MOV	L,E	;BASE TO L
3058   0A1A 8E          	ADC	M	;ADD WITH CARRY
3059   0A1B 77          	MOV	M,A	;STORE ANSWER
3060   0A1C C9          	RET
3061   0A1D             ;
3062   0A1D             ;SUBROUTINE DCLR
3063   0A1D             ;CLEARS TWO SUCCESSIVE
3064   0A1D             ;LOCATIONS OF MEMORY
3065   0A1D AF          DCLR:	XRA	A	
3066   0A1E 77          	MOV	M,A
3067   0A1F 2C          	INR	L
3068   0A20 77          	MOV	M,A
3069   0A21 2C          	INR	L	;/**WTP EXTENSION
3070   0A22 77          	MOV	M,A	;/X**TP ZERO 3
3071   0A23 2D          	DCR	L	;/***TP - ALL DONE
3072   0A24 2D          	DCR	L
3073   0A25 C9          	RET
3074   0A26             
3075   0A26             ;/****ALL NEW DSUB - SHORTER***
3076   0A26             ;SUBROUTINE DSUB
3077   0A26             ;DOUBLE PRECISION SUBTRACT
3078   0A26 5D          DSUB:	MOV	E,L	;SAVE BASE IN E
3079   0A27 2C          	INR	L	;/***TP EXTENSION
3080   0A28 2C          	INR	L	;/START WITH LOWS
3081   0A29 7E          	MOV	A,M	;/GET ARG
3082   0A2A 68          	MOV	L,B	;/NOW SET UP TO SUB
3083   0A2B 2C          	INR	L
3084   0A2C 2C          	INR	L
3085   0A2D 96          	SUB	M	;/NOW DO IT
3086   0A2E 6B          	MOV	L,E	;/NOW MUST PUT IT BACK
3087   0A2F 2C          	INR	L
3088   0A30 2C          	INR	L
3089   0A31 77          	MOV	M,A	;PUT BACK
3090   0A32 2D          	DCR	L	;/***TP - ALL DONE
3091   0A33 7E          	MOV	A,M	;/GET LOW OF LOP
3092   0A34 68          	MOV	L,B	;/SET TO BOP
3093   0A35 2C          	INR	L	;/SET TO BOP LOW
3094   0A36 9E          	SBB	M	;/GET DIFF. OF LOWS
3095   0A37 6B          	MOV	L,E	;/SAVE IN LOP LOW
3096   0A38 2C          	INR	L	;/TO LOP LOW
3097   0A39 77          	MOV	M,A	;/INTO RAM
3098   0A3A 2D          	DCR	L	;/BACK UP TO LOP HIGH
3099   0A3B 7E          	MOV	A,M	;/GET LOP HIGH
3100   0A3C 68          	MOV	L,B	;/SET TO BOP HIGH
3101   0A3D 9E          	SBB	M	;/SUB. WITH CARRY
3102   0A3E 6B          	MOV	L,E	;/SAVE IN LOP HIGH
3103   0A3F 77          	MOV	M,A	;/INTO RAM
3104   0A40 C9          	RET		;/ALL DONE - MUCH SHORTER
3105   0A41             
3106   0A41             ;SUBROUTINE GCHAR
3107   0A41             ;  THIS SUBROUTINE RETURNS THE CHARACTERISTIC OF
3108   0A41             ;  THE FLOATING POINT NUMBER POINTED TO BY (H,L)
3109   0A41             ;  IN THE A REGISTER WITH ITS SIGN EXTENDED IATO THE
3110   0A41             ;  LEFTMOST BIT.
3111   0A41             ;
3112   0A41             ;REGISTERS ON EXIT:
3113   0A41             ;
3114   0A41             ;  A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
3115   0A41             ;  L = (ORIGINAL L) + 3
3116   0A41             ;  B,C,D,E,H = SAME AS ON ENTRY
3117   0A41 2C          GCHAR:	INR	L	;MAKE (H,L)	POINT TO CHAR
3118   0A42 2C          	INR	L	;MAKE (H,L)	POINT TO CHAR
3119   0A43 2C          	INR	L	;MAKE (H,L)	POINT TO CHAR
3120   0A44 7E          	MOV	A,M	;SET A=CHAR	+ MANTISSA SIGN
3121   0A45 E6 7F       	ANI	177O	;GET RID OF MANTISSA SIGN BIT
3122   0A47             			; END OF PAGE 48
3123   0A47             
3124   0A47 C6 40       	ADI	100O	;PROPAGATE CHAR SIGN INTO LEFTMOST BIT
3125   0A49 EE 40       	XRI	100O	;RESTORE ORIGINAL CHAR SIGN BIT
3126   0A4B C9          	RET		;RETURN WITH (H,L) POINTING TO THE
3127   0A4C             			;CHAR = ORIGINAL (H,L)+3
3128   0A4C             			;SOMEONE ELSE WILL CLEAN UP
3129   0A4C             ;
3130   0A4C             ;
3131   0A4C             ; SUBROUTINE CFCHE
3132   0A4C             ;
3133   0A4C             ;  THIS SUBROUTINE RETURNS THE CHARACTERISTICS OF THE
3134   0A4C             ;  FLOATING POINT NUMBERS POINTED TO BY (H,L) AND
3135   0A4C             ;  (H,B) IN THE A AND E REGISTERS RESPECTIVELY,
3136   0A4C             ;  WITH THEIR SIGNS EXTENUED INTO THE LEFTMOST BIT.
3137   0A4C             ;
3138   0A4C             ; REGISTERS ON EXIT:
3139   0A4C             ;
3140   0A4C             ;  A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
3141   0A4C             ;  E = CHARACTERISTIC OF (H,B) WITH SIGN EXTENDED
3142   0A4C             ;  B,C,H,L = SAME AS ON ENTRY
3143   0A4C             ;  D = A
3144   0A4C 5D          CFCHE:	MOV	E,L	;SAVE LPTR IN E
3145   0A4D 68          	MOV	L,B	;SET L = BPTR
3146   0A4E CD 41 0A    	CALL	GCHAR	;GET CHAR(H,B) WITH SIGN EXTENDED IN A
3147   0A51 6B          	MOV	L,E	;RESTORE L = LPTR
3148   0A52 5F          	MOV	E,A	;SET E=CHAR(H,B) WITH SIGN EXTENDED
3149   0A53 CD 41 0A    	CALL	GCHAR	;SET A=CHAR(H,L) WITH SIGN EXTENDED
3150   0A56 2D          	DCR	L	;RESTORE L = LPTR
3151   0A57 2D          	DCR	L	;RESTORE L = LPTR
3152   0A58 2D          	DCR	L	;RESTORE L = LPTR
3153   0A59 57          	MOV	D,A	;SET D=A=CHAR(H,L) WITH SIGN EXTENDED
3154   0A5A C9          	RET
3155   0A5B             
3156   0A5B             ;
3157   0A5B             ; SUBROUTINE CCMP
3158   0A5B             ;  THIS SUBROUTINE COMPARES THE CHARACTERISTICS OF
3159   0A5B             ;  FLOATING POINT NUMBERS POINTED TO BY (H,L) AND (H,B).
3160   0A5B             ;  THE ZERO FLIP-FLOP IS SET IF CHAR(H,L) EQUALS
3161   0A5B             ;  CHAR(H,B) IF CHAR(H,L) IS LESS THAN CHAR(H,B) THEN
3162   0A5B             ;  THE CARRY BIT WILL BE SET.
3163   0A5B             ;
3164   0A5B             ; REGISTERS ON EXIT:
3165   0A5B             ;
3166   0A5B             ;  A = CHARACTERISTIC OF (H,L) WITH SIGN EXTENDED
3167   0A5B             ;  E = CHARACTERISTIC OF (H,B) WITH SIGN EXTENDED
3168   0A5B             ;  D = A
3169   0A5B             ;  B,C,H,L = SAME AS ON ENTRY
3170   0A5B             ;
3171   0A5B CD 4C 0A    CCMP:	CALL	CFCHE 	;FETCH CHARACTERTISTICS WITH SIGN EXT'D
3172   0A5E             			;INTO A (CHAR(H,L)) & E (CHAR(H,B)) REGS
3173   0A5E 57          	MOV	D,A	;SAVE CHAR (H,L)
3174   0A5F 93          	SUB	E	;SUATRACT E CHAR(H B))
3175   0A60 17          	RAL		;ROTATE SIGN BIT INTO CARRY BIT
3176   0A61 7A          	MOV	A,D	;RESTORE A=CHAR(H,L)
3177   0A62 C9          	RET		;RETURN
3178   0A63             	
3179   0A63             ;
3180   0A63             ; ERROR RETURNS
3181   0A63             ;  THE FOLLOWING CODE IS USED TO RETURN VARIOUS
3182   0A63             ;  ERROR CONDITIONS. IN EACH CASE A FLOATING POINT
3183   0A63             ;  NUMBER IS STORED IN THE 4 WORDS POINTED TO BY (H,L)
3184   0A63             ;  AND A FLAG IS STORED IN THE ACCUMULATOR.
3185   0A63             ;
3186   0A63             ;  CONDITION     FLAG    RESULT (+)	       RESULT (-)
3187   0A63             ;
3188   0A63             ;  UNDERFLOW	377    000 000 000 100	 000 000 000 300
3189   0A63             ;  OVERFLOW	      177    377 377 377 077	 377 377 377 277
3190   0A63             ;  INDEFINITE	077    377 377 377 077	 377 377 377 277
3191   0A63             ;  NORMAL         000    XXX XXX XXX XXX 	 XXX XXX XXX XXX
3192   0A63             ;  NORMAL ZERO    000    000 000 000 100	 (ALWAYS RETURNS +0)
3193   0A63             ;
3194   0A63             ; ENTRY POINTS:
3195   0A63             ;
3196   0A63             ;  WUND - WRITE UNDERFLOW
3197   0A63             ;  WOVR - WRITE OVERFLOW
3198   0A63             ;  WIND - WRITE INDEFINITE
3199   0A63             ;  WZER - WRITE NORMAL ZERO
3200   0A63             
3201   0A63             WFLT	MACRO	VMANT,VCHAR,VFLAG,LABEL 	;WRITE FLOATING NUMBER
llbasic.asm line 3201: Label not found: (WFLT)
llbasic.asm line 3201: label value misalligned.           (WFLT)
llbasic.asm line 3201: unrecognized instruction.          (WFLT)
3202   0A63             
llbasic.asm line 3203: Label not found: (VCHAR)
llbasic.asm line 3203: Unused data in MS byte of argument. (200)
3203   0A63 16 00       	MVI	D,VCHAR	;LOAD CHARACTERISTIC INTO D REGISTER
3204   0A65 CD A5 0A    	CALL	WCHAR	;WRITE CHARACTERISTIC
3205   0A68             LABEL::	MVI	A,VMANT	;LOAD MANTISSA VALUE
3206   0A68             			;WE ASSUME HERE THAT ALL BYTES OF 
3207   0A68             			;MANTISSA ARE THE SAME
3208   0A68 CD 9E 0A    	CALL	WMANT	;WRITE THE MANTISSA
llbasic.asm line 3209: Label not found: (VFLAG)
llbasic.asm line 3209: Unused data in MS byte of argument. (200)
3209   0A6B 3E 00       	MVI	A,VFLAG	;SET ACCUMULATOR TO FLAG
3210   0A6D B7          	ORA	A	;SET FLAGS PROPERLY
3211   0A6E C9          	RET		;RETURN (WMANT RESTORED (H,L))
3212   0A6F             	ENDM
llbasic.asm line 3212: unrecognized instruction.          (ENDM)
3213   0A6F             	
3214   0A6F             WUND:	WFLT	0,100O,377O,UFLW1	;WRITE UNDERFLOW
llbasic.asm line 3214: Label not found: (WUND)
llbasic.asm line 3214: label value misalligned.           (WUND)
llbasic.asm line 3214: unrecognized instruction.          (WUND)
3215   0A6F             			; END OF PAGE 49
3216   0A6F             		
3217   0A6F 16 40       	MVI	D,00040H	;LOAD	CHARACTERISTIC INTO D REGISTER
3218   0A71 CD A5 0A    	CALL	WCHAR	;WRITE CHARACTERISTIC
3219   0A74             UFLW1::	MVI	A,00000H	;LOAD	MANTISSA VALUE
3220   0A74             			;WE ASSUME HERE THAT ALL BYTES OF MANT.
3221   0A74             			;ARE THE SAME
3222   0A74 CD 9E 0A    	CALL	WMANT	;WRITE THE MANTISSA
3223   0A77 3E FF       	MVI	A,000FFH	;SET ACCUMULAIOR TO FLAG
3224   0A79 B7          	ORA	A	;SET FLAGS PROPERLY
3225   0A7A C9          	RET		;RETURN (WMANT RESTORED (H,L))
3226   0A7B             
3227   0A7B             WOVR:	WFLT	377O,77O,177O,OFLW1 ;WRITE OVERFLOW
llbasic.asm line 3227: Label not found: (WOVR)
llbasic.asm line 3227: label value misalligned.           (WOVR)
llbasic.asm line 3227: unrecognized instruction.          (WOVR)
3228   0A7B 16 3F       	MVI	D,0003FH	;LOAD CHRACTERISTIC INTO D REGISTER
3229   0A7D CD A5 0A    	CALL	WCHAR	;WRITE CHARACTERISTIC
3230   0A80             OFLW1::	MVI	A,000FFH	;LOAD MANTISSA VALUE
3231   0A80             			;WE ASSUME HERE THAT ALL BYTES OF MANT.
3232   0A80             			;ARE THE SAME 	
3233   0A80 CD 9E 0A    	CALL	WMANT	;WRITE THE MANTISSA
3234   0A83 3E 7F       	MVI	A,0007FH	;SET ACCUMULATOR TO FLAG
3235   0A85 B7          	ORA	A	;SET FLAGS PROPERLY
3236   0A86 C9          	RET		;RETURN (WMANT RESTORED (H,L))
3237   0A87             WIND:	WFLT	377O,77O,77O,INDF1	;WRITE INDEFINITE
llbasic.asm line 3237: Label not found: (WIND)
llbasic.asm line 3237: label value misalligned.           (WIND)
llbasic.asm line 3237: unrecognized instruction.          (WIND)
3238   0A87             
3239   0A87 16 3F       	MVI	D,0003FH	;LOAD CHRACTERISTIC INTO D REGISTER
3240   0A89 CD A5 0A    	CALL	WCHAR	;WRITE CHARACTERISTIC
3241   0A8C             INDF1::	MVI	A,000FFH	;LOAD MANTISSA VALUE
3242   0A8C             			;WE ASOUME HERE THAT ALL BYTES OF MANT.
3243   0A8C             			;ARE THE SAME 
3244   0A8C CD 9E 0A    	CALL	WMANT	;WRITE THE MANTISSA
3245   0A8F 3E 3F       	MVI	A,0003FH	;SET ACCMULATOR TO FLAG
3246   0A91 B7          	ORA	A	;SET FLAGS PROPERLY
3247   0A92 C9          	RET		;RETURN (WMANT RESTORED (H,L))
3248   0A93             
3249   0A93 2C          WZER:	INR	L	;WRITE NORMAL ZERO
3250   0A94 2C          	INR	L
3251   0A95 2C          	INR	L
3252   0A96 36 40       	MVI	M,100O	;STORE CHARACTERISTIC FOR ZERO
3253   0A98 AF          	XRA	A	;ZERO ACCUMULATOR
3254   0A99 CD 9E 0A    	CALL	WMANT	;STORE ZERO MANTISSA
3255   0A9C B7          	ORA	A	;SET FLAGS PROPERLY
3256   0A9D C9          	RET		;RETURN
3257   0A9E             
3258   0A9E             ;ROUTINE TO WRITE MANTISSA FOR ERROR RETURNS
3259   0A9E 2D          WMANT:	DCR	L	;POINT LEAST SIGNIFICANT BYTE
3260   0A9F 77          	MOV	M,A	;OF MANTISSA
3261   0AA0             			;STORE LSBYTE OF MANTISSA
3262   0AA0 2D          	DCR	L	;POINT TO NEXT LEAST SIGNIFICANT BYTE
3263   0AA1             			;OF MANTISSA
3264   0AA1 77          	MOV	M,A	;STORE NLSBYTE OF MANTISSA
3265   0AA2 2D          	DCR	L	;POINT TO MOST SIGNIFICANT BYTE
3266   0AA3 77          	MOV	M,A	;OF MANTISSA
3267   0AA4 C9          	RET		;STORE MSBYTE OF MANTISSA
3268   0AA5             			;RETURN (H,L) POINTS TO BEGINNING OF
3269   0AA5             			;FLOATING POINT RESULT
3270   0AA5             
3271   0AA5             
3272   0AA5             ;ROUTINE TO WRITE CHARACTERTIC FOR ERROR RETURNS
3273   0AA5             ;NOTE: WE PRESERVE ORIGINAL MANTISSA SIGN
3274   0AA5             ;ON ENTRY D CONTAINS NEW CHARICTERSTIC TO BE STORED.
3275   0AA5 2C          WCHAR:	INR	L	;SET (H,L) TO POINT TO CHARACTERISTIC
3276   0AA6 2C          	INR	L	;PART OF ABOVE
3277   0AA7 2C          	INR	L	;PART OF ABOVE
3278   0AA8 7E          	MOV	A,M	;LOAD CHARACTERISTIC A
3279   0AA9             			;AND MANTISSA SIGN
3280   0AA9 E6 80       	ANI	200O	;JUST KEEP MANTISSA SIGN
3281   0AAB B2          	ORA	D	;OR IN NEW CHARACTERISTIC
3282   0AAC 77          	MOV	M,A	;STORE IT BACK
3283   0AAD C9          	RET		;RETURN WITH (H,L) POINT TO
3284   0AAE             			;OF RESULT CHARACTERISTIC
3285   0AAE             			;SOMEONE ELSE WILL FIX UP (H,L)
3286   0AAE             
3287   0AAE             ;
3288   0AAE             ;SUBROUTINE INDFC
3289   0AAE             ;THIS ROUTINE WRITES A FLOATING INDEFINITE
3290   0AAE             ;AT (H,C), SETS THE CONDITION FLAG AND RETURNS
3291   0AAE 5D          INDFC:	MOV	E,L	;SAVE LPTR IN E
3292   0AAF 69          	MOV	L,C	;SET L=CPTR SO (H,L)-ADDR OF RESULT
llbasic.asm line 3293: Label not found: (WIND)
llbasic.asm line 3293: Unused data in MS byte of argument. (2)
3293   0AB0 CD 00 00    	CALL	WIND	;WRITE INDEFINITE
3294   0AB3 6B          	MOV	L,E	;RESTORE L=LPTR
3295   0AB4 C9          	RET		;RETURN
3296   0AB5             	
3297   0AB5             ;
3298   0AB5             ;SUBROUTINE WZERC
3299   0AB5             ;THIS ROUTINE WRITES A NORMAL FLAOTING POINT ZERO
3300   0AB5             ;AT (H,C), SETS THE CONDITION FLAG AND RETURNS
3301   0AB5 5D          WZERC:	MOV	E,L	;SAVE LPTR IN E
3302   0AB6 69          	MOV	L,C	;SETL=CPTR SO (H,L)=ADDR OF RESULT
3303   0AB7 CD 93 0A    	CALL	WZER	;WRITE NORMAL ZEAO
3304   0ABA 6B          	MOV	L,E	;RESTORE L=LPTR
3305   0ABB C9          	RET		;RETURN
3306   0ABC             			; END OF PAGE 50
3307   0ABC             		
3308   0ABC             ;SUBROUTINE INCR
3309   0ABC             ; THIS SUBROUTINE INCREMENTS THE CHARACTERISTIC
3310   0ABC             ; OF THE FLOATING POINT NUMBER POINTED TO BY (H,L).
3311   0ABC             ; WE TEST FOR OVERFLOW AND SET APPROPRIATE FLAG.
3312   0ABC             ; (SEE ERROR RETURNS).
3313   0ABC             ;
3314   0ABC             ; REGISTERS ON EXIT:
3315   0ABC             ;   A = CONDITION FLAG (SEE ERROR RETURNS)
3316   0ABC             ;   D = CLOBBERED
3317   0ABC             ;   B,C,H,L = SAME AS ON ENTRY
3318   0ABC CD 41 0A    INCR:	CALL	GCHAR	;GET CHAR WITH SIGN EXTENDED
3319   0ABF FE 3F       	CPI	MAXCH	;COMPARE WITH MAX CHAR PERMITTED
3320   0AC1 CA 80 0A    	JZ	OFLW1	;INCREMENT WOULD CAUSE OVERFLOW
3321   0AC4 57          	MOV	D,A	;/SAVE IT IN D
3322   0AC5 14          	INR	D	;/INCREMENT IT
3323   0AC6 C3 CC 0A    	JMP	INCR2	;JUMP AROUND ALTERNATE ENTRY POINT
3324   0AC9 2C          INCR3:	INR	L	;COME HERE TO STORE CHARACTERISTIC
3325   0ACA 2C          	INR	L	;POINT (H,L) TO CHAR
3326   0ACB 2C          	INR	L	;POINT (H,L) TO CHAR
3327   0ACC 3E 7F       INCR2:	MVI	A,177O
3328   0ACE A2          	ANA	D	;/KILL SIGN BIT
3329   0ACF 57          	MOV	D,A	;/BACK TO D
3330   0AD0 7E          	MOV	A,M	;/NOW SIGN IT
3331   0AD1 E6 80       	ANI	200O	;/GET MANTISSA SIGN
3332   0AD3 B2          	ORA	D	;/PUT TOGETHER
3333   0AD4 77          	MOV	M,A	;/STORE IT BACK
3334   0AD5 2D          	DCR	L	;/NOW BACK TO BASE
3335   0AD6 2D          	DCR	L	;/***TP
3336   0AD7 2D          	DCR	L
3337   0AD8 AF          SCCFG:	XRA	A	;SET SUCCESS FLAG
3338   0AD9 C9          	RET
3339   0ADA             	
3340   0ADA             ;
3341   0ADA             ; SUBROUTINE DECR
3342   0ADA             ;
3343   0ADA             ;THIS SUBROUTINE DECREMENTS THE CHARACTERISTIC
3344   0ADA             ;OF THE FLOATING POINT NUMDER POINTED TO BY (H,L)
3345   0ADA             ;WE TEST FOR UNDERFLOW AND SET APPROPRIATE FLAG.
3346   0ADA             ;(SEE ERROR RETURNS).
3347   0ADA             ;	
3348   0ADA             ; REGISTERS ON EXIT:
3349   0ADA             ;
3350   0ADA             ;   A = CONDITION FLAG (SEE ERROR RETURNS)
3351   0ADA             ;   D = CLOBBERED
3352   0ADA             ;   B,C,H,L = SAME AS ON ENTRY
3353   0ADA CD 41 0A    DECR:	CALL	GCHAR	;GET CHAR WITH SIGN EXTENDED
3354   0ADD FE C0       	CPI	MINCH	;COMPARE WITH MIN CHAR PERMITTED
3355   0ADF CA 74 0A    	JZ	UFLW1	;DECREMENT WOULD CAUSE UNDERFLOW
3356   0AE2 57          	MOV	D,A	;SAVE CHARACTERSTIC IN D
3357   0AE3 15          	DCR	D	;DECREMENT CHARACTERISTIC
3358   0AE4 C3 CC 0A    	JMP	INCR2	;GO STORE IT BACK
3359   0AE7             	
3360   0AE7             ;SUBROUTINE AORS
3361   0AE7             ;RETURN S[1 IF BASE \6
3362   0AE7             ;HAS A 1 IN MSB
3363   0AE7 5D          AORS:	MOV	E,L	;SAVE BASE
3364   0AE8 69          	MOV	L,C	;BASE \6 TO L
3365   0AE9 7E          	MOV	A,M	;LOAD IT
3366   0AEA B7          	ORA	A	;SET FLAGS
3367   0AEB 6B          	MOV	L,E	;RESTORE BASE
3368   0AEC C9          	RET
3369   0AED             
3370   0AED             ;SUBROUTINE TSTR
3371   0AED             ;CHECKS C PTR TO SEE IF
3372   0AED             ;NLSB[1
3373   0AED             ;RETURNS Z[1 IF NOT
3374   0AED             ;DESTROYS E,D
3375   0AED 5D          TSTR:	MOV	E,L	;SAVE BAIDE
3376   0AEE 69          	MOV	L,C	;C PTR TO L
3377   0AEF 16 02       	MVI	D,2	;MASK TO D
3378   0AF1 7E          	MOV	A,M	;LOAD VALUE
3379   0AF2 6B          	MOV	L,E 	;RESTORE BASE
3380   0AF3 A2          	ANA	D	;AND VALUE WITH MASK
3381   0AF4 C9          	RET
3382   0AF5             
3383   0AF5             ;SUBROUTINE ACPR
3384   0AF5             ;STORES A IN LOCATION OF CPTR
3385   0AF5             ;LPTR IN E
3386   0AF5 5D          ACPR:	MOV	E,L	;SAVE LPTR
3387   0AF6 69          	MOV	L,C	;CPTR TO L
3388   0AF7 77          	MOV	M,A	;STORE A
3389   0AF8 6B          	MOV	L,E	;RESTORE BASE
3390   0AF9 C9          	RET
3391   0AFA             
3392   0AFA             ;SUBROUTINE DCMP
3393   0AFA             ;COMPARES TWO DOUBLE LENGTH
3394   0AFA             ;WORDS
3395   0AFA 7E          DCMP:	MOV	A,M	;NUM MANTA TO A
3396   0AFB 5D          	MOV	E,L	;SAVE BASE IN E
3397   0AFC 68          	MOV	L,B	;BASE\3 TO L
3398   0AFD BE          	CMP	M	;COMPARE WITH DEN MANTA
3399   0AFE             			; END OF PAGE 51
3400   0AFE             	
3401   0AFE 6B          	MOV	L,E	;RETURN BASE TO L
3402   0AFF C0          	RNZ		;RETURN IF NOT THE SAME
3403   0B00 2C          	INR	L	;L TO NUM MANTS
3404   0B01 7E          	MOV	A,M	;LOAD IT
3405   0B02 68          	MOV	L,B	;DEN MANTB ADD TO L
3406   0B03 2C          	INR	L	;BASE\ 4 TO L
3407   0B04 BE          	CMP	M
3408   0B05 6B          	MOV	L,E
3409   0B06 C0          	RNZ		;/***TP EXTENSION
3410   0B07 2C          	INR	L	;/NOW CHECK BYTE 3
3411   0B08 2C          	INR	L
3412   0B09 7E          	MOV	A,M	;/GET FOR COMPARE
3413   0B0A 68          	MOV	L,B
3414   0B0B 2C          	INR	L
3415   0B0C 2C          	INR	L	;/BYTE 3 NOW
3416   0B0D BE          	CMP	M	;/COMPARE
3417   0B0E 6B          	MOV	L,E	;/***TP - ALL DONE
3418   0B0F C9          	RET
3419   0B10             
3420   0B10             ;SUBROUTINE DIVC
3421   0B10             ;PERFORMS ONE CYCLE OF DOUBLE
3422   0B10             ;PRECISION FLOATING PT DIVIDE
3423   0B10             ;ENTER AT ENT1 ON FIRST CYCLE
3424   0B10             ;ENTER AT ENT2 ALL THEREAFTER
3425   0B10 CD E9 09    ENT2:	CALL	DLST	;SHIFT MOVING DIVIDEND
3426   0B13 DA 1D 0B    	JC	OVER	;IF CARRY[1,NUM.GT.0
3427   0B16 CD FA 0A    ENT1:	CALL	DCMP	;COMPARE NUM WITH DEN
3428   0B19 D2 1D 0B    	JNC	OVER	;IF CARRY NOT SET,NUM.GE.DEN
3429   0B1C C9          	RET
3430   0B1D             
3431   0B1D CD 26 0A    OVER:	CALL	DSUB	;CALL DOUBLE SUBTRACT
3432   0B20 5D          	MOV	E,L	;SAVE BASE IN E
3433   0B21 69          	MOV	L,C	;BASE \6 TO L
3434   0B22 2C          	INR	L	;BASE \7 TO L
3435   0B23 2C          	INR	L	;/***TP
3436   0B24 7E          	MOV	A,M
3437   0B25 C6 01       	ADI	1	;ADD 1
3438   0B27 77          	MOV	M,A	;PUT IT BACK
3439   0B28 6B          	MOV	L,E	;RESTORE BASE TO L
3440   0B29 C9          	RET
3441   0B2A             
3442   0B2A             ;SUBROUTINE LXFR
3443   0B2A             ;MOVES CPTR TO EPTR
3444   0B2A             ;MOVES 3 WORDS IF ENTER AT LXFR
3445   0B2A             LXFR:
3446   0B2A 16 04       	MVI	D,4	;/MOVE 4 WORDS
3447   0B2C 69          REP5:	MOV	L,C	;CPTR TO L
3448   0B2D 7E          	MOV	A,M	;_CPTR> TO A
3449   0B2E 6B          	MOV	L,E	;EPTR TO L
3450   0B2F 77          	MOV	M,A
3451   0B30 0C          	INR	C	;/INCREMENT C
3452   0B31 1C          	INR	E	;/INCREMENT E TO NEXT
3453   0B32 15          	DCR	D	;/TEST FOR DONE
3454   0B33 C2 2C 0B    	JNZ	REP5	;/GO FOR FOR TILL D=0
3455   0B36 7B          	MOV	A,E	;/NOW RESET C AND E
3456   0B37 D6 04       	SUI	4	;/RESET BACK BY 4
3457   0B39 5F          	MOV	E,A	;/PUT BACK IN E
3458   0B3A 79          	MOV	A,C	;/NOW RESET C
3459   0B3B D6 04       	SUI	4	;/BY 4
3460   0B3D 4F          	MOV	C,A	;/BACK TO C
3461   0B3E C9          	RET		;/DONE
3462   0B3F             
3463   0B3F             ;
3464   0B3F             ; SUBROUTINE LDCP
3465   0B3F             ;   THIS SUBROUTINE COMPUTES THE CHARACTERISTIC
3466   0B3F             ;   FOR THE FLOATING DIVIDE ROUTINE
3467   0B3F             ;
3468   0B3F             ; REGISTERS ON EXIT:
3469   0B3F             ;   A = CONDITION FLAG (SEE ERROR RETURNS)
3470   0B3F             ;   D,E = GARBAGE
3471   0B3F             ;   B,C,H,L = SAME AS ON ENTRY
3472   0B3F             ;
3473   0B3F             ; REGISTERS ON ENTRY:
3474   0B3F             ;   (H,B) = ADDRESS OFF DIVISOR
3475   0B3F             ;   (H,C) = ADDRESS OF OUOTIENT
3476   0B3F             ;   (H,L) = ADDRESS OF DIVIDEND
3477   0B3F             ;
3478   0B3F CD 4C 0A    LDCP:	CALL	CFCHE	;SET E=CHAR(H,B), A=CHAR(H,L)
3479   0B42 93          	SUB	E	;SUBTRACT TO GET NEW CHARATERISTIC
3480   0B43 C3 4A 0B    	JMP	CCHK	;GO CHECK FOR OVER/UNDERFLOW
3481   0B46             			;AND STORE CHARACTERTISTIC
3482   0B46             ;
3483   0B46             ;SUBROUTINE LMCP
3484   0B46             ;
3485   0B46             ;  THIS SUBROUTINE COMPUTES THE CHARACTERISTIC
3486   0B46             ;  FOR THE FLOATING MULTIPLY ROUTINE.
3487   0B46             ;REGISTERS ON EXIT:
3488   0B46             ;   A = CONDITION FLAG (SEE ERROR RETURNS)
3489   0B46             ;   D,E = GARBAGE
3490   0B46             ;   B,C,H,L = SAME AS ON ENTRY	; END OF PAGE 52
3491   0B46             ;
3492   0B46             ;REGISTERS ON ENTRY:
3493   0B46             ;
3494   0B46             ;   (H,B) = ADDRESS OFF MULTIPLICAND
3495   0B46             ;   (H,C) = ADDRESS OF PRODUCT
3496   0B46             ;   (H,L) = ADDRESS OF MULTIPLIER
3497   0B46             ;
3498   0B46 CD 4C 0A    LMCP:	CALL	CFCHE	;SET E=CHAR(H,B), A=CHAR(H,L)
3499   0B49 83          	ADD	E	;ADD TO GET NEW CHARACTERISTIC
3500   0B4A             			;NOW FALL INTO THE ROUTINE
3501   0B4A             			;WHICH CHECKS FOR OVER/UNDERFLOW
3502   0B4A             			;AND STORE CHARACTERTISTIC
3503   0B4A             
3504   0B4A             ; SUBROUTINE CCHK
3505   0B4A             ;   THIS SUBROUTINE CHECKS A CHARACTERISTIC IN
3506   0B4A             ;   THE ACCUMULATOR FOR OVERFLOW OR UNDERFLOW.
3507   0B4A             ;   IT THEN STORES THE CHARACTERISTIC PRESERVING
3508   0B4A             ;   THE PREVIOUSLY COMPUTED MANTISSA SIGN.
3509   0B4A             ;
3510   0B4A             ; REGISTERS ON ENTRY:
3511   0B4A             ;
3512   0B4A             ;   (H,L) = ADDRESS OF ONE OPERAND
3513   0B4A             ;   (H,B) = ADDRESS OF OTHER OPERAND
3514   0B4A             ;   (H,C) = ADDRESS OF RESULT
3515   0B4A             ;   A     = NEW CHARACTERISTIC OF RESULT
3516   0B4A             ;
3517   0B4A             ; REGISTERS ON EXIT:
3518   0B4A             ;
3519   0B4A             ;   A = CONDITION FLAG (SEE ERROR RETURNS)
3520   0B4A             ;   D,E = GARBAGE
3521   0B4A             ;   B,C,H,L = SAME AS ON ENTRY
3522   0B4A             ;
3523   0B4A             CCHK:			;ENTER HERE TO CHECK CHARACTERISTIC
3524   0B4A FE 40       	CPI	100O	;CHECK FOR 0 TO +63
3525   0B4C DA 59 0B    	JC	STORC	;JUMP IF OKAY
3526   0B4F FE 80       	CPI	200O	;CHECK FOR +64 TO +127
3527   0B51 DA 61 0B    	JC	OFLWC	;JUMP IF OVERFLOW
3528   0B54 FE C0       	CPI	300O	;CHECK FOR -128 TO -65
3529   0B56 DA 68 0B    	JC	UFLWC	;JLMP IF UNDERFLOW
3530   0B59 5D          STORC:	MOv	E,L	;SAVE L IN E
3531   0B5A 69          	MOV	L,C	;LET L POINT TO RESULT
3532   0B5B 57          	MOV	D,A	;SAVE CHARACTERISTIC IN 0
3533   0B5C CD C9 0A    	CALL	INCR3	;STORE CHARACTERISTIC
3534   0B5F 6B          	MOV	L,E	;RESTORE L
3535   0B60 C9          	RET		;RETURN
3536   0B61             ;
3537   0B61             ; SUBROUTINE OFLWC
3538   0B61             ;
3539   0B61             ;   THIS ROUTINE WRITES A FLOATING POINT OVERFLOW AT (H,C)
3540   0B61             ;   SETS THE CONDITION FLAG, AND RETURNS.
3541   0B61             ;
3542   0B61 5D          OFLWC:	MOV	E,L	;SAVE L IN E
3543   0B62 69          	MOV	L,C	;SET L=CPTR, SO (H,L)=ADOR OF RESULT
llbasic.asm line 3544: Label not found: (WOVR)
llbasic.asm line 3544: Unused data in MS byte of argument. (2)
3544   0B63 CD 00 00    	CALL	WOVR	;WRITE OUT OVERFLOW
3545   0B66 6B          	MOV	L,E	;RESTORE L
3546   0B67 C9          	RET		;RETURN
3547   0B68             
3548   0B68             ;
3549   0B68             ; SUBROUTINE UFLWC
3550   0B68             ;
3551   0B68             ;   THIS ROUTINE WRITES A FLOATING POINT UNDERFLOW AT (H,C)
3552   0B68             ;   SETS THE CONDITION FLAG, AND RETURNS.
3553   0B68             ;
3554   0B68 5D          UFLWC:	MOV	E,L	;SAVE L IN E
3555   0B69 69          	MOV	L,C	;SET L=CPTR, SO (H,L)=ADDR OF RESULT
llbasic.asm line 3556: Label not found: (WUND)
llbasic.asm line 3556: Unused data in MS byte of argument. (2)
3556   0B6A CD 00 00    	CALL	WUND	;WRITE OUT UNDERLOW
3557   0B6D 6B          	MOV	L,E	;RESTORE L
3558   0B6E C9          	RET		;RETURN
3559   0B6F             
3560   0B6F             ;
3561   0B6F             ; SUBROUTINE CSIGN
3562   0B6F             ;
3563   0B6F             ;   THIS SUBROUTINE COMPUTES AND STORE THE MANTISSA
3564   0B6F             ;   SIGN FOR THE FLOATING MULTIPLY AND DIVIDE ROUTINES
3565   0B6F             ;
3566   0B6F             ; REGISTERS ON ENTRY:
3567   0B6F             ;
3568   0B6F             ;   (H,L) = ADDRESS OF ONE OPERAND
3569   0B6F             ;   (H,B) = ADDRESS OF OTHER OPERAND
3570   0B6F             ;   (H,C) = ADDRESS OF RESULT
3571   0B6F             ;
3572   0B6F             ; REGISTERS ON EXIT:
3573   0B6F             ;
3574   0B6F             ;   A,D,E = GARBAGE
3575   0B6F             ;   B,C,H,L = SAME AS ON ENTRY
3576   0B6F             ;
3577   0B6F CD 7F 0B    CSIGN:	CALL	MSFH	;SET A=SIGN(H,L), E=SIGN(H,B)
3578   0B72 AB          	XRA	E	;EXCLUSIVE OR SIGNS TO GET NEW SIGN
3579   0B73 CD 77 0B    	CALL	CSTR	;STORE SIGN INTO RESULT
3580   0B76 C9          	RET		;RETURN
3581   0B77             			; END OF PAGE 53
3582   0B77             
3583   0B77             ;
3584   0B77             ;SUBROUTINE CSTR
3585   0B77             ;  STORES VALUE IN A IN
3586   0B77             ;  CPTR\2
3587   0B77             ;  PUTS LPTR IN E
3588   0B77 5D          CSTR:	MOV	E,L	;SAVE LPTR IN E
3589   0B78 69          	MOV	L,C	;CPTR TO L
3590   0B79 2C          	INR	L	;CPTR\2
3591   0B7A 2C          	INR	L	;TO L
3592   0B7B 2C          	INR	L	;/***TP
3593   0B7C 77          	MOV	M,A	;STORE ANSWER
3594   0B7D 6B          	MOV	L,E	;LPTR BACK TO L
3595   0B7E C9          	RET
3596   0B7F             
3597   0B7F             ;
3598   0B7F             ; SUBROUTINE MSFH
3599   0B7F             ;
3600   0B7F             ;   THIS SUBROUTINE FETCHES THE SIGNS OF THE MANTISSAS
3601   0B7F             ;   OF THE FLOATING POINT NUMBERS POINTED TO BY (H,L)
3602   0B7F             ;   AND (H,B) INTO THE A AND E REGISTERS RESPECTIVEY.
3603   0B7F             ;
3604   0B7F             ; REGISTERS ON EXIT:
3605   0B7F             ;
3606   0B7F             ;   A = SIGN OF MANTISSA OF (H,L)
3607   0B7F             ;   E = SIGN OF MANTISSA OF (H,B)
3608   0B7F             ;   B,C,D,H,L = SAME AS ON ENTAY
3609   0B7F             ;
3610   0B7F 5D          MSFH:	MOV	E,L	;SAVE LPTR
3611   0B80 68          	MOV	L,B	;BPTR TO L
3612   0B81 2C          	INR	L	;BPTR\2
3613   0B82 2C          	INR	L	;/***TP
3614   0B83 2C          	INR	L	;TO L
3615   0B84 7E          	MOV	A,M	;_BPTR\2>TO A
3616   0B85 E6 80       	ANI	128	;SAVE MANT SIGN
3617   0B87 6B          	MOV	L,E	;LPTR BACK TO L
3618   0B88 5F          	MOV	E,A	;STORE BPTR MANT SIGN
3619   0B89 2C          	INR	L	;LPTR\2
3620   0B8A 2C          	INR	L	;/***TP
3621   0B8B 2C          	INR	L	;TO L
3622   0B8C 7E          	MOV 	A,M 	;_LPTR\2>TO A
3623   0B8D E6 80       	ANI	128	;SAVE LPTR MANT SIGN
3624   0B8F 2D          	DCR	L	;LPTR BACK
3625   0B90 2D          	DCR	L	;TO L
3626   0B91 2D          	DCR	L	;/***TP
3627   0B92 C9          	RET
3628   0B93             
3629   0B93             ;SUBROUTINE BCTL
3630   0B93             ;MOVES BPTR CHAR TO LPTR CHAR
3631   0B93             ;DESTROYS E
3632   0B93 5D          BCTL:	MOV	E,L	;LPTR TO E
3633   0B94 68          	MOV	L,B	;BPTR TO L
3634   0B95 2C          	INR	L	;BPTR \2
3635   0B96 2C          	INR	L	;/***TP
3636   0B97 2C          	INR	L	;TO L
3637   0B98 7E          	MOV	A,M	;BPTR CHAR TO A
3638   0B99 6B          	MOV	L,E	;LPTR TO L
3639   0B9A 2C          	INR	L	;LPTR \2
3640   0B9B 2C          	INR	L	;TO L
3641   0B9C 2C          	INR	L	;/***TP
3642   0B9D 77          	MOV	M,A	;STORE BPTR CHAR IN LPTR CHAR
3643   0B9E 6B          	MOV	L,E	;LPTR TO L
3644   0B9F C9          	RET
3645   0BA0             
3646   0BA0             ;
3647   0BA0             ;
3648   0BA0             ;**************************************************************	
3649   0BA0             ;	//// 5 DIGIT FLOATING POINT OUTPUT
3650   0BA0             ;**************************************************************	
3651   0BA0             ;
3652   0BA0             ;
3653   0BA0             ;	*******ROUTINE TO CONVERT FLOATING PT.
3654   0BA0             ;	***NUM8ERS TO ASCII AND OUTPUT THEM VIA A SUBROUTINE
3655   0BA0             ;	***CALLED OUTR - NOTE: THIS IS CURRENTLY SET
3656   0BA0             ;	***TO ODT'S OUTPUT ROUTINE
3657   0BA0             ;
3658   0BA0             ;
3659   0BA0 CD DA 09    CVRT:	CALL	ZCHK	;CHECK FOR NEW ZERO
3660   0BA3 C2 B5 0B    	JNZ	NNZRO	;NOT ZERO
3661   0BA6 0C          	INR	C	;IT WAS, OFFSET C BY 2
3662   0BA7 0C          	INR	C
3663   0BA8 69          	MOV	L,C
3664   0BA9 CD 93 0A    	CALL	WZER	;WRITE ZERO
3665   0BAC 2C          	INR	L	;PNT TO DECIMAL EXPONENT
3666   0BAD 2C          	INR	L
3667   0BAE 2C          	INR	L
3668   0BAF 2C          	INR	L
3669   0BB0 AF          	XRA	A	;SET IT TO ZERO
3670   0BB1 77          	MOV	M,A
3671   0BB2 C3 14 0C    	JMP	MDSKP	;OUTPUT IT
3672   0BB5 56          NNZRO:	MOV	D,M	;/GET THE NUMBER TO CONVERT
3673   0BB6 2C          	INR	L
3674   0BB7 46          	MOV	B,M
3675   0BB8 2C          	INR	L
3676   0BB9 5E          	MOV	E,M
3677   0BBA 2C          	INR	L	;/4 WORD***TP
3678   0BBB             			; END OF PAGE 54
3679   0BBB             	
3680   0BBB             	
3681   0BBB 7E          	MOV	A,M	;/***TP
3682   0BBC 0C          	INR	C	;OFFSET SCRATCH POINTER BY 2
3683   0BBD 0C          	INR	C
3684   0BBE 69          	MOV	L,C	;/L NOT NEEDED ANY MORE
3685   0BBF 72          	MOV	M,D	;/SAVE NUMBER IN SCRATCH
3686   0BC0 2C          	INR	L
3687   0BC1 70          	MOV	M,B
3688   0BC2 2C          	INR	L
3689   0BC3 73          	MOV	M,E	;/***TP
3690   0BC4 2C          	INR	L	;/***TP
3691   0BC5 47          	MOV	B,A	;/SAVE COPY OF CHAR & SIGN
3692   0BC6 E6 4F       	ANI	117O	;GET ONLY CHAR.
3693   0BC8 77          	MOV	M,A	;/SAVE ABS(NUMBER)
3694   0BC9 FE 40       	CPI	100O	;CK FOR ZERO
3695   0BCB CA D2 0B    	JZ	NZRO
3696   0BCE D6 01       	SUI	1	;/GET SIGN OF DEC. EXP
3697   0BD0 E6 40       	ANI	100O	;/GET SIGN OF CHAR.
3698   0BD2 07          NZRO:	RLC		;MOVE IT TO SIGN POSITION
3699   0BD3 2C          	INR	L	;/MOVE TO DECIMAL EXP.
3700   0BD4 77          	MOV	M,A	;/SAVE SIGN OF EXP.
3701   0BD5 78          	MOV	A,B	;/GET MANT. S!GH BACK
3702   0BD6 CD 96 0C    	CALL	SIGN	;OUTPUT SIGN
3703   0BD9 2E 1A       	MVI	L,(TEN5 & 377O)	;/TRY MULT. OR DIV. BY 100000 FIRST
3704   0BDB CD F7 0C    	CALL	COPT	;/MAKT A COPY IN RAM
3705   0BDE CD A3 0C    TST8:	CALL	GCHR	;/GET CHAR. OF NUMBER
3706   0BE1 47          	MOV	B,A	;/SAVE A COPY
3707   0BE2 E6 40       	ANI	100O	;/GET ABSOLUTE VALUE DR VAR
3708   0BE4 78          	MOV	A,B	;/INCASE PLUS
3709   0BE5 CA EB 0B    	JZ	GOTV	;/ALREADY PLUS
3710   0BE8 3E 80       	MVI	A,200O	;/MAKE MINUS INTO PLUS
3711   0BEA 90          	SUB	B	;/PLUS=200B-CHAR
3712   0BEB FE 12       GOTV:	CPI	22O	;/TEST FOR USE OF 100000
3713   0BED FA F9 0B    	JM	TRY1	;/WONT GO
3714   0BF0 CD A9 0C    	CALL	MORD	;/W!LL GO SO DO IT
3715   0BF3 C6 05       	ADI	5	;/INCRENENT DEC. EXPONENT BY 5
3716   0BF5 77          	MOV	M,A	;/UPDATE MEM
3717   0BF6 C3 DE 0B    	JMP	TST8	;/GO TRY AGAIN
3718   0BF9 2E 1E       TRY1:	MVI	L,(TEN & 377O)	;NOW USE JUST TEN
3719   0BFB CD F7 0C    	CALL	COPT	;/PUT 17 IN RAM
3720   0BFE CD A3 0C    TST1:	CALL	GCHR	;/GET CHARACTERISTIC
3721   0C01 FE 01       	CPI	1	;/MUST GET IN RANGE I TO 5
3722   0C03 F2 0F 0C    	JP	OK1	;/ATLEAST ITS 1 OR BIGGER
3723   0C06 CD A9 0C    MDGN:	CALL	MORD	;/MUST MUL OF DIV BY 10
3724   0C09 C6 01       	ADI	1	;/ITICREN.ENT DECIMAL EXP.
3725   0C0B 77          	MOV	M,A	;/UPDARE MEM
3726   0C0C C3 FE 0B    	JMP	TST1	;/NOW TRY AGAIN
3727   0C0F FE 07       OK1:	CPI	7	;/TEST FOR LESS THAN 7
3728   0C11 F2 06 0C    	JP	MDGN	;/NCPE - 7 OR GREATER
3729   0C14 69          MDSKP:	MOV	L,C	;/SET UP DIGIT COUNT
3730   0C15 2D          	DCR	L
3731   0C16 2D          	DCR	L	;/IN 1ST WORD OF SCRATCH
3732   0C17 36 05       	MVI	M,5	;/5 DIGITS
3733   0C19 5F          	MOV	E,A	;/SAVE CHAR. AS LEFT SHIFT COUNT
3734   0C1A CD 7C 0C    	CALL	LSFT	;/SHIFT LEFT PROPER NUMBER
3735   0C1D FE 0A       	CPI	12O	;/TEST FOR 2 DIGITS HERE
3736   0C1F F2 CF 0C    	JP	TWOD	;/JM? IF 2 DIGITS TO OUIPUT
3737   0C22 CD 40 0C    	CALL	DIGO	;/OUTPUT FIRST DIGIT
3738   0C25 CD 54 0C    POPD:	CALL	MULTT	;/MULTIPLY THE NUMBER BY 10
3739   0C28 CD 40 0C    INPOP:	CALL	DIGO	;/PRINT DIGIT IN A
3740   0C2B C2 25 0C    	JNZ	POPD	;/MORE DIGITS?
3741   0C2E 3E C5       	MVI	A,305O	;/NO SO PRINT E
3742   0C30 CD FD 0F    	CALL	OUTR	;/BASIC CALL TO OUTPUT
3743   0C33 CD C4 0C    	CALL	GETEX	;/GET DECIMAL EXP
3744   0C36 47          	MOV	B,A	;/SAVE A COPY
3745   0C37 CD 96 0C    	CALL	SIGN	;/OUTPUT SIGN
3746   0C3A 78          	MOV	A,B	;/GET EXP BACK
3747   0C3B E6 3F       	ANI	77O	;/GET GOOD BITS
3748   0C3D CD E6 0C    	CALL	CTWO	;/GO CONVERT 2 DIGITS
3749   0C40 C6 B0       DIGO:	ADI	260O	;/MAKE A INTO ASCII
3750   0C42 CD FD 0F    	CALL	OUTR	;/OUTPUT DIGIT
3751   0C45 69          	MOV	L,C	;/GET DIGIT COUNT
3752   0C46 2D          	DCR	L	;/BACK UP TO DIGIT COUNT
3753   0C47 2D          	DCR	L
3754   0C48 7E          	MOV	A,M	;/TEST FOR DECIMAL PT
3755   0C49 FE 05       	CPI	5	;/PRINT . AFTER 1ST DIGIT
3756   0C4B 3E AE       	MVI	A,256O	;/JUST IN CASE
3757   0C4D CC FD 0F    	CZ	OUTR	;/OUTPUT . IF 1ST DIGIT
3758   0C50 56          	MOV	D,M	;/NOW DECREMENT DIGIT COUNT
3759   0C51 15          	DCR	D
3760   0C52 72          	MOV	M,D	;/UPDATE MEM AND LEAVE FLOPS SET
3761   0C53 C9          	RET		;/SERVES AS TERM FOR DIG & CVRT
3762   0C54 1E 01       MULTT:	MVI	E,1	;/MULT. BY 10 (START WITH X2)
3763   0C56 CD 7C 0C    	CALL	LSFT	;/LEFT SHIFT 1 = X2
3764   0C59 69          	MOV	L,C	;/SAVE X2 IN "RESULT"
3765   0C5A 2D          	DCR	L	;/SET TO TOP OF NUMBER
3766   0C5B 79          	MOV	A,C	;/SET C TO RESULT
3767   0C5C C6 09       	ADI	11O
3768   0C5E 4F          	MOV	C,A	;/NOW C SET RIGHT
3769   0C5F 7C          	MOV	A,H	;/SHOW RAM TO RAM TRANSFER
3770   0C60 CD 05 0D    	CALL	COPY	;/SAVE X2 FINALLY
3771   0C63 79          	MOV	A,C	;/MUST RESET C
3772   0C64 D6 09       	SUI	11O	;/BACK TO NORMAL
3773   0C66 4F          	MOV	C,A	; END OF PAGE 55
3774   0C67             
3775   0C67 1E 02       	MVI	E,2	;/NOW GET (X2)X4=X8
3776   0C69 69          	MOV	L,C	;/BUT MUST SAVE OVERFLOW
3777   0C6A 2D          	DCR	L
3778   0C6B CD 80 0C    	CALL	TLP2	;/GET X8
3779   0C6E 69          	MOV	L,C	;/SET UP TO CALL DADD
3780   0C6F 79          	MOV	A,C	;/SET B TO X2
3781   0C70 C6 0A       	ADI	12O	;/TO X2
3782   0C72 47          	MOV	B,A
3783   0C73 CD 06 0A    	CALL	DADD	;/ADD TWO LOW WORDS
3784   0C76 2D          	DCR	L	;/BACK UP TO OVERFLOW
3785   0C77 7E          	MOV	A,M	;/GET IT
3786   0C78 68          	MOV	L,B	;/NOW SET TO X2 OVERFLOW
3787   0C79 2D          	DCR	L	;/ITS AT B-1
3788   0C7A 8E          	ADC	M	;/ADD WITH CARRY - CARRY WAS PRESERVED
3789   0C7B C9          	RET		;/ALL DONE RETURN OVERFLOW IN A
3790   0C7C 69          LSFT:	MOV	L,C	;/SET PTR POR LEFT SHIFT OF NUMBER
3791   0C7D 2D          	DCR	L	;/BACK UP TO OVERFLOW
3792   0C7E AF          	XRA	A	;/OVERFLOW=0 IST TIME
3793   0C7F 77          TLOOP:	MOV	M,A	;/SAVE OVERFLOW
3794   0C80 1D          TLP2:	DCR	E	;/TEST FOR DONE
3795   0C81 F8          	RM		;/DONE WHEN E MINUS
3796   0C82 2C          	INR	L	;/MOVE TO LOW
3797   0C83 2C          	INR	L
3798   0C84 2C          	INR	L	;/***TP EXTENSION
3799   0C85 7E          	MOV	A,M	;SHIFT LEFT 4 BYTES
3800   0C86 17          	RAL
3801   0C87 77          	MOV	M,A	;/PUT BACK
3802   0C88 2D          	DCR	L	;/***TP - ALL DONE
3803   0C89 7E          	MOV	A,M	;/GET LOW
3804   0C8A 17          	RAL		;/SHIFT LEFT 1
3805   0C8B 77          	MOV	M,A	;/RESTORE IT
3806   0C8C 2D          	DCR	L	;/BACK UP TO HIGH
3807   0C8D 7E          	MOV	A,M	;/GET HIGH
3808   0C8E 17          	RAL		;/SHIFT IT LEFT WITH CARRY
3809   0C8F 77          	MOV	M,A	;/PUT IT BACK
3810   0C90 2D          	DCR	L	;/BACK UP TO OVERFLOW
3811   0C91 7E          	MOV	A,M	;/GET OVERFLOW
3812   0C92 17          	RAL		;/SHIFT IT LEFT
3813   0C93 C3 7F 0C    	JMP	TLOOP	;/GO FOR MORE
3814   0C96 E6 80       SIGN:	ANI	200O	;/GET SIGN BIT
3815   0C98 3E A0       	MVI	A,240O	;/SPACE INSTEAD OF PLUS
3816   0C9A CA 9F 0C    	JZ	PLSV	;/TEST FOR +
3817   0C9D 3E AD       	MVI	A,255O	;/NEGATIVE
3818   0C9F CD FD 0F    PLSV:	CALL	OUTR	;/OUTPUT SIGN
3819   0CA2 C9          	RET
3820   0CA3 69          GCHR:	MOV	L,C	;/GET CHARCTERISTIC
3821   0CA4 2C          GETA:	INR	L	;/MOVE TO IT
3822   0CA5 2C          	INR	L
3823   0CA6 2C          	INR	L	;/***TP
3824   0CA7 7E          	MOV	A,M	;/FETCH INTO A
3825   0CA8 C9          	RET		;/DONE
3826   0CA9 CD C4 0C    MORD:	CALL	GETEX	;/MVL OR DIV DEPENDING ON EXP
3827   0CAC 5F          	MOV	E,A	;/SAVE DECIMAL EXP
3828   0CAD 45          	MOV	B,L	;/SET UP TO MVLT OR DIV
3829   0CAE 04          	INR	B	;/NOW BOP POINTER SET
3830   0CAF 69          	MOV	L,C	;/L POINTS TO NUMBER TO CONVERT
3831   0CB0 79          	MOV	A,C	;/POINT C AT ''RESULT" AREA
3832   0CB1 C6 09       	ADI	11O	;/IN SCRATCH
3833   0CB3 4F          	MOV	C,A	;/NOW C SET RIGHT
3834   0CB4 7B          	MOV	A,E	;/NOW TEST FOR MUL
3835   0CB5 E6 80       	ANI	200O	;/TEST MEGATIVE DEC. EXP.
3836   0CB7 CA C9 0C    	JZ	DIVIT	;/IF EXP IS + THEN DIVIDE
3837   0CBA CD D3 0F    	CALL	LMUL	;/MULT.
3838   0CBD 79          FINUP:	MOV	A,C	;/SAVE LMO. OF RESULT
3839   0CBE 4D          	MOV	C,L	;/C=LOC OF NUMBER (IT WAS DESTROYED)
3840   0CBF 6F          	MOV	L,A	;/SET L TO LOC. OF RESUTL
3841   0CC0 7C          	MOV	A,H	;/SHOW RAM TO RAM TRANSFER
3842   0CC1 CD 05 0D    	CALL	COPY	;MOVE RESULT TO NUMBER
3843   0CC4 69          GETEX:	MOV	L,C	;/NOVI GET DECIMAL EXP
3844   0CC5 2C          	INR	L
3845   0CC6 C3 A4 0C    	JMP	GETA	;USE PART OF GCHR
3846   0CC9 CD D6 0F    DIVIT:	CALL	LDIV	;/DIVIDE
3847   0CCC C3 BD 0C    	JMP	FINUP
3848   0CCF CD E6 0C    TWOD:	CALL	CTWO	;/CONVERT TO 2 DIGITS
3849   0CD2 47          	MOV	B,A	;/SAVE ONES DIGIT
3850   0CD3 CD C4 0C    	CALL	GETEX	;/GET DECIMAL EXP
3851   0CD6 5F          	MOV	E,A	;/SAVE A COPY
3852   0CD7 E6 80       	ANI	200O	;/TEST FOR MEGATIVE
3853   0CD9 CA E2 0C    	JZ	ADD1	;/BUMP EXF BY I SINCE 2 DIGITS
3854   0CDC 1D          	DCR	E	;/DECREMENT NEGATIVE EXP SINCE 2 DIGITS
3855   0CDD 73          FINIT:	MOV	M,E	;/RESTORE EXP WITH NEW VALUE
3856   0CDE 78          	MOV	A,B	;/NOW DO 2NC DIGIT
3857   0CDF C3 28 0C    	JMP	INPOP	;/GO OUT 2ND AND REST FO DIGITS
3858   0CE2 1C          ADD1:	INR	E	;/COMPEN3A7E FOR 2 DIGITS
3859   0CE3 C3 DD 0C    	JMP	FINIT
3860   0CE6 1E FF       CTWO:	MVI	E,377O	;/CONVERT 2 DIGIT BIN TO BCD
3861   0CE8 1C          LOOP:	INR	E	;/ADD UP TENS DIGIT
3862   0CE9 D6 0A       	SUI	12O	;/SUBTRACT 10
3863   0CEB F2 E8 0C    	JP	LOOP	;/TIIL NEGATIVE RESULT
3864   0CEE C6 0A       	ADI	12q	;/RESTORE ONES DIGIT
3865   0CF0 47          	MOV	B,A	;/SAVE ONES DIGIT
3866   0CF1 7B          	MOV	A,E	;/GET TENS DIGIT
3867   0CF2 CD 40 0C    	CALL	DIGO	;/OUTPUT IT
3868   0CF5             			; END OF PAGE 56
3869   0CF5             	
3870   0CF5 78          	MOV	A,B	;/SET A TO 2ND DIGIYV
3871   0CF6 C9          	RET
3872   0CF7 79          COPT:	MOV	A,C	;/COPY FROM 10-N TO RAM
3873   0CF8 C6 05       	ADI	5
3874   0CFA 4F          	MOV	C,A	;/NSET C TO PLACE TO PUT
3875   0CFB 3E 0D       	MVI	A,(TEN5/256)
3876   0CFD CD 05 0D    	CALL	COPY	;/COPY ET
3877   0D00 79          	MOV	A,C	;/NOW RESET C
3878   0D01 D6 05       	SUI	5	;/ITS RESET
3879   0D03 4F          	MOV	C,A
3880   0D04 C9          	RET
3881   0D05 44          COPY:	MOV	B,H	;/SAVE RAM H
3882   0D06 67          	MOV	H,A	;/SET TO SOURCE H
3883   0D07 7E          	MOV	A,M	;/GET 4 WORDS INTO THE REGS.
3884   0D08 2C          	INR	L
3885   0D09 56          	MOV	D,M
3886   0D0A 2C          	INR	L
3887   0D0B 5E          	MOV	E,M
3888   0D0C 2C          	INR	L
3889   0D0D 6E          	MOV	L,M	;/LAST ONE ERASES L
3890   0D0E 60          	MOV	H,B	;/SET TO DESTINATION RAM
3891   0D0F 45          	MOV	B,L	;/SAVE 4TH WORD IN B
3892   0D10 69          	MOV	L,C	;/SET TO DESTINATION
3893   0D11 77          	MOV	M,A	;/SAVE FIRST WORD
3894   0D12 2C          	INR	L
3895   0D13 7E          	MOV	A,M	;/SAVE THIS WORD IN A (INPUT SAVES C HERE
3896   0D14 72          	MOV	M,D	;/NOW PUT 2ND WORD
3897   0D15 2C          	INR	L
3898   0D16 73          	MOV	M,E
3899   0D17 2C          	INR	L
3900   0D18 70          	MOV	M,B	;/ALL 4 COPIED NOW
3901   0D19 C9          	RET		;/ALL DONE
3902   0D1A             ;
3903   0D1A             ;
3904   0D1A C3 10 00 11 TEN5:	.DB	303O,20O,0O,21O	;/303240(8) = 100000.
3905   0D1E A0 00 00 04 TEN:	.DB	240O,0O,0O,4O	;/12(8) = 10
3906   0D22             ;
3907   0D22             ; SCRATCH MAP FOR	I/O CONVERSION ROUTINES
3908   0D22             ;
3909   0D22             ; RELATIVE TO (C+2)USE
3910   0D22             ; C-2	DIGIT COUNT
3911   0D22             ; C-1	OVERFLOW
3912   0D22             ; C	HIGH NUMBER - MANTISSA
3913   0D22             ; C+1	LOW NUMBER
3914   0D22             ; C+2	CHARACTERISTIC
3915   0D22             ; C+3	DECIMAL EXPONEXT (SIGN	MAG.)
3916   0D22             ; C+4	TEN**N
3917   0D22             ; C+5	TEN**N
3918   0D22             ; C+6 	TEN**N
3919   0D22             ; C+7	RESULT OF MULT & DIV
3920   0D22             ; C+8	AND TEMP FOR X2
3921   0D22             ; C+9	"	"
3922   0D22             ; C+10	L FOR NUMBER TO GO INTO (INPUT ONLY)
3923   0D22             ; C+11	DIGIT JUST INPUT (INPUT ONLY)
3924   0D22             ;
3925   0D22             ;	/*****BEGIN INPUT*************
3926   0D22             ;
3927   0D22             ;
3928   0D22 37          ERR:	STC		;ERROR FLAG
3929   0D23 C9          	RET		;AND RETURN
3930   0D24             	
3931   0D24             ;
3932   0D24             ;
3933   0D24             ;**************************************************************	
3934   0D24             ;	//// 4 1/2 DIGIT INPUT ROUTINE
3935   0D24             ;**************************************************************	
3936   0D24             ;
3937   0D24             ;	/L POINTS TO WHERE TO PUT INPUT NUMBER
3938   0D24             ;	/C POINTS TO 13(10) WORDS OF SCRATCH
3939   0D24             ;
3940   0D24             INPUT:
llbasic.asm line 3940: label value misalligned.           (INPUT)
3941   0D24 45          	MOV	B,L	;/SAVE ADDRESS WHERE DATA IS TO GO
3942   0D25 79          	MOV	A,C	;/IN SCRATCH
3943   0D26 C6 0F       	ADI	17O	;/COMPUTE LOC. IN SCRATCH
3944   0D28 6F          	MOV	L,A
3945   0D29 70          	MOV	M,B	;/PUT IT
3946   0D2A 0C          	INR	C	;/OFFSET SCRATCH POINTER
3947   0D2B 0C          	INR	C	;/BY 2
3948   0D2C CD 32 0E    	CALL	ZROIT	;/ZERO NUMBER
3949   0D2F 2C          	INR	L	;/AND ZERO
3950   0D30 77          	MOV	M,A	;/DECIMAL EXPONENT
3951   0D31 CD CE 0D    	CALL	GNUM	;/GET INTEGER PART OF NUM
3952   0D34 FE FE       	CPI	376O	;/TERM=.?
3953   0D36 CA 89 0D    	JZ	DECPT	;/YES
3954   0D39 FE 15       TSTEX:	CPI	25O	;/TEST FOR E
3955   0D3B CA 9E 0D    	JZ 	INEXP	;/YES - HANDLE EXP
3956   0D3E FE F0       	CPI	360O	;/TEST FOR SPACE TERM (240B-260B)
3957   0D40 C2 22 0D    	JNZ	ERR	;/NOT LEGAL TERM
3958   0D43 CD 17 0E    	CALL	FLTSGN	;/FLOAT # AND SIGN IT
3959   0D46 CD C4 0C    SCALE:	CALL	GETEX	;/GET DECIMAL EXP
3960   0D49 E6 7F       	ANI	177O	;/GET GOOD BITS
3961   0D4B 5F          	MOV	E,A	;/SAVE COPY
3962   0D4C E6 40       	ANI	100O	;/GET SIGN OF EXP
3963   0D4E 07          	RLC		;/INTO SIGN BIT
3964   0D4F             			; END OF PAGE 57
3965   0D4F             	
3966   0D4F B7          	ORA	A	;/SET FLOPS
3967   0D50 47          	MOV	B,A	;/SAVE SIGN
3968   0D51 7B          	MOV	A,E	;/GET EXP BACK
3969   0D52 CA 58 0D    	JZ	APLS	;/JMP IS +
3970   0D55 3E 80       	MVI	A,200O	;/MAKE MINUS +
3971   0D57 93          	SUB	E	;/NOW ITS +
3972   0D58 80          APLS:	ADD	B	;/SIGN NUMBER
3973   0D59 77          	MOV	M,A	;/SAVE EXP (SIGN & MAG.)
3974   0D5A 2E 1A       	MVI	L,(TEN5 & 377O) ;/TRY MORD WITH 10-5 FIRST
3975   0D5C CD F7 0C    	CALL	COPT	;/TRAN3FER TO RAM
3976   0D5F CD C4 0C    	CALL	GETEX	;/GET+DECIMAL EXP
3977   0D62 E6 3F       INT5:	ANI	77O	;/GET MAG. OF EXP
3978   0D64 FE 05       	CPI	5O	;/TEST FOR USE OF 10**5
3979   0D66 FA 72 0D    	JM	TRYTN	;/WONT GO - TRY 10
3980   0D69 CD A9 0C    	CALL	MORD	;/WILL GO SO DO IT
3981   0D6C D6 05       	SUI	5O	;/MAG = MAG -5
3982   0D6E 77          	MOV	M,A	;/UPDATE DEC. EXP IN MEM
3983   0D6F C3 62 0D    	JMP	INT5	;/GO TRY AGAIN
3984   0D72 2E 1E       TRYTN:	MVI 	L,(TEN & 377O)	;/PUT TEN IN RAM
3985   0D74 CD F7 0C    	CALL	COPT
3986   0D77 CD C4 0C    	CALL	GETEX	;/SET UP FOR LOOP
3987   0D7A E6 3F       INT1:	ANI 	77O	;/GET MAGNITUDE
3988   0D7C B7          	ORA	A	;/TEST FOR 0
3989   0D7D CA 1B 0E    	JZ	SAVEN	;/DONE, MOVE NUM OUT AND GET OUT
3990   0D80 CD A9 0C    	CALL	MORD	;/NOT DONE - DO 10
3991   0D83 D6 01       	SUI	1O	;/EXP = EXP -1
3992   0D85 77          	MOV	M,A	;/UPDATE MEM
3993   0D86 C3 7A 0D    	JMP	INT1	;/TRY AGAIN
3994   0D89 69          DECPT:	MOV	L,C	;/ZERO DIGIT COUNT
3995   0D8A 2D          	DCR	L	;/SINCE ITS NECESSARY
3996   0D8B 2D          	DCR	L	;/TO COMPUTE EXP.
3997   0D8C 36 00       	MVI	M,0	;/ZEROED
3998   0D8E CD 11 0E    	CALL	EP1	;/GNUM IN MIDDLE
3999   0D91 5F          	MOV	E,A	;/SAVE TERMINATOR
4000   0D92 69          	MOV	L,C	;/MOVE DIGIT COUNT TO EXP
4001   0D93 2D          	DCR	L	;/BACK UP TO DIGIT COUNT
4002   0D94 2D          	DCR	L
4003   0D95 46          	MOV	B,M	;/GOT DIGIT COUNT
4004   0D96 CD C4 0C    	CALL	GETEX	;/SET L TO DEC. EXF
4005   0D99 70          	MOV	M,B	;/PUT EXP
4006   0D9A 7B          	MOV	A,E	;/TERM BACK TO A
4007   0D9B C3 39 0D    	JMP	TSTEX	;/TEST FOR E+OR-XX
4008   0D9E CD 17 0E    INEXP:	CALL	FLTSGN	;/FLOAT AND SIGN NUMBER
4009   0DA1 CD 1B 0E    	CALL	SAVEN	;/SAVE NUMBER IN (L) TEMP
4010   0DA4 CD 32 0E    	CALL	ZROIT	;/ZERO OUT NUM. FOR INPUTTING EXP
4011   0DA7 CD CE 0D    	CALL	GNUM	;/NOW INPUT EXPONENT
4012   0DAA FE F0       	CPI	360O	;/TEST FOR SAPCE TERM
4013   0DAC C2 22 0D    	JNZ	ERR	;/NOT LEGAL - TRY AN N
4014   0DAF 69          	MOV	L,C	;/GET EXP OUT OF MEM
4015   0DB0 2C          	INR	L	;/***TP
4016   0DB1 2C          	INR	L	;/EXP LIMITED TO 5 BITS
4017   0DB2 7E          	MOV	A,M	;/GET LOWEST 8 BITS
4018   0DB3 E6 1F       	ANI	37O	;/GET GOOD BITS
4019   0DB5 47          	MOV	B,A	;/SAVE THEM
4020   0DB6 2C          	INR	L	;/GET SIGN OF EXP
4021   0DB7 7E          	MOV	A,M	;/INTO A
4022   0DB8 B7          	ORA	A	;/SET FLOPS
4023   0DB9 78          	MOV	A,B	;/INCASE NOTHING TO DO
4024   0DBA FA C0 0D    	JM	USEIT	;/IF NEG. USE AS +
4025   0DBD 3E 00       	MVI	A,0O	;/IF + MAKE -
4026   0DBF 97          	SUB	A	;/0-X = -X
4027   0DC0 2C          USEIT:	INR	L	;/POINT AT EXP
4028   0DC1 86          	ADD	M	;/GET REAL DEC. EXP
4029   0DC2 77          	MOV	M,A	;/PUT IN MEM
4030   0DC3 79          	MOV	A,C	;/NOW GET NUMBER BACK
4031   0DC4 C6 0D       	ADI	15O	;/GET ADD OF L
4032   0DC6 6F          	MOV	L,A	;/L POINTS TO L OF NUMBER
4033   0DC7 6E          	MOV	L,M	;/NOW L POINTS TO NUMBER
4034   0DC8 CD 05 0D    	CALL	COPY	;/RAM TO RAM COPY
4035   0DCB             			;/COPY IT BACK
4036   0DCB C3 46 0D    	JMP	SCALE	;/NOW ADIUST FOR EXP
4037   0DCE CD FA 0F    GNUM:	CALL	INP	;/GET A CHAR
4038   0DD1 FE A0       	CPI	240O	;/IGNORE LEADING SPACES
4039   0DD3 CA CE 0D    	JZ	GNUM
4040   0DD6 FE AD       	CPI	255O	;/TEST FOR
4041   0DD8 C2 E4 0D    	JNZ	TRYP	;/NOT MINUS
4042   0DDB 69          	MOV	L,C	;/MINUS SO SET SIGN
4043   0DDC 2C          	INR	L	;/IN CHAR LOC.
4044   0DDD 2C          	INR	L	;/***TP
4045   0DDE 2C          	INR	L
4046   0DDF 36 80       	MVI	M,200O	;/SET - SIGN
4047   0DE1 C3 CE 0D    	JMP	GNUM
4048   0DE4 FE AB       TRYP:	CPI	253O	;/IGNORE +
4049   0DE6 CA CE 0D    	JZ	GNUM
4050   0DE9 D6 B0       TSTN:	SUI	260O	;/STRIP ASCII
4051   0DEB F8          	RM		;/RETURN IF TERM
4052   0DEC FE 0A       	CPI	12O	;/TEST FOR NUMBER
4053   0DEE F0          	RP		;/ILLEGAL
4054   0DEF 5F          	MOV	E,A	;/SAVE DIGIT
4055   0DF0 CD 2C 0E    	CALL	GETN	;/LOC. OF DIGIT STORAGE TO L
4056   0DF3 73          	MOV	M,E	;/SAVE DIGIT
4057   0DF4 CD 54 0C    	CALL	MULTT	;/MULT NUMBER BY 10
4058   0DF7 B7          	ORA	A	;/TEST FOR TOO MANY DIGITS
4059   0DF8             			; END OF PAGE 58
4060   0DF8             	
4061   0DF8 C0          	RNZ		;/TOO MANY DIGITS
4062   0DF9 CD 2C 0E    	CALL GETN	;/GET DIGIT
4063   0DFC 69          	MOV L,C	;/SET L TO NUMBER
4064   0DFD 2C          	INR	L
4065   0DFE 2C          	INR	L	;/***TP
4066   0DFF 86          	ADD	M	;/ADD IN THE DIGIT
4067   0E00 77          	MOV	M,A	;/PUT RESULT BACK
4068   0E01 2D          	DCR	L	;/OW DO HIGH
4069   0E02 7E          	MOV	A,M 	;/GET HIGH TO ADD IN CARRY
4070   0E03 CE 00       	ACI	0O	;/ADD IN CARRY
4071   0E05 77          	MOV	M,A	;/UPDATE HIGH
4072   0E06 2D          	DCR	L	;/***TP EXTENSION
4073   0E07 7E          	MOV	A,M
4074   0E08 CE 00       	ACI	0O	;/ADD IN CARRY
4075   0E0A 77          	MOV	M,A	;/***TP ALL DONE
4076   0E0B D8          	RC		;/OVERFLOW ERROR
4077   0E0C 2D          	DCR	L	;/BUMP DIGIT COUNT NOW
4078   0E0D 2D          	DCR	L
4079   0E0E 46          	MOV 	B,M	;/GET DIGIT COUNT
4080   0E0F 04          	INR	B	;/BUMP DIGIT COUNT
4081   0E10 70          	MOV	M,B	;/UPDATE DIGIT COUNT
4082   0E11 CD FA 0F    EP1:	CALL	INP	;/GET NEXT CHAR
4083   0E14 C3 E9 0D    	JMP	TSTN	;/MUST BE NUM. OR TERM
4084   0E17 69          FLTSGN:	MOV	L,C	;POINT L AT NUMBER TO FLOAT
4085   0E18 C3 CA 0F    	JMP	FLOAT	;GO FLOAT IT
4086   0E1B 79          SAVEN:	MOV	A,C 	;/NUMBER IN W
4087   0E1C C6 0D       	ADI	15O	;/GET ADD OF L
4088   0E1E 6F          	MOV	L,A
4089   0E1F 5E          	MOV	E,M	;/GET L OF RESULT
4090   0E20 6B          	MOV	L,E	;/POINT L AT (L)
4091   0E21 2C          	INR	L	;/SET TO 2ND WORD TO SAVE C
4092   0E22 71          	MOV	M,C	;/SAVE C IN (L) +1 SINCE IT WILL BE DES'D
4093   0E23 69          	MOV	L,C	;/SET UP TO CALL COPY 
4094   0E24 4B          	MOV	C,E	;/NOW L&C SET
4095   0E25 7C          	MOV	A,H	;/RAM TO RAM COPY
4096   0E26 CD 05 0D    	CALL	COPY	;/COPY TO L
4097   0E29 4F          	MOV	C,A	;/(L)+1 RETURNED HERE SO SET AS C
4098   0E2A B7          	ORA	A	;MAKE SURE CY=0 (NO ERROR)
4099   0E2B C9          	RET		;/NOW EVERYTHING HUNKY-DORRY
4100   0E2C 79          GETN:	MOV	A,C	;/GET DIGIT
4101   0E2D C6 A0       	ADI	160	;/LAST LOC. IN SCRATCH
4102   0E2F 6F          	MOV	L,A	;/PUT IN L
4103   0E30 7E          	MOV	A,M	;/GET DIGIT
4104   0E31 C9          	RET
4105   0E32 69          ZROIT:	MOV	L,C	;/ZERO NUMBER
4106   0E33 AF          	XRA	A
4107   0E34 77          	MOV	M,A	;/***TP
4108   0E35 2C          	INR	L	;/***TP
4109   0E36 77          	MOV	M,A
4110   0E37 2C          	INR	L
4111   0E38 77          	MOV	M,A
4112   0E39 2C          	INR	L	;/NOW SET SIGN TO +
4113   0E3A 77          	MOV	M,A
4114   0E3B C9          	RET		;/DONE
4115   0E3C             READ	.EQU	333O	;ODT READ ROUTINE
4116   0E3C             
4117   0E3C             ;CONTAIN LOW BYTE OF TWO BYTE VALUE. RETURNS CY=1 IF
4118   0E3C             ;BC>DE, CY=0 IF BC<DE: Z=1 IF BC=DE.
4119   0E3C 7B          COMP:	MOV	A,E
4120   0E3D B9          	CMP	C
4121   0E3E C0          	RNZ	
4122   0E3F 7A          	MOV	A,D
4123   0E40 BF          	CMP	A
4124   0E41 C9          	RET
4125   0E42             
4126   0E42             ;ROUTINE TO INPUT CHAR FROM TTY
4127   0E42             CHAR2:
llbasic.asm line 4127: label value misalligned.           (CHAR2)
4128   0E42 C5          	PUSH	B
4129   0E43 CD DB 00    	CALL	READ	;INPUT FROM ODT
4130   0E46 78          	MOV	A,B	;GET CHAR TO A REG.
4131   0E47 C1          	POP	B	;RESTORE B,C
4132   0E48 C9          	RET
4133   0E49             
4134   0E49             ;ROUTINE TO ADJUST VALUES OF BIN FORWARD PNT. AND
4135   0E49             ;LINE LENGTH OF SOURCE LINE. PASSED ADD OF TEMP VARIABLE
4136   0E49             ;CONTAINING ADD OF SOURCE LINE.
4137   0E49             PTVAL:
llbasic.asm line 4137: label value misalligned.           (PTVAL)
4138   0E49 F5          	PUSH	PSW
4139   0E4A D5          	PUSH	D
4140   0E4B E5          	PUSH	H
4141   0E4C 3E 02       	MVI	A,002
4142   0E4E 5E          	MOV	E,M
4143   0E4F 2C          	INR	L
4144   0E50 56          	MOV	D,M
4145   0E51 2C          	INR	L
4146   0E52 D5          	PUSH 	D
4147   0E53 E3          N1:	XTHL
4148   0E54 5E          	MOV	E,M
4149   0E55 23          	INX	H
4150   0E56 56          	MOV	D,M
4151   0E57 23          	INX	H
4152   0E58 E3          	XTHL
4153   0E59 73          	MOV	M,E
4154   0E5A 2C          	INR	L
4155   0E5B 72          	MOV	M,D
4156   0E5C 2C          	INR	L
4157   0E5D 3D          	DCR	A
4158   0E5E C2 53 0E    	JNZ	N1	; END OF PAGE 59
4159   0E61 E3          	XTHL
4160   0E62 56          	MOV	D,M
4161   0E63 E1          	POP	H
4162   0E64 72          	MOV	M,D
4163   0E65 E1          	POP	H
4164   0E66 D1          	POP	D
4165   0E67 F1          	POP	PSW
4166   0E68 C9          	RET
4167   0E69             
4168   0E69             ;ROUTINE TO CHK FLAGS ON INPUT AND OUTPUT.
4169   0E69             ;PASSED FLAG VALUE IN REG B.
4170   0E69             MCHK:
llbasic.asm line 4170: label value misalligned.           (MCHK)
4171   0E69 F5          	PUSH	PSW
4172   0E6A DB 03       MCHK1:	IN	3
4173   0E6C A0          	ANA	B
4174   0E6D CA 6A 0E    	JZ	MCHK1
4175   0E70 F1          	POP	PSW
4176   0E71 C9          	RET
4177   0E72             
4178   0E72             ;MULTIPLICATION ROUTINE (ADD. VALUES)
4179   0E72             MULT:
llbasic.asm line 4179: label value misalligned.           (MULT)
4180   0E72 5E          	MOV	E,M
4181   0E73 2B          	DCX	H
4182   0E74 56          	MOV	D, M
4183   0E75 36 11       	MVI	M,11H
4184   0E77 06 00       	MVI	B,0
4185   0E79 48          	MOV	C,B
4186   0E7A 7B          TOP:	MOV	A,E
4187   0E7B 1F          	RAR
4188   0E7C 5F          	MOV	E,A
4189   0E7D 7A          	MOV	A,D
4190   0E7E 1F          	RAR
4191   0E7F 35          	DCR	M
4192   0E80 57          	MOV	D,A
4193   0E81 C8          	RZ
4194   0E82 D2 8F 0E    	JNC	SHIFT
4195   0E85 2B          	DCX	H
4196   0E86 2B          	DCX	H
4197   0E87 78          	MOV	A,B
4198   0E88 86          	ADD	M
4199   0E89 47          	MOV	B,A
4200   0E8A 23          	INX	H
4201   0E8B 79          	MOV	A,C
4202   0E8C 8E          	ADC	M
4203   0E8D 4F          	MOV	C,A
4204   0E8E 23          	INX	H
4205   0E8F 79          SHIFT:	MOV	A,C
4206   0E90 1F          	RAR
4207   0E91 4F          	MOV	C,A
4208   0E92 78          	MOV	A,B
4209   0E93 1F          	RAR
4210   0E94 47          	MOV	B,A
4211   0E95 C3 7A 0E    	JMP 	TOP
4212   0E98             
4213   0E98             ;LINKAGES TO FLOATING POINT ROUTINES
4214   0FC7             	.ORG	7707O
4215   0FC7 C3 C7 0F    	JMP	NORM
4216   0FCA C3 CA 0F    	JMP	FLOAT
4217   0FCD C3 93 0A    	JMP	WZER
4218   0FD0 C3 D0 0F    	JMP	LADD
4219   0FD3 C3 D3 0F    	JMP	LMUL
4220   0FD6 C3 D6 0F    	JMP	LDIV
4221   0FD9 C3 D9 0F    	JMP	LSUB
4222   0FDC C3 DC 0F    	JMP	DFXL
4223   0FDF C3 DF 0F    	JMP	LMCM
4224   0FE2 C3 05 0D    	JMP	COPY
4225   0FE5 C3 A0 0B    	JMP	CVRT
4226   0FE8 C3 5A 1B    	JMP	INPUT
4227   0FEB C3 EB 0F    	JMP	MULT
4228   0FEE C3 EE 0F    	JMP	PTVAL
4229   0FF1 C3 F1 0F    	JMP	DCOMP
4230   0FF4 C3 F4 0F    	JMP	MCHK
4231   0FF7 C3 F7 0F    	JMP	CHAR2
4232   0FFA C3 86 19    	JMP	INL
4233   0FFD C3 C9 17    	JMP	OUTL
4234   1000             
4235   1000             .END
4236   1000             
4237   1000             
4238   1000             	
tasm: Number of errors = 77
